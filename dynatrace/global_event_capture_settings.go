// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalEventCaptureSettings Global event capture settings.
// swagger:model GlobalEventCaptureSettings
type GlobalEventCaptureSettings struct {

	// Additional events to be captured globally as user input.
	//
	// For example, DragStart or DragEnd.
	// Required: true
	// Max Length: 100
	// Min Length: 0
	// Pattern: [a-z,]*
	AdditionalEventCapturedAsUserInput *string `json:"additionalEventCapturedAsUserInput"`

	// Click enabled/disabled.
	// Required: true
	Click *bool `json:"click"`

	// DoubleClick enabled/disabled.
	// Required: true
	DoubleClick *bool `json:"doubleClick"`

	// KeyDown enabled/disabled.
	// Required: true
	KeyDown *bool `json:"keyDown"`

	// KeyUp enabled/disabled.
	// Required: true
	KeyUp *bool `json:"keyUp"`

	// MouseDown enabled/disabled.
	// Required: true
	MouseDown *bool `json:"mouseDown"`

	// MouseUp enabled/disabled.
	// Required: true
	MouseUp *bool `json:"mouseUp"`

	// Scroll enabled/disabled.
	// Required: true
	Scroll *bool `json:"scroll"`
}

// Validate validates this global event capture settings
func (m *GlobalEventCaptureSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalEventCapturedAsUserInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClick(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoubleClick(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyDown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyUp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMouseDown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMouseUp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScroll(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalEventCaptureSettings) validateAdditionalEventCapturedAsUserInput(formats strfmt.Registry) error {

	if err := validate.Required("additionalEventCapturedAsUserInput", "body", m.AdditionalEventCapturedAsUserInput); err != nil {
		return err
	}

	if err := validate.MinLength("additionalEventCapturedAsUserInput", "body", string(*m.AdditionalEventCapturedAsUserInput), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("additionalEventCapturedAsUserInput", "body", string(*m.AdditionalEventCapturedAsUserInput), 100); err != nil {
		return err
	}

	if err := validate.Pattern("additionalEventCapturedAsUserInput", "body", string(*m.AdditionalEventCapturedAsUserInput), `[a-z,]*`); err != nil {
		return err
	}

	return nil
}

func (m *GlobalEventCaptureSettings) validateClick(formats strfmt.Registry) error {

	if err := validate.Required("click", "body", m.Click); err != nil {
		return err
	}

	return nil
}

func (m *GlobalEventCaptureSettings) validateDoubleClick(formats strfmt.Registry) error {

	if err := validate.Required("doubleClick", "body", m.DoubleClick); err != nil {
		return err
	}

	return nil
}

func (m *GlobalEventCaptureSettings) validateKeyDown(formats strfmt.Registry) error {

	if err := validate.Required("keyDown", "body", m.KeyDown); err != nil {
		return err
	}

	return nil
}

func (m *GlobalEventCaptureSettings) validateKeyUp(formats strfmt.Registry) error {

	if err := validate.Required("keyUp", "body", m.KeyUp); err != nil {
		return err
	}

	return nil
}

func (m *GlobalEventCaptureSettings) validateMouseDown(formats strfmt.Registry) error {

	if err := validate.Required("mouseDown", "body", m.MouseDown); err != nil {
		return err
	}

	return nil
}

func (m *GlobalEventCaptureSettings) validateMouseUp(formats strfmt.Registry) error {

	if err := validate.Required("mouseUp", "body", m.MouseUp); err != nil {
		return err
	}

	return nil
}

func (m *GlobalEventCaptureSettings) validateScroll(formats strfmt.Registry) error {

	if err := validate.Required("scroll", "body", m.Scroll); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GlobalEventCaptureSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalEventCaptureSettings) UnmarshalBinary(b []byte) error {
	var res GlobalEventCaptureSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
