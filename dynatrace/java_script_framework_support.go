// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JavaScriptFrameworkSupport Support of various JavaScript frameworks.
// swagger:model JavaScriptFrameworkSupport
type JavaScriptFrameworkSupport struct {

	// ActiveXObject detection support enabled/disabled.
	// Required: true
	ActiveXObject *bool `json:"activeXObject"`

	// AngularJS and Angular support enabled/disabled.
	// Required: true
	Angular *bool `json:"angular"`

	// Dojo support enabled/disabled.
	// Required: true
	Dojo *bool `json:"dojo"`

	// ExtJS, Sencha Touch support enabled/disabled.
	// Required: true
	ExtJS *bool `json:"extJS"`

	// ICEfaces support enabled/disabled.
	// Required: true
	Icefaces *bool `json:"icefaces"`

	// jQuery, Backbone.js support enabled/disabled.
	// Required: true
	JQuery *bool `json:"jQuery"`

	// MooTools support enabled/disabled.
	// Required: true
	MooTools *bool `json:"mooTools"`

	// Prototype support enabled/disabled.
	// Required: true
	Prototype *bool `json:"prototype"`
}

// Validate validates this java script framework support
func (m *JavaScriptFrameworkSupport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveXObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAngular(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDojo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtJS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcefaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMooTools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrototype(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JavaScriptFrameworkSupport) validateActiveXObject(formats strfmt.Registry) error {

	if err := validate.Required("activeXObject", "body", m.ActiveXObject); err != nil {
		return err
	}

	return nil
}

func (m *JavaScriptFrameworkSupport) validateAngular(formats strfmt.Registry) error {

	if err := validate.Required("angular", "body", m.Angular); err != nil {
		return err
	}

	return nil
}

func (m *JavaScriptFrameworkSupport) validateDojo(formats strfmt.Registry) error {

	if err := validate.Required("dojo", "body", m.Dojo); err != nil {
		return err
	}

	return nil
}

func (m *JavaScriptFrameworkSupport) validateExtJS(formats strfmt.Registry) error {

	if err := validate.Required("extJS", "body", m.ExtJS); err != nil {
		return err
	}

	return nil
}

func (m *JavaScriptFrameworkSupport) validateIcefaces(formats strfmt.Registry) error {

	if err := validate.Required("icefaces", "body", m.Icefaces); err != nil {
		return err
	}

	return nil
}

func (m *JavaScriptFrameworkSupport) validateJQuery(formats strfmt.Registry) error {

	if err := validate.Required("jQuery", "body", m.JQuery); err != nil {
		return err
	}

	return nil
}

func (m *JavaScriptFrameworkSupport) validateMooTools(formats strfmt.Registry) error {

	if err := validate.Required("mooTools", "body", m.MooTools); err != nil {
		return err
	}

	return nil
}

func (m *JavaScriptFrameworkSupport) validatePrototype(formats strfmt.Registry) error {

	if err := validate.Required("prototype", "body", m.Prototype); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JavaScriptFrameworkSupport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JavaScriptFrameworkSupport) UnmarshalBinary(b []byte) error {
	var res JavaScriptFrameworkSupport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
