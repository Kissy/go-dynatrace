// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomService custom service
// swagger:model CustomService
type CustomService struct {

	// Custom service enabled/disabled.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the custom service.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// The name of the custom service, displayed in the UI.
	// Required: true
	// Max Length: 500
	// Min Length: 1
	Name *string `json:"name"`

	// The order string. Sorting custom services alphabetically by their order string determines their relative ordering.
	//
	// Typically this is managed by Dynatrace internally and will not be present in GET responses.
	// Max Length: 2147483647
	// Min Length: 1
	Order string `json:"order,omitempty"`

	// The list of process groups the custom service should belong to.
	ProcessGroups []string `json:"processGroups"`

	// The queue entry point flag.
	//
	// Set to `true` for custom messaging services.
	// Required: true
	QueueEntryPoint *bool `json:"queueEntryPoint"`

	// The queue entry point type..
	// Enum: [IBM_MQ JMS KAFKA MSMQ RABBIT_MQ]
	QueueEntryPointType string `json:"queueEntryPointType,omitempty"`

	// The list of rules defining the custom service.
	// Required: true
	// Max Items: 2000
	// Min Items: 1
	Rules []*DetectionRule `json:"rules"`
}

// Validate validates this custom service
func (m *CustomService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueEntryPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueEntryPointType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomService) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *CustomService) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomService) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *CustomService) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 500); err != nil {
		return err
	}

	return nil
}

func (m *CustomService) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if err := validate.MinLength("order", "body", string(m.Order), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("order", "body", string(m.Order), 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *CustomService) validateQueueEntryPoint(formats strfmt.Registry) error {

	if err := validate.Required("queueEntryPoint", "body", m.QueueEntryPoint); err != nil {
		return err
	}

	return nil
}

var customServiceTypeQueueEntryPointTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IBM_MQ","JMS","KAFKA","MSMQ","RABBIT_MQ"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customServiceTypeQueueEntryPointTypePropEnum = append(customServiceTypeQueueEntryPointTypePropEnum, v)
	}
}

const (

	// CustomServiceQueueEntryPointTypeIBMMQ captures enum value "IBM_MQ"
	CustomServiceQueueEntryPointTypeIBMMQ string = "IBM_MQ"

	// CustomServiceQueueEntryPointTypeJMS captures enum value "JMS"
	CustomServiceQueueEntryPointTypeJMS string = "JMS"

	// CustomServiceQueueEntryPointTypeKAFKA captures enum value "KAFKA"
	CustomServiceQueueEntryPointTypeKAFKA string = "KAFKA"

	// CustomServiceQueueEntryPointTypeMSMQ captures enum value "MSMQ"
	CustomServiceQueueEntryPointTypeMSMQ string = "MSMQ"

	// CustomServiceQueueEntryPointTypeRABBITMQ captures enum value "RABBIT_MQ"
	CustomServiceQueueEntryPointTypeRABBITMQ string = "RABBIT_MQ"
)

// prop value enum
func (m *CustomService) validateQueueEntryPointTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customServiceTypeQueueEntryPointTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomService) validateQueueEntryPointType(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueEntryPointType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueueEntryPointTypeEnum("queueEntryPointType", "body", m.QueueEntryPointType); err != nil {
		return err
	}

	return nil
}

func (m *CustomService) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	iRulesSize := int64(len(m.Rules))

	if err := validate.MinItems("rules", "body", iRulesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("rules", "body", iRulesSize, 2000); err != nil {
		return err
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomService) UnmarshalBinary(b []byte) error {
	var res CustomService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
