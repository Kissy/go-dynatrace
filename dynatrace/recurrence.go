// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Recurrence The recurrence of the maintenance window.
// swagger:model Recurrence
type Recurrence struct {

	// The day of the month for monthly maintenance.
	//
	// The value of `31` is treated as the last day of the month for months that don't have a 31st day.
	// The value of `30` is also treated as the last day of the month for February.
	// Maximum: 31
	// Minimum: 1
	DayOfMonth int32 `json:"dayOfMonth,omitempty"`

	// The day of the week for weekly maintenance.
	//
	// The format is the full name of the day in upper case, for example `THURSDAY`.
	// Enum: [FRIDAY MONDAY SATURDAY SUNDAY THURSDAY TUESDAY WEDNESDAY]
	DayOfWeek string `json:"dayOfWeek,omitempty"`

	// The duration of the maintenance window in minutes.
	// Required: true
	// Maximum: 1440
	// Minimum: 1
	DurationMinutes *int32 `json:"durationMinutes"`

	// The start time of the maintenance window in HH:mm format.
	// Required: true
	StartTime *string `json:"startTime"`
}

// Validate validates this recurrence
func (m *Recurrence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recurrence) validateDayOfMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.DayOfMonth) { // not required
		return nil
	}

	if err := validate.MinimumInt("dayOfMonth", "body", int64(m.DayOfMonth), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("dayOfMonth", "body", int64(m.DayOfMonth), 31, false); err != nil {
		return err
	}

	return nil
}

var recurrenceTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FRIDAY","MONDAY","SATURDAY","SUNDAY","THURSDAY","TUESDAY","WEDNESDAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recurrenceTypeDayOfWeekPropEnum = append(recurrenceTypeDayOfWeekPropEnum, v)
	}
}

const (

	// RecurrenceDayOfWeekFRIDAY captures enum value "FRIDAY"
	RecurrenceDayOfWeekFRIDAY string = "FRIDAY"

	// RecurrenceDayOfWeekMONDAY captures enum value "MONDAY"
	RecurrenceDayOfWeekMONDAY string = "MONDAY"

	// RecurrenceDayOfWeekSATURDAY captures enum value "SATURDAY"
	RecurrenceDayOfWeekSATURDAY string = "SATURDAY"

	// RecurrenceDayOfWeekSUNDAY captures enum value "SUNDAY"
	RecurrenceDayOfWeekSUNDAY string = "SUNDAY"

	// RecurrenceDayOfWeekTHURSDAY captures enum value "THURSDAY"
	RecurrenceDayOfWeekTHURSDAY string = "THURSDAY"

	// RecurrenceDayOfWeekTUESDAY captures enum value "TUESDAY"
	RecurrenceDayOfWeekTUESDAY string = "TUESDAY"

	// RecurrenceDayOfWeekWEDNESDAY captures enum value "WEDNESDAY"
	RecurrenceDayOfWeekWEDNESDAY string = "WEDNESDAY"
)

// prop value enum
func (m *Recurrence) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, recurrenceTypeDayOfWeekPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Recurrence) validateDayOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayOfWeekEnum("dayOfWeek", "body", m.DayOfWeek); err != nil {
		return err
	}

	return nil
}

func (m *Recurrence) validateDurationMinutes(formats strfmt.Registry) error {

	if err := validate.Required("durationMinutes", "body", m.DurationMinutes); err != nil {
		return err
	}

	if err := validate.MinimumInt("durationMinutes", "body", int64(*m.DurationMinutes), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("durationMinutes", "body", int64(*m.DurationMinutes), 1440, false); err != nil {
		return err
	}

	return nil
}

func (m *Recurrence) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Recurrence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recurrence) UnmarshalBinary(b []byte) error {
	var res Recurrence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
