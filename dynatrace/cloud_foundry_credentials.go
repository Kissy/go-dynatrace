// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudFoundryCredentials Configuration for specific Cloud Foundry credentials.
// swagger:model CloudFoundryCredentials
type CloudFoundryCredentials struct {

	// The monitoring is enabled (`true`) or disabled (`false`) for given credentials configuration.
	//
	// If not set on creation, the `true` value is used.
	//
	// If the field is omitted during an update, the old value is used.
	Active bool `json:"active,omitempty"`

	// The URL of the Cloud Foundry foundation credentials.
	//
	// The URL must be valid according to RFC 2396.
	//
	// Leading or trailing whitespaces are not allowed.
	APIURL string `json:"apiUrl,omitempty"`

	// The status of the configured endpoint.
	//
	// ASSIGNED: The credentials are assigned to an ActiveGate which is responsible for processing.
	// UNASSIGNED: The credentials are not yet assigned to an ActiveGate so there is currently no processing.
	// DISABLED: The credentials have been disabled by the user.
	// FASTCHECK_AUTH_ERROR: The credentials are invalid.
	// FASTCHECK_TLS_ERROR: The endpoint TLS certificate is invalid.
	// FASTCHECK_NO_RESPONSE: The endpoint did not return a result until the timeout was reached.
	// FASTCHECK_INVALID_ENDPOINT: The endpoint URL was invalid.
	// FASTCHECK_AUTH_LOCKED: The credentials seem to be locked.
	// UNKNOWN: An unknown error occured.
	//
	// Read Only: true
	// Enum: [ASSIGNED DISABLED FASTCHECK_AUTH_ERROR FASTCHECK_AUTH_LOCKED FASTCHECK_INVALID_ENDPOINT FASTCHECK_NO_RESPONSE FASTCHECK_TLS_ERROR UNASSIGNED UNKNOWN]
	EndpointStatus string `json:"endpointStatus,omitempty"`

	// The detailed status info of the configured endpoint.
	// Read Only: true
	EndpointStatusInfo string `json:"endpointStatusInfo,omitempty"`

	// The ID of the given credentials configuration.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The login URL of the Cloud Foundry foundation credentials.
	//
	// The URL must be valid according to RFC 2396.
	//
	// Leading or trailing whitespaces are not allowed.
	LoginURL string `json:"loginUrl,omitempty"`

	// Metadata of the given credentials configuration which is useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// The name of the Cloud Foundry foundation credentials.
	//
	// Allowed characters are letters, numbers, whitespaces, and the following characters: `.+-_`. Leading or trailing whitespace is not allowed.
	// Required: true
	// Min Length: 1
	// Pattern: ^([a-zA-Z0-9_ +-.]*)$
	Name *string `json:"name"`

	// The password of the Cloud Foundry foundation credentials.
	Password string `json:"password,omitempty"`

	// The username of the Cloud Foundry foundation credentials.
	//
	// Leading and trailing whitespaces are not allowed.
	// Required: true
	// Min Length: 1
	Username *string `json:"username"`
}

// Validate validates this cloud foundry credentials
func (m *CloudFoundryCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudFoundryCredentialsTypeEndpointStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASSIGNED","DISABLED","FASTCHECK_AUTH_ERROR","FASTCHECK_AUTH_LOCKED","FASTCHECK_INVALID_ENDPOINT","FASTCHECK_NO_RESPONSE","FASTCHECK_TLS_ERROR","UNASSIGNED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudFoundryCredentialsTypeEndpointStatusPropEnum = append(cloudFoundryCredentialsTypeEndpointStatusPropEnum, v)
	}
}

const (

	// CloudFoundryCredentialsEndpointStatusASSIGNED captures enum value "ASSIGNED"
	CloudFoundryCredentialsEndpointStatusASSIGNED string = "ASSIGNED"

	// CloudFoundryCredentialsEndpointStatusDISABLED captures enum value "DISABLED"
	CloudFoundryCredentialsEndpointStatusDISABLED string = "DISABLED"

	// CloudFoundryCredentialsEndpointStatusFASTCHECKAUTHERROR captures enum value "FASTCHECK_AUTH_ERROR"
	CloudFoundryCredentialsEndpointStatusFASTCHECKAUTHERROR string = "FASTCHECK_AUTH_ERROR"

	// CloudFoundryCredentialsEndpointStatusFASTCHECKAUTHLOCKED captures enum value "FASTCHECK_AUTH_LOCKED"
	CloudFoundryCredentialsEndpointStatusFASTCHECKAUTHLOCKED string = "FASTCHECK_AUTH_LOCKED"

	// CloudFoundryCredentialsEndpointStatusFASTCHECKINVALIDENDPOINT captures enum value "FASTCHECK_INVALID_ENDPOINT"
	CloudFoundryCredentialsEndpointStatusFASTCHECKINVALIDENDPOINT string = "FASTCHECK_INVALID_ENDPOINT"

	// CloudFoundryCredentialsEndpointStatusFASTCHECKNORESPONSE captures enum value "FASTCHECK_NO_RESPONSE"
	CloudFoundryCredentialsEndpointStatusFASTCHECKNORESPONSE string = "FASTCHECK_NO_RESPONSE"

	// CloudFoundryCredentialsEndpointStatusFASTCHECKTLSERROR captures enum value "FASTCHECK_TLS_ERROR"
	CloudFoundryCredentialsEndpointStatusFASTCHECKTLSERROR string = "FASTCHECK_TLS_ERROR"

	// CloudFoundryCredentialsEndpointStatusUNASSIGNED captures enum value "UNASSIGNED"
	CloudFoundryCredentialsEndpointStatusUNASSIGNED string = "UNASSIGNED"

	// CloudFoundryCredentialsEndpointStatusUNKNOWN captures enum value "UNKNOWN"
	CloudFoundryCredentialsEndpointStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *CloudFoundryCredentials) validateEndpointStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudFoundryCredentialsTypeEndpointStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudFoundryCredentials) validateEndpointStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateEndpointStatusEnum("endpointStatus", "body", m.EndpointStatus); err != nil {
		return err
	}

	return nil
}

func (m *CloudFoundryCredentials) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *CloudFoundryCredentials) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^([a-zA-Z0-9_ +-.]*)$`); err != nil {
		return err
	}

	return nil
}

func (m *CloudFoundryCredentials) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", string(*m.Username), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudFoundryCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudFoundryCredentials) UnmarshalBinary(b []byte) error {
	var res CloudFoundryCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
