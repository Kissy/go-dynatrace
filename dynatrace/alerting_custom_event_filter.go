// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertingCustomEventFilter Configuration of a custom event filter.
//
// Filters custom events by title or description. If both specified, the AND logic applies.
// swagger:model AlertingCustomEventFilter
type AlertingCustomEventFilter struct {

	// The filter for the description of the custom event.
	CustomDescriptionFilter *AlertingCustomTextFilter `json:"customDescriptionFilter,omitempty"`

	// The filter for the title of the custom event.
	CustomTitleFilter *AlertingCustomTextFilter `json:"customTitleFilter,omitempty"`
}

// Validate validates this alerting custom event filter
func (m *AlertingCustomEventFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomDescriptionFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomTitleFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingCustomEventFilter) validateCustomDescriptionFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomDescriptionFilter) { // not required
		return nil
	}

	if m.CustomDescriptionFilter != nil {
		if err := m.CustomDescriptionFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customDescriptionFilter")
			}
			return err
		}
	}

	return nil
}

func (m *AlertingCustomEventFilter) validateCustomTitleFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomTitleFilter) { // not required
		return nil
	}

	if m.CustomTitleFilter != nil {
		if err := m.CustomTitleFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customTitleFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertingCustomEventFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertingCustomEventFilter) UnmarshalBinary(b []byte) error {
	var res AlertingCustomEventFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
