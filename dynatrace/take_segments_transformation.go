// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TakeSegmentsTransformation take segments transformation
// swagger:model TakeSegmentsTransformation
type TakeSegmentsTransformation struct {

	// The delimiter for splitting the detected value. The delimiter itself is not kept.
	// Required: true
	Delimiter *string `json:"delimiter"`

	// The number of elements to be kept.
	// Required: true
	// Minimum: 1
	SegmentCount *int32 `json:"segmentCount"`

	// Keeps the first (`false`) or last (`true`) elements.
	//
	//  If not set, then `false` is used, keeping the first elements.
	TakeFromEnd bool `json:"takeFromEnd,omitempty"`
}

// Type gets the type of this subtype
func (m *TakeSegmentsTransformation) Type() string {
	return "TakeSegmentsTransformation"
}

// SetType sets the type of this subtype
func (m *TakeSegmentsTransformation) SetType(val string) {

}

// Delimiter gets the delimiter of this subtype

// SegmentCount gets the segment count of this subtype

// TakeFromEnd gets the take from end of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *TakeSegmentsTransformation) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The delimiter for splitting the detected value. The delimiter itself is not kept.
		// Required: true
		Delimiter *string `json:"delimiter"`

		// The number of elements to be kept.
		// Required: true
		// Minimum: 1
		SegmentCount *int32 `json:"segmentCount"`

		// Keeps the first (`false`) or last (`true`) elements.
		//
		//  If not set, then `false` is used, keeping the first elements.
		TakeFromEnd bool `json:"takeFromEnd,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result TakeSegmentsTransformation

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Delimiter = data.Delimiter

	result.SegmentCount = data.SegmentCount

	result.TakeFromEnd = data.TakeFromEnd

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m TakeSegmentsTransformation) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The delimiter for splitting the detected value. The delimiter itself is not kept.
		// Required: true
		Delimiter *string `json:"delimiter"`

		// The number of elements to be kept.
		// Required: true
		// Minimum: 1
		SegmentCount *int32 `json:"segmentCount"`

		// Keeps the first (`false`) or last (`true`) elements.
		//
		//  If not set, then `false` is used, keeping the first elements.
		TakeFromEnd bool `json:"takeFromEnd,omitempty"`
	}{

		Delimiter: m.Delimiter,

		SegmentCount: m.SegmentCount,

		TakeFromEnd: m.TakeFromEnd,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this take segments transformation
func (m *TakeSegmentsTransformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelimiter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegmentCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TakeSegmentsTransformation) validateDelimiter(formats strfmt.Registry) error {

	if err := validate.Required("delimiter", "body", m.Delimiter); err != nil {
		return err
	}

	return nil
}

func (m *TakeSegmentsTransformation) validateSegmentCount(formats strfmt.Registry) error {

	if err := validate.Required("segmentCount", "body", m.SegmentCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("segmentCount", "body", int64(*m.SegmentCount), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TakeSegmentsTransformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TakeSegmentsTransformation) UnmarshalBinary(b []byte) error {
	var res TakeSegmentsTransformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
