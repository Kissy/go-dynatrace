// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsAuthenticationData A credentials for the AWS authentication.
// swagger:model AwsAuthenticationData
type AwsAuthenticationData struct {

	// The credentials for the key-based authentication.
	//
	//  Only applicable when the **type** parameter is set to `KEYS`.
	KeyBasedAuthentication *KeyBasedAuthentication `json:"keyBasedAuthentication,omitempty"`

	// The credentials for the role-based authentication.
	//
	//  Only applicable when the **type** parameter is set to `ROLE`.
	RoleBasedAuthentication *RoleBasedAuthentication `json:"roleBasedAuthentication,omitempty"`

	// The type of the authentication: role-based or key-based.
	// Required: true
	// Enum: [KEYS ROLE]
	Type *string `json:"type"`
}

// Validate validates this aws authentication data
func (m *AwsAuthenticationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyBasedAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleBasedAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsAuthenticationData) validateKeyBasedAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyBasedAuthentication) { // not required
		return nil
	}

	if m.KeyBasedAuthentication != nil {
		if err := m.KeyBasedAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyBasedAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAuthenticationData) validateRoleBasedAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleBasedAuthentication) { // not required
		return nil
	}

	if m.RoleBasedAuthentication != nil {
		if err := m.RoleBasedAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleBasedAuthentication")
			}
			return err
		}
	}

	return nil
}

var awsAuthenticationDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KEYS","ROLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsAuthenticationDataTypeTypePropEnum = append(awsAuthenticationDataTypeTypePropEnum, v)
	}
}

const (

	// AwsAuthenticationDataTypeKEYS captures enum value "KEYS"
	AwsAuthenticationDataTypeKEYS string = "KEYS"

	// AwsAuthenticationDataTypeROLE captures enum value "ROLE"
	AwsAuthenticationDataTypeROLE string = "ROLE"
)

// prop value enum
func (m *AwsAuthenticationData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, awsAuthenticationDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AwsAuthenticationData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsAuthenticationData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsAuthenticationData) UnmarshalBinary(b []byte) error {
	var res AwsAuthenticationData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
