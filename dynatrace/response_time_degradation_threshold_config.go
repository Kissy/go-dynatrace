// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseTimeDegradationThresholdConfig Fixed thresholds for response time degradation detection.
//
//  Required if **detectionMode** is `DETECT_USING_FIXED_THRESHOLDS`. Not applicable otherwise.
// swagger:model ResponseTimeDegradationThresholdConfig
type ResponseTimeDegradationThresholdConfig struct {

	// Minimal service load to detect response time degradation.
	//
	//  Response time degradation of services with smaller load won't trigger alerts.
	// Required: true
	// Enum: [FIFTEEN_REQUESTS_PER_MINUTE FIVE_REQUESTS_PER_MINUTE ONE_REQUEST_PER_MINUTE TEN_REQUESTS_PER_MINUTE]
	LoadThreshold *string `json:"loadThreshold"`

	// Response time during any 5-minute period to trigger an alert, in milliseconds.
	// Required: true
	// Maximum: 100000
	// Minimum: 0
	ResponseTimeThresholdMilliseconds *int32 `json:"responseTimeThresholdMilliseconds"`

	// Sensitivity of the threshold.
	//
	// With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.
	//
	// With `high` sensitivity, no statistical confidence is used. Each violation triggers an alert.
	// Required: true
	// Enum: [HIGH LOW MEDIUM]
	Sensitivity *string `json:"sensitivity"`

	// Response time of the 10% slowest during any 5-minute period to trigger an alert, in milliseconds.
	// Required: true
	// Maximum: 100000
	// Minimum: 0
	SlowestResponseTimeThresholdMilliseconds *int32 `json:"slowestResponseTimeThresholdMilliseconds"`
}

// Validate validates this response time degradation threshold config
func (m *ResponseTimeDegradationThresholdConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoadThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTimeThresholdMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensitivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlowestResponseTimeThresholdMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var responseTimeDegradationThresholdConfigTypeLoadThresholdPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FIFTEEN_REQUESTS_PER_MINUTE","FIVE_REQUESTS_PER_MINUTE","ONE_REQUEST_PER_MINUTE","TEN_REQUESTS_PER_MINUTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseTimeDegradationThresholdConfigTypeLoadThresholdPropEnum = append(responseTimeDegradationThresholdConfigTypeLoadThresholdPropEnum, v)
	}
}

const (

	// ResponseTimeDegradationThresholdConfigLoadThresholdFIFTEENREQUESTSPERMINUTE captures enum value "FIFTEEN_REQUESTS_PER_MINUTE"
	ResponseTimeDegradationThresholdConfigLoadThresholdFIFTEENREQUESTSPERMINUTE string = "FIFTEEN_REQUESTS_PER_MINUTE"

	// ResponseTimeDegradationThresholdConfigLoadThresholdFIVEREQUESTSPERMINUTE captures enum value "FIVE_REQUESTS_PER_MINUTE"
	ResponseTimeDegradationThresholdConfigLoadThresholdFIVEREQUESTSPERMINUTE string = "FIVE_REQUESTS_PER_MINUTE"

	// ResponseTimeDegradationThresholdConfigLoadThresholdONEREQUESTPERMINUTE captures enum value "ONE_REQUEST_PER_MINUTE"
	ResponseTimeDegradationThresholdConfigLoadThresholdONEREQUESTPERMINUTE string = "ONE_REQUEST_PER_MINUTE"

	// ResponseTimeDegradationThresholdConfigLoadThresholdTENREQUESTSPERMINUTE captures enum value "TEN_REQUESTS_PER_MINUTE"
	ResponseTimeDegradationThresholdConfigLoadThresholdTENREQUESTSPERMINUTE string = "TEN_REQUESTS_PER_MINUTE"
)

// prop value enum
func (m *ResponseTimeDegradationThresholdConfig) validateLoadThresholdEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, responseTimeDegradationThresholdConfigTypeLoadThresholdPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResponseTimeDegradationThresholdConfig) validateLoadThreshold(formats strfmt.Registry) error {

	if err := validate.Required("loadThreshold", "body", m.LoadThreshold); err != nil {
		return err
	}

	// value enum
	if err := m.validateLoadThresholdEnum("loadThreshold", "body", *m.LoadThreshold); err != nil {
		return err
	}

	return nil
}

func (m *ResponseTimeDegradationThresholdConfig) validateResponseTimeThresholdMilliseconds(formats strfmt.Registry) error {

	if err := validate.Required("responseTimeThresholdMilliseconds", "body", m.ResponseTimeThresholdMilliseconds); err != nil {
		return err
	}

	if err := validate.MinimumInt("responseTimeThresholdMilliseconds", "body", int64(*m.ResponseTimeThresholdMilliseconds), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("responseTimeThresholdMilliseconds", "body", int64(*m.ResponseTimeThresholdMilliseconds), 100000, false); err != nil {
		return err
	}

	return nil
}

var responseTimeDegradationThresholdConfigTypeSensitivityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HIGH","LOW","MEDIUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseTimeDegradationThresholdConfigTypeSensitivityPropEnum = append(responseTimeDegradationThresholdConfigTypeSensitivityPropEnum, v)
	}
}

const (

	// ResponseTimeDegradationThresholdConfigSensitivityHIGH captures enum value "HIGH"
	ResponseTimeDegradationThresholdConfigSensitivityHIGH string = "HIGH"

	// ResponseTimeDegradationThresholdConfigSensitivityLOW captures enum value "LOW"
	ResponseTimeDegradationThresholdConfigSensitivityLOW string = "LOW"

	// ResponseTimeDegradationThresholdConfigSensitivityMEDIUM captures enum value "MEDIUM"
	ResponseTimeDegradationThresholdConfigSensitivityMEDIUM string = "MEDIUM"
)

// prop value enum
func (m *ResponseTimeDegradationThresholdConfig) validateSensitivityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, responseTimeDegradationThresholdConfigTypeSensitivityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResponseTimeDegradationThresholdConfig) validateSensitivity(formats strfmt.Registry) error {

	if err := validate.Required("sensitivity", "body", m.Sensitivity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSensitivityEnum("sensitivity", "body", *m.Sensitivity); err != nil {
		return err
	}

	return nil
}

func (m *ResponseTimeDegradationThresholdConfig) validateSlowestResponseTimeThresholdMilliseconds(formats strfmt.Registry) error {

	if err := validate.Required("slowestResponseTimeThresholdMilliseconds", "body", m.SlowestResponseTimeThresholdMilliseconds); err != nil {
		return err
	}

	if err := validate.MinimumInt("slowestResponseTimeThresholdMilliseconds", "body", int64(*m.SlowestResponseTimeThresholdMilliseconds), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("slowestResponseTimeThresholdMilliseconds", "body", int64(*m.SlowestResponseTimeThresholdMilliseconds), 100000, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseTimeDegradationThresholdConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseTimeDegradationThresholdConfig) UnmarshalBinary(b []byte) error {
	var res ResponseTimeDegradationThresholdConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
