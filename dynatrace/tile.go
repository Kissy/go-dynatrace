// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tile Configuration of a tile.
//
// The actual set of fields depends on the type of the tile. See the description of the **tileType** field.
// swagger:discriminator Tile tileType
type Tile interface {
	runtime.Validatable

	// The position and size of the tile.
	// Required: true
	Bounds() *TileBounds
	SetBounds(*TileBounds)

	// The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`).
	Configured() bool
	SetConfigured(bool)

	// The name of the tile.
	// Required: true
	Name() *string
	SetName(*string)

	// A filter, applied to the tile.
	TileFilter() *TileFilter
	SetTileFilter(*TileFilter)

	// Defines the actual set of fields depending on the value:
	//
	// CUSTOM_CHARTING -> CustomChartingTile
	// DTAQL -> UserSessionQueryTile
	// MARKDOWN -> MarkdownTile
	// HOSTS -> FilterableEntityTile
	// APPLICATIONS -> FilterableEntityTile
	// SERVICES -> FilterableEntityTile
	// DATABASES_OVERVIEW -> FilterableEntityTile
	// SYNTHETIC_TESTS -> FilterableEntityTile
	// APPLICATION_WORLDMAP -> AssignedEntitiesWithMetricTile
	// RESOURCES -> AssignedEntitiesWithMetricTile
	// THIRD_PARTY_MOST_ACTIVE -> AssignedEntitiesWithMetricTile
	// UEM_CONVERSIONS_PER_GOAL -> AssignedEntitiesWithMetricTile
	// HOST -> AssignedEntitiesWithMetricTile
	// PROCESS_GROUPS_ONE -> AssignedEntitiesWithMetricTile
	// SYNTHETIC_SINGLE_WEBCHECK -> SyntheticSingleWebcheckTile
	// APPLICATION -> AssignedEntitiesTile
	// VIRTUALIZATION -> AssignedEntitiesTile
	// AWS -> AssignedEntitiesTile
	// SERVICE_VERSATILE -> AssignedEntitiesTile
	// SESSION_METRICS -> AssignedEntitiesTile
	// USERS -> AssignedEntitiesTile
	// UEM_KEY_USER_ACTIONS -> AssignedEntitiesTile
	// BOUNCE_RATE -> AssignedEntitiesTile
	// UEM_CONVERSIONS_OVERALL -> AssignedEntitiesTile
	// UEM_JSERRORS_OVERALL -> AssignedEntitiesTile
	// MOBILE_APPLICATION -> AssignedEntitiesTile
	// SYNTHETIC_SINGLE_EXT_TEST -> AssignedEntitiesTile
	// SYNTHETIC_HTTP_MONITOR -> AssignedEntitiesTile
	// DATABASE -> AssignedEntitiesTile
	// CUSTOM_APPLICATION -> AssignedEntitiesTile
	// APPLICATION_METHOD -> AssignedEntitiesTile
	// LOG_ANALYTICS -> AssignedEntitiesTile
	// OPENSTACK -> AssignedEntitiesTile
	// OPENSTACK_PROJECT -> AssignedEntitiesTile
	// OPENSTACK_AV_ZONE -> AssignedEntitiesTile
	//
	// Required: true
	// Enum: [CUSTOM_CHARTING DTAQL MARKDOWN HOSTS APPLICATIONS SERVICES DATABASES_OVERVIEW SYNTHETIC_TESTS APPLICATION_WORLDMAP RESOURCES THIRD_PARTY_MOST_ACTIVE UEM_CONVERSIONS_PER_GOAL HOST PROCESS_GROUPS_ONE SYNTHETIC_SINGLE_WEBCHECK APPLICATION VIRTUALIZATION AWS SERVICE_VERSATILE SESSION_METRICS USERS UEM_KEY_USER_ACTIONS BOUNCE_RATE UEM_CONVERSIONS_OVERALL UEM_JSERRORS_OVERALL MOBILE_APPLICATION SYNTHETIC_SINGLE_EXT_TEST SYNTHETIC_HTTP_MONITOR DATABASE CUSTOM_APPLICATION APPLICATION_METHOD LOG_ANALYTICS OPENSTACK OPENSTACK_PROJECT OPENSTACK_AV_ZONE]
	TileType() string
	SetTileType(string)
}

type tile struct {
	boundsField *TileBounds

	configuredField bool

	nameField *string

	tileFilterField *TileFilter

	tileTypeField string
}

// Bounds gets the bounds of this polymorphic type
func (m *tile) Bounds() *TileBounds {
	return m.boundsField
}

// SetBounds sets the bounds of this polymorphic type
func (m *tile) SetBounds(val *TileBounds) {
	m.boundsField = val
}

// Configured gets the configured of this polymorphic type
func (m *tile) Configured() bool {
	return m.configuredField
}

// SetConfigured sets the configured of this polymorphic type
func (m *tile) SetConfigured(val bool) {
	m.configuredField = val
}

// Name gets the name of this polymorphic type
func (m *tile) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *tile) SetName(val *string) {
	m.nameField = val
}

// TileFilter gets the tile filter of this polymorphic type
func (m *tile) TileFilter() *TileFilter {
	return m.tileFilterField
}

// SetTileFilter sets the tile filter of this polymorphic type
func (m *tile) SetTileFilter(val *TileFilter) {
	m.tileFilterField = val
}

// TileType gets the tile type of this polymorphic type
func (m *tile) TileType() string {
	return "Tile"
}

// SetTileType sets the tile type of this polymorphic type
func (m *tile) SetTileType(val string) {

}

// UnmarshalTileSlice unmarshals polymorphic slices of Tile
func UnmarshalTileSlice(reader io.Reader, consumer runtime.Consumer) ([]Tile, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Tile
	for _, element := range elements {
		obj, err := unmarshalTile(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalTile unmarshals polymorphic Tile
func UnmarshalTile(reader io.Reader, consumer runtime.Consumer) (Tile, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalTile(data, consumer)
}

func unmarshalTile(data []byte, consumer runtime.Consumer) (Tile, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the tileType property.
	var getType struct {
		TileType string `json:"tileType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("tileType", "body", getType.TileType); err != nil {
		return nil, err
	}

	// The value of tileType is used to determine which type to create and unmarshal the data into
	switch getType.TileType {
	case "AssignedEntitiesTile":
		var result AssignedEntitiesTile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "AssignedEntitiesWithMetricTile":
		var result AssignedEntitiesWithMetricTile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "CustomChartingTile":
		var result CustomChartingTile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "FilterableEntityTile":
		var result FilterableEntityTile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "MarkdownTile":
		var result MarkdownTile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "SyntheticSingleWebcheckTile":
		var result SyntheticSingleWebcheckTile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "Tile":
		var result tile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "UserSessionQueryTile":
		var result UserSessionQueryTile
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid tileType value: %q", getType.TileType)

}

// Validate validates this tile
func (m *tile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBounds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTileFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *tile) validateBounds(formats strfmt.Registry) error {

	if err := validate.Required("bounds", "body", m.Bounds()); err != nil {
		return err
	}

	if m.Bounds() != nil {
		if err := m.Bounds().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bounds")
			}
			return err
		}
	}

	return nil
}

func (m *tile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *tile) validateTileFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.TileFilter()) { // not required
		return nil
	}

	if m.TileFilter() != nil {
		if err := m.TileFilter().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tileFilter")
			}
			return err
		}
	}

	return nil
}

var tileTypeTileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CUSTOM_CHARTING","DTAQL","MARKDOWN","HOSTS","APPLICATIONS","SERVICES","DATABASES_OVERVIEW","SYNTHETIC_TESTS","APPLICATION_WORLDMAP","RESOURCES","THIRD_PARTY_MOST_ACTIVE","UEM_CONVERSIONS_PER_GOAL","HOST","PROCESS_GROUPS_ONE","SYNTHETIC_SINGLE_WEBCHECK","APPLICATION","VIRTUALIZATION","AWS","SERVICE_VERSATILE","SESSION_METRICS","USERS","UEM_KEY_USER_ACTIONS","BOUNCE_RATE","UEM_CONVERSIONS_OVERALL","UEM_JSERRORS_OVERALL","MOBILE_APPLICATION","SYNTHETIC_SINGLE_EXT_TEST","SYNTHETIC_HTTP_MONITOR","DATABASE","CUSTOM_APPLICATION","APPLICATION_METHOD","LOG_ANALYTICS","OPENSTACK","OPENSTACK_PROJECT","OPENSTACK_AV_ZONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tileTypeTileTypePropEnum = append(tileTypeTileTypePropEnum, v)
	}
}

const (

	// TileTileTypeCUSTOMCHARTING captures enum value "CUSTOM_CHARTING"
	TileTileTypeCUSTOMCHARTING string = "CUSTOM_CHARTING"

	// TileTileTypeDTAQL captures enum value "DTAQL"
	TileTileTypeDTAQL string = "DTAQL"

	// TileTileTypeMARKDOWN captures enum value "MARKDOWN"
	TileTileTypeMARKDOWN string = "MARKDOWN"

	// TileTileTypeHOSTS captures enum value "HOSTS"
	TileTileTypeHOSTS string = "HOSTS"

	// TileTileTypeAPPLICATIONS captures enum value "APPLICATIONS"
	TileTileTypeAPPLICATIONS string = "APPLICATIONS"

	// TileTileTypeSERVICES captures enum value "SERVICES"
	TileTileTypeSERVICES string = "SERVICES"

	// TileTileTypeDATABASESOVERVIEW captures enum value "DATABASES_OVERVIEW"
	TileTileTypeDATABASESOVERVIEW string = "DATABASES_OVERVIEW"

	// TileTileTypeSYNTHETICTESTS captures enum value "SYNTHETIC_TESTS"
	TileTileTypeSYNTHETICTESTS string = "SYNTHETIC_TESTS"

	// TileTileTypeAPPLICATIONWORLDMAP captures enum value "APPLICATION_WORLDMAP"
	TileTileTypeAPPLICATIONWORLDMAP string = "APPLICATION_WORLDMAP"

	// TileTileTypeRESOURCES captures enum value "RESOURCES"
	TileTileTypeRESOURCES string = "RESOURCES"

	// TileTileTypeTHIRDPARTYMOSTACTIVE captures enum value "THIRD_PARTY_MOST_ACTIVE"
	TileTileTypeTHIRDPARTYMOSTACTIVE string = "THIRD_PARTY_MOST_ACTIVE"

	// TileTileTypeUEMCONVERSIONSPERGOAL captures enum value "UEM_CONVERSIONS_PER_GOAL"
	TileTileTypeUEMCONVERSIONSPERGOAL string = "UEM_CONVERSIONS_PER_GOAL"

	// TileTileTypeHOST captures enum value "HOST"
	TileTileTypeHOST string = "HOST"

	// TileTileTypePROCESSGROUPSONE captures enum value "PROCESS_GROUPS_ONE"
	TileTileTypePROCESSGROUPSONE string = "PROCESS_GROUPS_ONE"

	// TileTileTypeSYNTHETICSINGLEWEBCHECK captures enum value "SYNTHETIC_SINGLE_WEBCHECK"
	TileTileTypeSYNTHETICSINGLEWEBCHECK string = "SYNTHETIC_SINGLE_WEBCHECK"

	// TileTileTypeAPPLICATION captures enum value "APPLICATION"
	TileTileTypeAPPLICATION string = "APPLICATION"

	// TileTileTypeVIRTUALIZATION captures enum value "VIRTUALIZATION"
	TileTileTypeVIRTUALIZATION string = "VIRTUALIZATION"

	// TileTileTypeAWS captures enum value "AWS"
	TileTileTypeAWS string = "AWS"

	// TileTileTypeSERVICEVERSATILE captures enum value "SERVICE_VERSATILE"
	TileTileTypeSERVICEVERSATILE string = "SERVICE_VERSATILE"

	// TileTileTypeSESSIONMETRICS captures enum value "SESSION_METRICS"
	TileTileTypeSESSIONMETRICS string = "SESSION_METRICS"

	// TileTileTypeUSERS captures enum value "USERS"
	TileTileTypeUSERS string = "USERS"

	// TileTileTypeUEMKEYUSERACTIONS captures enum value "UEM_KEY_USER_ACTIONS"
	TileTileTypeUEMKEYUSERACTIONS string = "UEM_KEY_USER_ACTIONS"

	// TileTileTypeBOUNCERATE captures enum value "BOUNCE_RATE"
	TileTileTypeBOUNCERATE string = "BOUNCE_RATE"

	// TileTileTypeUEMCONVERSIONSOVERALL captures enum value "UEM_CONVERSIONS_OVERALL"
	TileTileTypeUEMCONVERSIONSOVERALL string = "UEM_CONVERSIONS_OVERALL"

	// TileTileTypeUEMJSERRORSOVERALL captures enum value "UEM_JSERRORS_OVERALL"
	TileTileTypeUEMJSERRORSOVERALL string = "UEM_JSERRORS_OVERALL"

	// TileTileTypeMOBILEAPPLICATION captures enum value "MOBILE_APPLICATION"
	TileTileTypeMOBILEAPPLICATION string = "MOBILE_APPLICATION"

	// TileTileTypeSYNTHETICSINGLEEXTTEST captures enum value "SYNTHETIC_SINGLE_EXT_TEST"
	TileTileTypeSYNTHETICSINGLEEXTTEST string = "SYNTHETIC_SINGLE_EXT_TEST"

	// TileTileTypeSYNTHETICHTTPMONITOR captures enum value "SYNTHETIC_HTTP_MONITOR"
	TileTileTypeSYNTHETICHTTPMONITOR string = "SYNTHETIC_HTTP_MONITOR"

	// TileTileTypeDATABASE captures enum value "DATABASE"
	TileTileTypeDATABASE string = "DATABASE"

	// TileTileTypeCUSTOMAPPLICATION captures enum value "CUSTOM_APPLICATION"
	TileTileTypeCUSTOMAPPLICATION string = "CUSTOM_APPLICATION"

	// TileTileTypeAPPLICATIONMETHOD captures enum value "APPLICATION_METHOD"
	TileTileTypeAPPLICATIONMETHOD string = "APPLICATION_METHOD"

	// TileTileTypeLOGANALYTICS captures enum value "LOG_ANALYTICS"
	TileTileTypeLOGANALYTICS string = "LOG_ANALYTICS"

	// TileTileTypeOPENSTACK captures enum value "OPENSTACK"
	TileTileTypeOPENSTACK string = "OPENSTACK"

	// TileTileTypeOPENSTACKPROJECT captures enum value "OPENSTACK_PROJECT"
	TileTileTypeOPENSTACKPROJECT string = "OPENSTACK_PROJECT"

	// TileTileTypeOPENSTACKAVZONE captures enum value "OPENSTACK_AV_ZONE"
	TileTileTypeOPENSTACKAVZONE string = "OPENSTACK_AV_ZONE"
)

// prop value enum
func (m *tile) validateTileTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tileTypeTileTypePropEnum); err != nil {
		return err
	}
	return nil
}
