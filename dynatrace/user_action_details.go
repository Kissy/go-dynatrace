// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserActionDetails Configuration of a user action-based conversion goal.
// swagger:model UserActionDetails
type UserActionDetails struct {

	// Type of the action to which the rule applies.
	// Enum: [Custom Load Xhr]
	ActionType string `json:"actionType,omitempty"`

	// The match is case-sensitive (`true`) or (`false`).
	CaseSensitive bool `json:"caseSensitive,omitempty"`

	// The type of the entity to which the rule applies.
	// Enum: [ActionName CssSelector JavaScriptVariable MetaTag PagePath PageTitle PageUrl UrlAnchor XhrUrl]
	MatchEntity string `json:"matchEntity,omitempty"`

	// The operator of the match.
	// Enum: [Begins Contains Ends]
	MatchType string `json:"matchType,omitempty"`

	// The value to be matched to hit the conversion goal.
	Value string `json:"value,omitempty"`
}

// Validate validates this user action details
func (m *UserActionDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userActionDetailsTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Custom","Load","Xhr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionDetailsTypeActionTypePropEnum = append(userActionDetailsTypeActionTypePropEnum, v)
	}
}

const (

	// UserActionDetailsActionTypeCustom captures enum value "Custom"
	UserActionDetailsActionTypeCustom string = "Custom"

	// UserActionDetailsActionTypeLoad captures enum value "Load"
	UserActionDetailsActionTypeLoad string = "Load"

	// UserActionDetailsActionTypeXhr captures enum value "Xhr"
	UserActionDetailsActionTypeXhr string = "Xhr"
)

// prop value enum
func (m *UserActionDetails) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionDetailsTypeActionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionDetails) validateActionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

var userActionDetailsTypeMatchEntityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActionName","CssSelector","JavaScriptVariable","MetaTag","PagePath","PageTitle","PageUrl","UrlAnchor","XhrUrl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionDetailsTypeMatchEntityPropEnum = append(userActionDetailsTypeMatchEntityPropEnum, v)
	}
}

const (

	// UserActionDetailsMatchEntityActionName captures enum value "ActionName"
	UserActionDetailsMatchEntityActionName string = "ActionName"

	// UserActionDetailsMatchEntityCSSSelector captures enum value "CssSelector"
	UserActionDetailsMatchEntityCSSSelector string = "CssSelector"

	// UserActionDetailsMatchEntityJavaScriptVariable captures enum value "JavaScriptVariable"
	UserActionDetailsMatchEntityJavaScriptVariable string = "JavaScriptVariable"

	// UserActionDetailsMatchEntityMetaTag captures enum value "MetaTag"
	UserActionDetailsMatchEntityMetaTag string = "MetaTag"

	// UserActionDetailsMatchEntityPagePath captures enum value "PagePath"
	UserActionDetailsMatchEntityPagePath string = "PagePath"

	// UserActionDetailsMatchEntityPageTitle captures enum value "PageTitle"
	UserActionDetailsMatchEntityPageTitle string = "PageTitle"

	// UserActionDetailsMatchEntityPageURL captures enum value "PageUrl"
	UserActionDetailsMatchEntityPageURL string = "PageUrl"

	// UserActionDetailsMatchEntityURLAnchor captures enum value "UrlAnchor"
	UserActionDetailsMatchEntityURLAnchor string = "UrlAnchor"

	// UserActionDetailsMatchEntityXhrURL captures enum value "XhrUrl"
	UserActionDetailsMatchEntityXhrURL string = "XhrUrl"
)

// prop value enum
func (m *UserActionDetails) validateMatchEntityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionDetailsTypeMatchEntityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionDetails) validateMatchEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchEntity) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatchEntityEnum("matchEntity", "body", m.MatchEntity); err != nil {
		return err
	}

	return nil
}

var userActionDetailsTypeMatchTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Begins","Contains","Ends"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionDetailsTypeMatchTypePropEnum = append(userActionDetailsTypeMatchTypePropEnum, v)
	}
}

const (

	// UserActionDetailsMatchTypeBegins captures enum value "Begins"
	UserActionDetailsMatchTypeBegins string = "Begins"

	// UserActionDetailsMatchTypeContains captures enum value "Contains"
	UserActionDetailsMatchTypeContains string = "Contains"

	// UserActionDetailsMatchTypeEnds captures enum value "Ends"
	UserActionDetailsMatchTypeEnds string = "Ends"
)

// prop value enum
func (m *UserActionDetails) validateMatchTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionDetailsTypeMatchTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionDetails) validateMatchType(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatchTypeEnum("matchType", "body", m.MatchType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserActionDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserActionDetails) UnmarshalBinary(b []byte) error {
	var res UserActionDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
