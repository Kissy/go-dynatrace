// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaDataCapturing Configuration to capture meta data with the JavaScript agent.
// swagger:model MetaDataCapturing
type MetaDataCapturing struct {

	// The name of the meta data to capture.
	// Required: true
	CapturingName *string `json:"capturingName"`

	// Name for displaying the captured values in Dynatrace.
	// Required: true
	Name *string `json:"name"`

	// The type of the meta data to capture.
	// Required: true
	// Enum: [COOKIE CSS_SELECTOR JAVA_SCRIPT_VARIABLE META_TAG]
	Type *string `json:"type"`

	// The unique id of the meta data to capture.
	// Minimum: 0
	UniqueID *int32 `json:"uniqueId,omitempty"`
}

// Validate validates this meta data capturing
func (m *MetaDataCapturing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapturingName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaDataCapturing) validateCapturingName(formats strfmt.Registry) error {

	if err := validate.Required("capturingName", "body", m.CapturingName); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataCapturing) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var metaDataCapturingTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COOKIE","CSS_SELECTOR","JAVA_SCRIPT_VARIABLE","META_TAG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataCapturingTypeTypePropEnum = append(metaDataCapturingTypeTypePropEnum, v)
	}
}

const (

	// MetaDataCapturingTypeCOOKIE captures enum value "COOKIE"
	MetaDataCapturingTypeCOOKIE string = "COOKIE"

	// MetaDataCapturingTypeCSSSELECTOR captures enum value "CSS_SELECTOR"
	MetaDataCapturingTypeCSSSELECTOR string = "CSS_SELECTOR"

	// MetaDataCapturingTypeJAVASCRIPTVARIABLE captures enum value "JAVA_SCRIPT_VARIABLE"
	MetaDataCapturingTypeJAVASCRIPTVARIABLE string = "JAVA_SCRIPT_VARIABLE"

	// MetaDataCapturingTypeMETATAG captures enum value "META_TAG"
	MetaDataCapturingTypeMETATAG string = "META_TAG"
)

// prop value enum
func (m *MetaDataCapturing) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataCapturingTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataCapturing) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataCapturing) validateUniqueID(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueID) { // not required
		return nil
	}

	if err := validate.MinimumInt("uniqueId", "body", int64(*m.UniqueID), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetaDataCapturing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaDataCapturing) UnmarshalBinary(b []byte) error {
	var res MetaDataCapturing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
