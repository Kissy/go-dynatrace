// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsCredentialsConfig Configuration of an AWS credentials.
// swagger:model AwsCredentialsConfig
type AwsCredentialsConfig struct {

	// The type of the AWS authentication and the respective credentials.
	// Required: true
	AuthenticationData *AwsAuthenticationData `json:"authenticationData"`

	// The status of the connection to the AWS environment.
	//
	//  * `CONNECTED`: There was a connection within last 10 minutes.
	// * `DISCONNECTED`: A problem occurred with establishing connection using these credentials. Check whether the data is correct.
	// * `UNINITIALIZED`: The successful connection has never been established for these credentials.
	// Read Only: true
	// Enum: [CONNECTED DISCONNECTED UNINITIALIZED]
	ConnectionStatus string `json:"connectionStatus,omitempty"`

	// The unique ID of the credentials.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the credentials.
	// Required: true
	// Min Length: 1
	Label *string `json:"label"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// The type of the AWS partition.
	// Required: true
	// Enum: [AWS_CN AWS_DEFAULT AWS_US_GOV]
	PartitionType *string `json:"partitionType"`

	// A list of supporting services to be monitored.
	SupportingServicesToMonitor []*AwsSupportingServiceConfig `json:"supportingServicesToMonitor"`

	// Monitor only resources which have specified AWS tags (`true`) or all resources (`false`).
	// Required: true
	TaggedOnly *bool `json:"taggedOnly"`

	// A list of AWS tags to be monitored.
	//
	// You can specify up to 10 tags.
	//
	// Only applicable when the **taggedOnly** parameter is set to `true`.
	// Required: true
	// Max Items: 10
	// Min Items: 0
	TagsToMonitor []*AwsConfigTag `json:"tagsToMonitor"`
}

// Validate validates this aws credentials config
func (m *AwsCredentialsConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportingServicesToMonitor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaggedOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagsToMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsCredentialsConfig) validateAuthenticationData(formats strfmt.Registry) error {

	if err := validate.Required("authenticationData", "body", m.AuthenticationData); err != nil {
		return err
	}

	if m.AuthenticationData != nil {
		if err := m.AuthenticationData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticationData")
			}
			return err
		}
	}

	return nil
}

var awsCredentialsConfigTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTED","DISCONNECTED","UNINITIALIZED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsCredentialsConfigTypeConnectionStatusPropEnum = append(awsCredentialsConfigTypeConnectionStatusPropEnum, v)
	}
}

const (

	// AwsCredentialsConfigConnectionStatusCONNECTED captures enum value "CONNECTED"
	AwsCredentialsConfigConnectionStatusCONNECTED string = "CONNECTED"

	// AwsCredentialsConfigConnectionStatusDISCONNECTED captures enum value "DISCONNECTED"
	AwsCredentialsConfigConnectionStatusDISCONNECTED string = "DISCONNECTED"

	// AwsCredentialsConfigConnectionStatusUNINITIALIZED captures enum value "UNINITIALIZED"
	AwsCredentialsConfigConnectionStatusUNINITIALIZED string = "UNINITIALIZED"
)

// prop value enum
func (m *AwsCredentialsConfig) validateConnectionStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, awsCredentialsConfigTypeConnectionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AwsCredentialsConfig) validateConnectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionStatusEnum("connectionStatus", "body", m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

func (m *AwsCredentialsConfig) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	if err := validate.MinLength("label", "body", string(*m.Label), 1); err != nil {
		return err
	}

	return nil
}

func (m *AwsCredentialsConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

var awsCredentialsConfigTypePartitionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS_CN","AWS_DEFAULT","AWS_US_GOV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsCredentialsConfigTypePartitionTypePropEnum = append(awsCredentialsConfigTypePartitionTypePropEnum, v)
	}
}

const (

	// AwsCredentialsConfigPartitionTypeAWSCN captures enum value "AWS_CN"
	AwsCredentialsConfigPartitionTypeAWSCN string = "AWS_CN"

	// AwsCredentialsConfigPartitionTypeAWSDEFAULT captures enum value "AWS_DEFAULT"
	AwsCredentialsConfigPartitionTypeAWSDEFAULT string = "AWS_DEFAULT"

	// AwsCredentialsConfigPartitionTypeAWSUSGOV captures enum value "AWS_US_GOV"
	AwsCredentialsConfigPartitionTypeAWSUSGOV string = "AWS_US_GOV"
)

// prop value enum
func (m *AwsCredentialsConfig) validatePartitionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, awsCredentialsConfigTypePartitionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AwsCredentialsConfig) validatePartitionType(formats strfmt.Registry) error {

	if err := validate.Required("partitionType", "body", m.PartitionType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePartitionTypeEnum("partitionType", "body", *m.PartitionType); err != nil {
		return err
	}

	return nil
}

func (m *AwsCredentialsConfig) validateSupportingServicesToMonitor(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportingServicesToMonitor) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportingServicesToMonitor); i++ {
		if swag.IsZero(m.SupportingServicesToMonitor[i]) { // not required
			continue
		}

		if m.SupportingServicesToMonitor[i] != nil {
			if err := m.SupportingServicesToMonitor[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportingServicesToMonitor" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AwsCredentialsConfig) validateTaggedOnly(formats strfmt.Registry) error {

	if err := validate.Required("taggedOnly", "body", m.TaggedOnly); err != nil {
		return err
	}

	return nil
}

func (m *AwsCredentialsConfig) validateTagsToMonitor(formats strfmt.Registry) error {

	if err := validate.Required("tagsToMonitor", "body", m.TagsToMonitor); err != nil {
		return err
	}

	iTagsToMonitorSize := int64(len(m.TagsToMonitor))

	if err := validate.MinItems("tagsToMonitor", "body", iTagsToMonitorSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("tagsToMonitor", "body", iTagsToMonitorSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.TagsToMonitor); i++ {
		if swag.IsZero(m.TagsToMonitor[i]) { // not required
			continue
		}

		if m.TagsToMonitor[i] != nil {
			if err := m.TagsToMonitor[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsToMonitor" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsCredentialsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsCredentialsConfig) UnmarshalBinary(b []byte) error {
	var res AwsCredentialsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
