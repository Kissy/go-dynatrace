// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostsAnomalyDetectionConfig Configuration of anomaly detection for hosts.
// swagger:model HostsAnomalyDetectionConfig
type HostsAnomalyDetectionConfig struct {

	// How to detect lost connection.
	// Required: true
	ConnectionLostDetection *ConnectionLostDetectionConfig `json:"connectionLostDetection"`

	// How to detect low disk inodes number.
	// Required: true
	DiskLowInodesDetection *DiskLowInodesDetectionConfig `json:"diskLowInodesDetection"`

	// How to detect low disk space.
	// Required: true
	DiskLowSpaceDetection *DiskLowSpaceDetectionConfig `json:"diskLowSpaceDetection"`

	// How to detect slow running disks.
	// Required: true
	DiskSlowWritesAndReadsDetection *DiskSlowWritesAndReadsDetectionConfig `json:"diskSlowWritesAndReadsDetection"`

	// How to detect high CPU saturation.
	// Required: true
	HighCPUSaturationDetection *HighCPUSaturationDetectionConfig `json:"highCpuSaturationDetection"`

	// How to detect high Garbage Collector activity.
	// Required: true
	HighGcActivityDetection *HighGcActivityDetectionConfig `json:"highGcActivityDetection"`

	// How to detect high memory usage.
	// Required: true
	HighMemoryDetection *HighMemoryDetectionConfig `json:"highMemoryDetection"`

	// How to detect high network utilization.
	// Required: true
	HighNetworkDetection *HighNetworkDetectionConfig `json:"highNetworkDetection"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// How to detect high number of dropped packets.
	// Required: true
	NetworkDroppedPacketsDetection *NetworkDroppedPacketsDetectionConfig `json:"networkDroppedPacketsDetection"`

	// How to detect high number of network errors.
	// Required: true
	NetworkErrorsDetection *NetworkErrorsDetectionConfig `json:"networkErrorsDetection"`

	// How to detect high retransmission rate.
	// Required: true
	NetworkHighRetransmissionDetection *NetworkHighRetransmissionDetectionConfig `json:"networkHighRetransmissionDetection"`

	// How to detect TCP connectivity problems.
	// Required: true
	NetworkTCPProblemsDetection *NetworkTCPProblemsDetectionConfig `json:"networkTcpProblemsDetection"`

	// How to detect Java out of memory problems.
	// Required: true
	OutOfMemoryDetection *OutOfMemoryDetectionConfig `json:"outOfMemoryDetection"`

	// How to detect Java out of threads problems.
	// Required: true
	OutOfThreadsDetection *OutOfThreadsDetectionConfig `json:"outOfThreadsDetection"`
}

// Validate validates this hosts anomaly detection config
func (m *HostsAnomalyDetectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionLostDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskLowInodesDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskLowSpaceDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSlowWritesAndReadsDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighCPUSaturationDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighGcActivityDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighMemoryDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighNetworkDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkDroppedPacketsDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkErrorsDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkHighRetransmissionDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkTCPProblemsDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutOfMemoryDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutOfThreadsDetection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostsAnomalyDetectionConfig) validateConnectionLostDetection(formats strfmt.Registry) error {

	if err := validate.Required("connectionLostDetection", "body", m.ConnectionLostDetection); err != nil {
		return err
	}

	if m.ConnectionLostDetection != nil {
		if err := m.ConnectionLostDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionLostDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateDiskLowInodesDetection(formats strfmt.Registry) error {

	if err := validate.Required("diskLowInodesDetection", "body", m.DiskLowInodesDetection); err != nil {
		return err
	}

	if m.DiskLowInodesDetection != nil {
		if err := m.DiskLowInodesDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskLowInodesDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateDiskLowSpaceDetection(formats strfmt.Registry) error {

	if err := validate.Required("diskLowSpaceDetection", "body", m.DiskLowSpaceDetection); err != nil {
		return err
	}

	if m.DiskLowSpaceDetection != nil {
		if err := m.DiskLowSpaceDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskLowSpaceDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateDiskSlowWritesAndReadsDetection(formats strfmt.Registry) error {

	if err := validate.Required("diskSlowWritesAndReadsDetection", "body", m.DiskSlowWritesAndReadsDetection); err != nil {
		return err
	}

	if m.DiskSlowWritesAndReadsDetection != nil {
		if err := m.DiskSlowWritesAndReadsDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskSlowWritesAndReadsDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateHighCPUSaturationDetection(formats strfmt.Registry) error {

	if err := validate.Required("highCpuSaturationDetection", "body", m.HighCPUSaturationDetection); err != nil {
		return err
	}

	if m.HighCPUSaturationDetection != nil {
		if err := m.HighCPUSaturationDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highCpuSaturationDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateHighGcActivityDetection(formats strfmt.Registry) error {

	if err := validate.Required("highGcActivityDetection", "body", m.HighGcActivityDetection); err != nil {
		return err
	}

	if m.HighGcActivityDetection != nil {
		if err := m.HighGcActivityDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highGcActivityDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateHighMemoryDetection(formats strfmt.Registry) error {

	if err := validate.Required("highMemoryDetection", "body", m.HighMemoryDetection); err != nil {
		return err
	}

	if m.HighMemoryDetection != nil {
		if err := m.HighMemoryDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highMemoryDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateHighNetworkDetection(formats strfmt.Registry) error {

	if err := validate.Required("highNetworkDetection", "body", m.HighNetworkDetection); err != nil {
		return err
	}

	if m.HighNetworkDetection != nil {
		if err := m.HighNetworkDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highNetworkDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateNetworkDroppedPacketsDetection(formats strfmt.Registry) error {

	if err := validate.Required("networkDroppedPacketsDetection", "body", m.NetworkDroppedPacketsDetection); err != nil {
		return err
	}

	if m.NetworkDroppedPacketsDetection != nil {
		if err := m.NetworkDroppedPacketsDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkDroppedPacketsDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateNetworkErrorsDetection(formats strfmt.Registry) error {

	if err := validate.Required("networkErrorsDetection", "body", m.NetworkErrorsDetection); err != nil {
		return err
	}

	if m.NetworkErrorsDetection != nil {
		if err := m.NetworkErrorsDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkErrorsDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateNetworkHighRetransmissionDetection(formats strfmt.Registry) error {

	if err := validate.Required("networkHighRetransmissionDetection", "body", m.NetworkHighRetransmissionDetection); err != nil {
		return err
	}

	if m.NetworkHighRetransmissionDetection != nil {
		if err := m.NetworkHighRetransmissionDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkHighRetransmissionDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateNetworkTCPProblemsDetection(formats strfmt.Registry) error {

	if err := validate.Required("networkTcpProblemsDetection", "body", m.NetworkTCPProblemsDetection); err != nil {
		return err
	}

	if m.NetworkTCPProblemsDetection != nil {
		if err := m.NetworkTCPProblemsDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkTcpProblemsDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateOutOfMemoryDetection(formats strfmt.Registry) error {

	if err := validate.Required("outOfMemoryDetection", "body", m.OutOfMemoryDetection); err != nil {
		return err
	}

	if m.OutOfMemoryDetection != nil {
		if err := m.OutOfMemoryDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outOfMemoryDetection")
			}
			return err
		}
	}

	return nil
}

func (m *HostsAnomalyDetectionConfig) validateOutOfThreadsDetection(formats strfmt.Registry) error {

	if err := validate.Required("outOfThreadsDetection", "body", m.OutOfThreadsDetection); err != nil {
		return err
	}

	if m.OutOfThreadsDetection != nil {
		if err := m.OutOfThreadsDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outOfThreadsDetection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostsAnomalyDetectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostsAnomalyDetectionConfig) UnmarshalBinary(b []byte) error {
	var res HostsAnomalyDetectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
