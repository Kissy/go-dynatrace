// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleBasedAuthentication The credentials for the role-based authentication.
// swagger:model RoleBasedAuthentication
type RoleBasedAuthentication struct {

	// The ID of the Amazon account.
	// Required: true
	// Min Length: 1
	AccountID *string `json:"accountId"`

	// The external ID token for setting an IAM role.
	//
	//  You can obtain it with the `GET /aws/iamExternalId` request.
	// Read Only: true
	ExternalID string `json:"externalId,omitempty"`

	// The IAM role to be used by Dynatrace to get monitoring data.
	// Required: true
	// Min Length: 1
	IamRole *string `json:"iamRole"`
}

// Validate validates this role based authentication
func (m *RoleBasedAuthentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleBasedAuthentication) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.MinLength("accountId", "body", string(*m.AccountID), 1); err != nil {
		return err
	}

	return nil
}

func (m *RoleBasedAuthentication) validateIamRole(formats strfmt.Registry) error {

	if err := validate.Required("iamRole", "body", m.IamRole); err != nil {
		return err
	}

	if err := validate.MinLength("iamRole", "body", string(*m.IamRole), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleBasedAuthentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleBasedAuthentication) UnmarshalBinary(b []byte) error {
	var res RoleBasedAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
