// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WaterfallSettings These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources.
// swagger:model WaterfallSettings
type WaterfallSettings struct {

	// Warn about resources with a lower browser cache rate above *X*%.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	ResourceBrowserCachingThreshold *int32 `json:"resourceBrowserCachingThreshold"`

	// Warn about resources larger than *X* bytes.
	// Required: true
	// Maximum: 9.9999e+07
	// Minimum: 0
	ResourcesThreshold *int32 `json:"resourcesThreshold"`

	// Warn about slow CDN resources with a response time above *X* ms.
	// Required: true
	// Maximum: 9.9999e+07
	// Minimum: 0
	SlowCdnResourcesThreshold *int32 `json:"slowCdnResourcesThreshold"`

	// Warn about slow 1st party resources with a response time above *X* ms.
	// Required: true
	// Maximum: 9.9999e+07
	// Minimum: 0
	SlowFirstPartyResourcesThreshold *int32 `json:"slowFirstPartyResourcesThreshold"`

	// Warn about slow 3rd party resources with a response time above *X* ms.
	// Required: true
	// Maximum: 9.9999e+07
	// Minimum: 0
	SlowThirdPartyResourcesThreshold *int32 `json:"slowThirdPartyResourcesThreshold"`

	// Warn if Speed index exceeds *X* % of Visually complete.
	// Required: true
	// Maximum: 99
	// Minimum: 1
	SpeedIndexVisuallyCompleteRatioThreshold *int32 `json:"speedIndexVisuallyCompleteRatioThreshold"`

	// Warn about uncompressed resources larger than *X* bytes.
	// Required: true
	// Maximum: 99999
	// Minimum: 0
	UncompressedResourcesThreshold *int32 `json:"uncompressedResourcesThreshold"`
}

// Validate validates this waterfall settings
func (m *WaterfallSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceBrowserCachingThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcesThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlowCdnResourcesThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlowFirstPartyResourcesThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlowThirdPartyResourcesThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedIndexVisuallyCompleteRatioThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUncompressedResourcesThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WaterfallSettings) validateResourceBrowserCachingThreshold(formats strfmt.Registry) error {

	if err := validate.Required("resourceBrowserCachingThreshold", "body", m.ResourceBrowserCachingThreshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("resourceBrowserCachingThreshold", "body", int64(*m.ResourceBrowserCachingThreshold), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("resourceBrowserCachingThreshold", "body", int64(*m.ResourceBrowserCachingThreshold), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *WaterfallSettings) validateResourcesThreshold(formats strfmt.Registry) error {

	if err := validate.Required("resourcesThreshold", "body", m.ResourcesThreshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("resourcesThreshold", "body", int64(*m.ResourcesThreshold), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("resourcesThreshold", "body", int64(*m.ResourcesThreshold), 9.9999e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *WaterfallSettings) validateSlowCdnResourcesThreshold(formats strfmt.Registry) error {

	if err := validate.Required("slowCdnResourcesThreshold", "body", m.SlowCdnResourcesThreshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("slowCdnResourcesThreshold", "body", int64(*m.SlowCdnResourcesThreshold), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("slowCdnResourcesThreshold", "body", int64(*m.SlowCdnResourcesThreshold), 9.9999e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *WaterfallSettings) validateSlowFirstPartyResourcesThreshold(formats strfmt.Registry) error {

	if err := validate.Required("slowFirstPartyResourcesThreshold", "body", m.SlowFirstPartyResourcesThreshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("slowFirstPartyResourcesThreshold", "body", int64(*m.SlowFirstPartyResourcesThreshold), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("slowFirstPartyResourcesThreshold", "body", int64(*m.SlowFirstPartyResourcesThreshold), 9.9999e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *WaterfallSettings) validateSlowThirdPartyResourcesThreshold(formats strfmt.Registry) error {

	if err := validate.Required("slowThirdPartyResourcesThreshold", "body", m.SlowThirdPartyResourcesThreshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("slowThirdPartyResourcesThreshold", "body", int64(*m.SlowThirdPartyResourcesThreshold), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("slowThirdPartyResourcesThreshold", "body", int64(*m.SlowThirdPartyResourcesThreshold), 9.9999e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *WaterfallSettings) validateSpeedIndexVisuallyCompleteRatioThreshold(formats strfmt.Registry) error {

	if err := validate.Required("speedIndexVisuallyCompleteRatioThreshold", "body", m.SpeedIndexVisuallyCompleteRatioThreshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("speedIndexVisuallyCompleteRatioThreshold", "body", int64(*m.SpeedIndexVisuallyCompleteRatioThreshold), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("speedIndexVisuallyCompleteRatioThreshold", "body", int64(*m.SpeedIndexVisuallyCompleteRatioThreshold), 99, false); err != nil {
		return err
	}

	return nil
}

func (m *WaterfallSettings) validateUncompressedResourcesThreshold(formats strfmt.Registry) error {

	if err := validate.Required("uncompressedResourcesThreshold", "body", m.UncompressedResourcesThreshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("uncompressedResourcesThreshold", "body", int64(*m.UncompressedResourcesThreshold), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("uncompressedResourcesThreshold", "body", int64(*m.UncompressedResourcesThreshold), 99999, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WaterfallSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WaterfallSettings) UnmarshalBinary(b []byte) error {
	var res WaterfallSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
