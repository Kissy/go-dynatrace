// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SlowPhysicalStorageThresholds Custom thresholds for slow running physical storage device. If not set then the automatic mode is used.
//
//  Fulfillment of **any** condition triggers an alert.
// swagger:model SlowPhysicalStorageThresholds
type SlowPhysicalStorageThresholds struct {

	// Read/write latency is higher than *X* milliseconds in 4 out of 5 samples.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	AvgReadWriteLatency *int32 `json:"avgReadWriteLatency"`

	// Peak value for read/write latency is higher than *X* milliseconds in 4 out of 5 samples.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	PeakReadWriteLatency *int32 `json:"peakReadWriteLatency"`
}

// Validate validates this slow physical storage thresholds
func (m *SlowPhysicalStorageThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvgReadWriteLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeakReadWriteLatency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SlowPhysicalStorageThresholds) validateAvgReadWriteLatency(formats strfmt.Registry) error {

	if err := validate.Required("avgReadWriteLatency", "body", m.AvgReadWriteLatency); err != nil {
		return err
	}

	if err := validate.MinimumInt("avgReadWriteLatency", "body", int64(*m.AvgReadWriteLatency), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("avgReadWriteLatency", "body", int64(*m.AvgReadWriteLatency), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *SlowPhysicalStorageThresholds) validatePeakReadWriteLatency(formats strfmt.Registry) error {

	if err := validate.Required("peakReadWriteLatency", "body", m.PeakReadWriteLatency); err != nil {
		return err
	}

	if err := validate.MinimumInt("peakReadWriteLatency", "body", int64(*m.PeakReadWriteLatency), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("peakReadWriteLatency", "body", int64(*m.PeakReadWriteLatency), 10000, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SlowPhysicalStorageThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SlowPhysicalStorageThresholds) UnmarshalBinary(b []byte) error {
	var res SlowPhysicalStorageThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
