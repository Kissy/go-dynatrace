// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PagerDutyNotificationConfig pager duty notification config
// swagger:model PagerDutyNotificationConfig
type PagerDutyNotificationConfig struct {
	activeField *bool

	alertingProfileField *strfmt.UUID

	idField strfmt.UUID

	nameField *string

	// The name of the PagerDuty account.
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	Account *string `json:"account"`

	// The API key to access PagerDuty.
	// Max Length: 1000
	// Min Length: 1
	ServiceAPIKey string `json:"serviceApiKey,omitempty"`

	// The name of the service.
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	ServiceName *string `json:"serviceName"`
}

// Active gets the active of this subtype
func (m *PagerDutyNotificationConfig) Active() *bool {
	return m.activeField
}

// SetActive sets the active of this subtype
func (m *PagerDutyNotificationConfig) SetActive(val *bool) {
	m.activeField = val
}

// AlertingProfile gets the alerting profile of this subtype
func (m *PagerDutyNotificationConfig) AlertingProfile() *strfmt.UUID {
	return m.alertingProfileField
}

// SetAlertingProfile sets the alerting profile of this subtype
func (m *PagerDutyNotificationConfig) SetAlertingProfile(val *strfmt.UUID) {
	m.alertingProfileField = val
}

// ID gets the id of this subtype
func (m *PagerDutyNotificationConfig) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *PagerDutyNotificationConfig) SetID(val strfmt.UUID) {
	m.idField = val
}

// Name gets the name of this subtype
func (m *PagerDutyNotificationConfig) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *PagerDutyNotificationConfig) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this subtype
func (m *PagerDutyNotificationConfig) Type() string {
	return "PagerDutyNotificationConfig"
}

// SetType sets the type of this subtype
func (m *PagerDutyNotificationConfig) SetType(val string) {

}

// Account gets the account of this subtype

// ServiceAPIKey gets the service Api key of this subtype

// ServiceName gets the service name of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *PagerDutyNotificationConfig) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The name of the PagerDuty account.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		Account *string `json:"account"`

		// The API key to access PagerDuty.
		// Max Length: 1000
		// Min Length: 1
		ServiceAPIKey string `json:"serviceApiKey,omitempty"`

		// The name of the service.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		ServiceName *string `json:"serviceName"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Active *bool `json:"active"`

		AlertingProfile *strfmt.UUID `json:"alertingProfile"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result PagerDutyNotificationConfig

	result.activeField = base.Active

	result.alertingProfileField = base.AlertingProfile

	result.idField = base.ID

	result.nameField = base.Name

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Account = data.Account

	result.ServiceAPIKey = data.ServiceAPIKey

	result.ServiceName = data.ServiceName

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m PagerDutyNotificationConfig) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The name of the PagerDuty account.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		Account *string `json:"account"`

		// The API key to access PagerDuty.
		// Max Length: 1000
		// Min Length: 1
		ServiceAPIKey string `json:"serviceApiKey,omitempty"`

		// The name of the service.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		ServiceName *string `json:"serviceName"`
	}{

		Account: m.Account,

		ServiceAPIKey: m.ServiceAPIKey,

		ServiceName: m.ServiceName,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Active *bool `json:"active"`

		AlertingProfile *strfmt.UUID `json:"alertingProfile"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}{

		Active: m.Active(),

		AlertingProfile: m.AlertingProfile(),

		ID: m.ID(),

		Name: m.Name(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this pager duty notification config
func (m *PagerDutyNotificationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertingProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PagerDutyNotificationConfig) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active()); err != nil {
		return err
	}

	return nil
}

func (m *PagerDutyNotificationConfig) validateAlertingProfile(formats strfmt.Registry) error {

	if err := validate.Required("alertingProfile", "body", m.AlertingProfile()); err != nil {
		return err
	}

	if err := validate.FormatOf("alertingProfile", "body", "uuid", m.AlertingProfile().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PagerDutyNotificationConfig) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PagerDutyNotificationConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name()), 100); err != nil {
		return err
	}

	return nil
}

func (m *PagerDutyNotificationConfig) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 1000); err != nil {
		return err
	}

	return nil
}

func (m *PagerDutyNotificationConfig) validateServiceAPIKey(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceAPIKey) { // not required
		return nil
	}

	if err := validate.MinLength("serviceApiKey", "body", string(m.ServiceAPIKey), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("serviceApiKey", "body", string(m.ServiceAPIKey), 1000); err != nil {
		return err
	}

	return nil
}

func (m *PagerDutyNotificationConfig) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	if err := validate.MinLength("serviceName", "body", string(*m.ServiceName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("serviceName", "body", string(*m.ServiceName), 1000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PagerDutyNotificationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PagerDutyNotificationConfig) UnmarshalBinary(b []byte) error {
	var res PagerDutyNotificationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
