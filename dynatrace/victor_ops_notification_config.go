// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VictorOpsNotificationConfig victor ops notification config
// swagger:model VictorOpsNotificationConfig
type VictorOpsNotificationConfig struct {
	activeField *bool

	alertingProfileField *strfmt.UUID

	idField strfmt.UUID

	nameField *string

	// The API key for the target VictorOps account.
	// Max Length: 1000
	// Min Length: 1
	APIKey string `json:"apiKey,omitempty"`

	// The content of the message.
	//
	//  You can use the following placeholders:
	// * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.
	// * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.
	// * `{ProblemID}`: The display number of the reported problem.
	// * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.
	// * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.
	// * `{ProblemTitle}`: A short description of the problem.
	// * `{ProblemURL}`: The URL of the problem within Dynatrace.
	// * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`. If the problem has been merged into another problem, it has the `MERGED` value.
	//
	// Required: true
	// Min Length: 1
	Message *string `json:"message"`

	// The routing key, defining the group to be notified.
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	RoutingKey *string `json:"routingKey"`
}

// Active gets the active of this subtype
func (m *VictorOpsNotificationConfig) Active() *bool {
	return m.activeField
}

// SetActive sets the active of this subtype
func (m *VictorOpsNotificationConfig) SetActive(val *bool) {
	m.activeField = val
}

// AlertingProfile gets the alerting profile of this subtype
func (m *VictorOpsNotificationConfig) AlertingProfile() *strfmt.UUID {
	return m.alertingProfileField
}

// SetAlertingProfile sets the alerting profile of this subtype
func (m *VictorOpsNotificationConfig) SetAlertingProfile(val *strfmt.UUID) {
	m.alertingProfileField = val
}

// ID gets the id of this subtype
func (m *VictorOpsNotificationConfig) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *VictorOpsNotificationConfig) SetID(val strfmt.UUID) {
	m.idField = val
}

// Name gets the name of this subtype
func (m *VictorOpsNotificationConfig) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *VictorOpsNotificationConfig) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this subtype
func (m *VictorOpsNotificationConfig) Type() string {
	return "VictorOpsNotificationConfig"
}

// SetType sets the type of this subtype
func (m *VictorOpsNotificationConfig) SetType(val string) {

}

// APIKey gets the api key of this subtype

// Message gets the message of this subtype

// RoutingKey gets the routing key of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *VictorOpsNotificationConfig) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The API key for the target VictorOps account.
		// Max Length: 1000
		// Min Length: 1
		APIKey string `json:"apiKey,omitempty"`

		// The content of the message.
		//
		//  You can use the following placeholders:
		// * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.
		// * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.
		// * `{ProblemID}`: The display number of the reported problem.
		// * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.
		// * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.
		// * `{ProblemTitle}`: A short description of the problem.
		// * `{ProblemURL}`: The URL of the problem within Dynatrace.
		// * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`. If the problem has been merged into another problem, it has the `MERGED` value.
		//
		// Required: true
		// Min Length: 1
		Message *string `json:"message"`

		// The routing key, defining the group to be notified.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		RoutingKey *string `json:"routingKey"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Active *bool `json:"active"`

		AlertingProfile *strfmt.UUID `json:"alertingProfile"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result VictorOpsNotificationConfig

	result.activeField = base.Active

	result.alertingProfileField = base.AlertingProfile

	result.idField = base.ID

	result.nameField = base.Name

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.APIKey = data.APIKey

	result.Message = data.Message

	result.RoutingKey = data.RoutingKey

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m VictorOpsNotificationConfig) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The API key for the target VictorOps account.
		// Max Length: 1000
		// Min Length: 1
		APIKey string `json:"apiKey,omitempty"`

		// The content of the message.
		//
		//  You can use the following placeholders:
		// * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.
		// * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.
		// * `{ProblemID}`: The display number of the reported problem.
		// * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.
		// * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.
		// * `{ProblemTitle}`: A short description of the problem.
		// * `{ProblemURL}`: The URL of the problem within Dynatrace.
		// * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`. If the problem has been merged into another problem, it has the `MERGED` value.
		//
		// Required: true
		// Min Length: 1
		Message *string `json:"message"`

		// The routing key, defining the group to be notified.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		RoutingKey *string `json:"routingKey"`
	}{

		APIKey: m.APIKey,

		Message: m.Message,

		RoutingKey: m.RoutingKey,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Active *bool `json:"active"`

		AlertingProfile *strfmt.UUID `json:"alertingProfile"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}{

		Active: m.Active(),

		AlertingProfile: m.AlertingProfile(),

		ID: m.ID(),

		Name: m.Name(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this victor ops notification config
func (m *VictorOpsNotificationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertingProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VictorOpsNotificationConfig) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active()); err != nil {
		return err
	}

	return nil
}

func (m *VictorOpsNotificationConfig) validateAlertingProfile(formats strfmt.Registry) error {

	if err := validate.Required("alertingProfile", "body", m.AlertingProfile()); err != nil {
		return err
	}

	if err := validate.FormatOf("alertingProfile", "body", "uuid", m.AlertingProfile().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VictorOpsNotificationConfig) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VictorOpsNotificationConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name()), 100); err != nil {
		return err
	}

	return nil
}

func (m *VictorOpsNotificationConfig) validateAPIKey(formats strfmt.Registry) error {

	if swag.IsZero(m.APIKey) { // not required
		return nil
	}

	if err := validate.MinLength("apiKey", "body", string(m.APIKey), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("apiKey", "body", string(m.APIKey), 1000); err != nil {
		return err
	}

	return nil
}

func (m *VictorOpsNotificationConfig) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("message", "body", string(*m.Message), 1); err != nil {
		return err
	}

	return nil
}

func (m *VictorOpsNotificationConfig) validateRoutingKey(formats strfmt.Registry) error {

	if err := validate.Required("routingKey", "body", m.RoutingKey); err != nil {
		return err
	}

	if err := validate.MinLength("routingKey", "body", string(*m.RoutingKey), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("routingKey", "body", string(*m.RoutingKey), 1000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VictorOpsNotificationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VictorOpsNotificationConfig) UnmarshalBinary(b []byte) error {
	var res VictorOpsNotificationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
