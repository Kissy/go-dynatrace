// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GuestCPULimitThresholds Custom thresholds for guest CPU limit detection. If not set then the automatic mode is used.
//
//  **All** conditions must be fulfilled to trigger an alert.
// swagger:model GuestCPULimitThresholds
type GuestCPULimitThresholds struct {

	// Hypervisor CPU usage is higher than *X*% in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	HostCPUUsageMinPercentage *int32 `json:"hostCpuUsageMinPercentage"`

	// VM CPU ready is higher than *X*% occurred in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	VMCPUReadyMaxPercentage *int32 `json:"vmCpuReadyMaxPercentage"`

	// VM CPU usage (VM CPU Usage Mhz / VM CPU limit in Mhz) is higher than *X*% in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	VMCPUUsageMaxPercentage *int32 `json:"vmCpuUsageMaxPercentage"`
}

// Validate validates this guest CPU limit thresholds
func (m *GuestCPULimitThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostCPUUsageMinPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCPUReadyMaxPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCPUUsageMaxPercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestCPULimitThresholds) validateHostCPUUsageMinPercentage(formats strfmt.Registry) error {

	if err := validate.Required("hostCpuUsageMinPercentage", "body", m.HostCPUUsageMinPercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("hostCpuUsageMinPercentage", "body", int64(*m.HostCPUUsageMinPercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("hostCpuUsageMinPercentage", "body", int64(*m.HostCPUUsageMinPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GuestCPULimitThresholds) validateVMCPUReadyMaxPercentage(formats strfmt.Registry) error {

	if err := validate.Required("vmCpuReadyMaxPercentage", "body", m.VMCPUReadyMaxPercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("vmCpuReadyMaxPercentage", "body", int64(*m.VMCPUReadyMaxPercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vmCpuReadyMaxPercentage", "body", int64(*m.VMCPUReadyMaxPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GuestCPULimitThresholds) validateVMCPUUsageMaxPercentage(formats strfmt.Registry) error {

	if err := validate.Required("vmCpuUsageMaxPercentage", "body", m.VMCPUUsageMaxPercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("vmCpuUsageMaxPercentage", "body", int64(*m.VMCPUUsageMaxPercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vmCpuUsageMaxPercentage", "body", int64(*m.VMCPUUsageMaxPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GuestCPULimitThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GuestCPULimitThresholds) UnmarshalBinary(b []byte) error {
	var res GuestCPULimitThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
