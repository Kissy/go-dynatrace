// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdvancedJavaScriptTagSettings Advanced JavaScript tag settings.
// swagger:model AdvancedJavaScriptTagSettings
type AdvancedJavaScriptTagSettings struct {

	// Additional event handlers and wrappers.
	// Required: true
	AdditionalEventHandlers *AdditionalEventHandlers `json:"additionalEventHandlers"`

	// In addition to the event handlers, events called using `addEventListener` or `attachEvent` can be captured. Be careful with this option! Event wrappers can conflict with the JavaScript code on a web page.
	// Required: true
	EventWrapperSettings *EventWrapperSettings `json:"eventWrapperSettings"`

	// Global event capture settings.
	// Required: true
	GlobalEventCaptureSettings *GlobalEventCaptureSettings `json:"globalEventCaptureSettings"`

	// Instrumentation of unsupported Ajax frameworks enabled/disabled.
	// Required: true
	InstrumentUnsupportedAjaxFrameworks *bool `json:"instrumentUnsupportedAjaxFrameworks"`

	// Maximum character length for action names. Valid values range from 5 to 10000.
	// Required: true
	// Maximum: 10000
	// Minimum: 5
	MaxActionNameLength *int32 `json:"maxActionNameLength"`

	// Maximum number of errors to be captured per page. Valid values range from 0 to 50.
	// Required: true
	// Maximum: 50
	// Minimum: 0
	MaxErrorsToCapture *int32 `json:"maxErrorsToCapture"`

	// Additional special characters that are to be escaped using non-alphanumeric characters in HTML escape format.
	// Required: true
	// Max Length: 30
	// Min Length: 0
	// Pattern: [^"<>]*
	SpecialCharactersToEscape *string `json:"specialCharactersToEscape"`

	// Send the beacon signal as a synchronous XMLHttpRequest using Firefox enabled/disabled.
	// Required: true
	SyncBeaconFirefox *bool `json:"syncBeaconFirefox"`

	// Send the beacon signal as a synchronous XMLHttpRequest using Internet Explorer enabled/disabled.
	// Required: true
	SyncBeaconInternetExplorer *bool `json:"syncBeaconInternetExplorer"`
}

// Validate validates this advanced java script tag settings
func (m *AdvancedJavaScriptTagSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalEventHandlers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventWrapperSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalEventCaptureSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstrumentUnsupportedAjaxFrameworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxActionNameLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxErrorsToCapture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecialCharactersToEscape(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncBeaconFirefox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncBeaconInternetExplorer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateAdditionalEventHandlers(formats strfmt.Registry) error {

	if err := validate.Required("additionalEventHandlers", "body", m.AdditionalEventHandlers); err != nil {
		return err
	}

	if m.AdditionalEventHandlers != nil {
		if err := m.AdditionalEventHandlers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalEventHandlers")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateEventWrapperSettings(formats strfmt.Registry) error {

	if err := validate.Required("eventWrapperSettings", "body", m.EventWrapperSettings); err != nil {
		return err
	}

	if m.EventWrapperSettings != nil {
		if err := m.EventWrapperSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventWrapperSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateGlobalEventCaptureSettings(formats strfmt.Registry) error {

	if err := validate.Required("globalEventCaptureSettings", "body", m.GlobalEventCaptureSettings); err != nil {
		return err
	}

	if m.GlobalEventCaptureSettings != nil {
		if err := m.GlobalEventCaptureSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalEventCaptureSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateInstrumentUnsupportedAjaxFrameworks(formats strfmt.Registry) error {

	if err := validate.Required("instrumentUnsupportedAjaxFrameworks", "body", m.InstrumentUnsupportedAjaxFrameworks); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateMaxActionNameLength(formats strfmt.Registry) error {

	if err := validate.Required("maxActionNameLength", "body", m.MaxActionNameLength); err != nil {
		return err
	}

	if err := validate.MinimumInt("maxActionNameLength", "body", int64(*m.MaxActionNameLength), 5, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maxActionNameLength", "body", int64(*m.MaxActionNameLength), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateMaxErrorsToCapture(formats strfmt.Registry) error {

	if err := validate.Required("maxErrorsToCapture", "body", m.MaxErrorsToCapture); err != nil {
		return err
	}

	if err := validate.MinimumInt("maxErrorsToCapture", "body", int64(*m.MaxErrorsToCapture), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maxErrorsToCapture", "body", int64(*m.MaxErrorsToCapture), 50, false); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateSpecialCharactersToEscape(formats strfmt.Registry) error {

	if err := validate.Required("specialCharactersToEscape", "body", m.SpecialCharactersToEscape); err != nil {
		return err
	}

	if err := validate.MinLength("specialCharactersToEscape", "body", string(*m.SpecialCharactersToEscape), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("specialCharactersToEscape", "body", string(*m.SpecialCharactersToEscape), 30); err != nil {
		return err
	}

	if err := validate.Pattern("specialCharactersToEscape", "body", string(*m.SpecialCharactersToEscape), `[^"<>]*`); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateSyncBeaconFirefox(formats strfmt.Registry) error {

	if err := validate.Required("syncBeaconFirefox", "body", m.SyncBeaconFirefox); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedJavaScriptTagSettings) validateSyncBeaconInternetExplorer(formats strfmt.Registry) error {

	if err := validate.Required("syncBeaconInternetExplorer", "body", m.SyncBeaconInternetExplorer); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedJavaScriptTagSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedJavaScriptTagSettings) UnmarshalBinary(b []byte) error {
	var res AdvancedJavaScriptTagSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
