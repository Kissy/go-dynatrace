// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MethodRule method rule
// swagger:model MethodRule
type MethodRule struct {

	// Fully qualified types of argument the method expects.
	ArgumentTypes []string `json:"argumentTypes"`

	// The ID of the method rule.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The method to instrument.
	// Required: true
	// Min Length: 1
	MethodName *string `json:"methodName"`

	// Fully qualified type the method returns.
	// Required: true
	// Min Length: 1
	ReturnType *string `json:"returnType"`
}

// Validate validates this method rule
func (m *MethodRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MethodRule) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MethodRule) validateMethodName(formats strfmt.Registry) error {

	if err := validate.Required("methodName", "body", m.MethodName); err != nil {
		return err
	}

	if err := validate.MinLength("methodName", "body", string(*m.MethodName), 1); err != nil {
		return err
	}

	return nil
}

func (m *MethodRule) validateReturnType(formats strfmt.Registry) error {

	if err := validate.Required("returnType", "body", m.ReturnType); err != nil {
		return err
	}

	if err := validate.MinLength("returnType", "body", string(*m.ReturnType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MethodRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MethodRule) UnmarshalBinary(b []byte) error {
	var res MethodRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
