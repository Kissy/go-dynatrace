// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HighGcActivityThresholds Custom thresholds for high GC activity. If not set, automatic mode is used.
//
//  Meeting **any** of these conditions triggers an alert.
// swagger:model HighGcActivityThresholds
type HighGcActivityThresholds struct {

	// GC suspension is higher than *X*% in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	GcSuspensionPercentage *int32 `json:"gcSuspensionPercentage"`

	// GC time is higher than *X*% in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	GcTimePercentage *int32 `json:"gcTimePercentage"`
}

// Validate validates this high gc activity thresholds
func (m *HighGcActivityThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGcSuspensionPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcTimePercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HighGcActivityThresholds) validateGcSuspensionPercentage(formats strfmt.Registry) error {

	if err := validate.Required("gcSuspensionPercentage", "body", m.GcSuspensionPercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("gcSuspensionPercentage", "body", int64(*m.GcSuspensionPercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("gcSuspensionPercentage", "body", int64(*m.GcSuspensionPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *HighGcActivityThresholds) validateGcTimePercentage(formats strfmt.Registry) error {

	if err := validate.Required("gcTimePercentage", "body", m.GcTimePercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("gcTimePercentage", "body", int64(*m.GcTimePercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("gcTimePercentage", "body", int64(*m.GcTimePercentage), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HighGcActivityThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HighGcActivityThresholds) UnmarshalBinary(b []byte) error {
	var res HighGcActivityThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
