// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskSlowWriteAndReadsThresholds Custom thresholds for slow running disks. If not set, the automatic mode is used.
// swagger:model DiskSlowWriteAndReadsThresholds
type DiskSlowWriteAndReadsThresholds struct {

	// Alert if disk read/write time is higher than *X* milliseconds in 3 out of 5 samples.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	WriteAndReadTime *int32 `json:"writeAndReadTime"`
}

// Validate validates this disk slow write and reads thresholds
func (m *DiskSlowWriteAndReadsThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWriteAndReadTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskSlowWriteAndReadsThresholds) validateWriteAndReadTime(formats strfmt.Registry) error {

	if err := validate.Required("writeAndReadTime", "body", m.WriteAndReadTime); err != nil {
		return err
	}

	if err := validate.MinimumInt("writeAndReadTime", "body", int64(*m.WriteAndReadTime), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("writeAndReadTime", "body", int64(*m.WriteAndReadTime), 10000, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiskSlowWriteAndReadsThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskSlowWriteAndReadsThresholds) UnmarshalBinary(b []byte) error {
	var res DiskSlowWriteAndReadsThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
