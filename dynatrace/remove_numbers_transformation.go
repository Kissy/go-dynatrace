// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoveNumbersTransformation remove numbers transformation
// swagger:model RemoveNumbersTransformation
type RemoveNumbersTransformation struct {

	// Remove (`true`) or keep (`false`) hexadecimal numbers.
	//
	//  If not set, then `false` is used, keeping hexadecimal numbers.
	IncludeHexNumbers bool `json:"includeHexNumbers,omitempty"`

	// Remove numbers that contain at least *X* digits.
	// Required: true
	// Minimum: 1
	MinDigitCount *int32 `json:"minDigitCount"`
}

// Type gets the type of this subtype
func (m *RemoveNumbersTransformation) Type() string {
	return "RemoveNumbersTransformation"
}

// SetType sets the type of this subtype
func (m *RemoveNumbersTransformation) SetType(val string) {

}

// IncludeHexNumbers gets the include hex numbers of this subtype

// MinDigitCount gets the min digit count of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *RemoveNumbersTransformation) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Remove (`true`) or keep (`false`) hexadecimal numbers.
		//
		//  If not set, then `false` is used, keeping hexadecimal numbers.
		IncludeHexNumbers bool `json:"includeHexNumbers,omitempty"`

		// Remove numbers that contain at least *X* digits.
		// Required: true
		// Minimum: 1
		MinDigitCount *int32 `json:"minDigitCount"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result RemoveNumbersTransformation

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.IncludeHexNumbers = data.IncludeHexNumbers

	result.MinDigitCount = data.MinDigitCount

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m RemoveNumbersTransformation) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Remove (`true`) or keep (`false`) hexadecimal numbers.
		//
		//  If not set, then `false` is used, keeping hexadecimal numbers.
		IncludeHexNumbers bool `json:"includeHexNumbers,omitempty"`

		// Remove numbers that contain at least *X* digits.
		// Required: true
		// Minimum: 1
		MinDigitCount *int32 `json:"minDigitCount"`
	}{

		IncludeHexNumbers: m.IncludeHexNumbers,

		MinDigitCount: m.MinDigitCount,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this remove numbers transformation
func (m *RemoveNumbersTransformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinDigitCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoveNumbersTransformation) validateMinDigitCount(formats strfmt.Registry) error {

	if err := validate.Required("minDigitCount", "body", m.MinDigitCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("minDigitCount", "body", int64(*m.MinDigitCount), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoveNumbersTransformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoveNumbersTransformation) UnmarshalBinary(b []byte) error {
	var res RemoveNumbersTransformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
