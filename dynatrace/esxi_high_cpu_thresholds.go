// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EsxiHighCPUThresholds Custom thresholds for CPU saturation detection on ESXi. If not set then the automatic mode is used.
//
//  **All** conditions must be fulfilled to trigger an alert.
// swagger:model EsxiHighCpuThresholds
type EsxiHighCPUThresholds struct {

	// At least one peak higher than *X*% occurred in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	CPUPeakPercentage *int32 `json:"cpuPeakPercentage"`

	// CPU usage is higher than *X*% in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	CPUUsagePercentage *int32 `json:"cpuUsagePercentage"`

	// VM CPU ready is higher than *X*% in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	VMCPUReadyPercentage *int32 `json:"vmCpuReadyPercentage"`
}

// Validate validates this esxi high Cpu thresholds
func (m *EsxiHighCPUThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUPeakPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUUsagePercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCPUReadyPercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EsxiHighCPUThresholds) validateCPUPeakPercentage(formats strfmt.Registry) error {

	if err := validate.Required("cpuPeakPercentage", "body", m.CPUPeakPercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("cpuPeakPercentage", "body", int64(*m.CPUPeakPercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cpuPeakPercentage", "body", int64(*m.CPUPeakPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *EsxiHighCPUThresholds) validateCPUUsagePercentage(formats strfmt.Registry) error {

	if err := validate.Required("cpuUsagePercentage", "body", m.CPUUsagePercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("cpuUsagePercentage", "body", int64(*m.CPUUsagePercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cpuUsagePercentage", "body", int64(*m.CPUUsagePercentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *EsxiHighCPUThresholds) validateVMCPUReadyPercentage(formats strfmt.Registry) error {

	if err := validate.Required("vmCpuReadyPercentage", "body", m.VMCPUReadyPercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("vmCpuReadyPercentage", "body", int64(*m.VMCPUReadyPercentage), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vmCpuReadyPercentage", "body", int64(*m.VMCPUReadyPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EsxiHighCPUThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EsxiHighCPUThresholds) UnmarshalBinary(b []byte) error {
	var res EsxiHighCPUThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
