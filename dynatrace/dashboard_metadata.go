// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardMetadata Parameters of a dashboard.
// swagger:model DashboardMetadata
type DashboardMetadata struct {

	// Filters, applied to the dashboard.
	DashboardFilter *DashboardFilter `json:"dashboardFilter,omitempty"`

	// The name of the dashboard.
	// Required: true
	Name *string `json:"name"`

	// The owner of the dashboard.
	Owner string `json:"owner,omitempty"`

	// The dashboard is shared (`true`) or private (`false`).
	Shared bool `json:"shared,omitempty"`

	// How the dashboard is shared.
	//
	//  If **shared** is set to `false` these settings are saved but not used.
	SharingDetails *SharingInfo `json:"sharingDetails,omitempty"`

	// A set of tags assigned to the dashboard.
	// Unique: true
	Tags []string `json:"tags"`
}

// Validate validates this dashboard metadata
func (m *DashboardMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboardFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharingDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardMetadata) validateDashboardFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.DashboardFilter) { // not required
		return nil
	}

	if m.DashboardFilter != nil {
		if err := m.DashboardFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardFilter")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardMetadata) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DashboardMetadata) validateSharingDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.SharingDetails) { // not required
		return nil
	}

	if m.SharingDetails != nil {
		if err := m.SharingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharingDetails")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardMetadata) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardMetadata) UnmarshalBinary(b []byte) error {
	var res DashboardMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
