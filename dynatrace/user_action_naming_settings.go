// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserActionNamingSettings The settings of user action naming.
// swagger:model UserActionNamingSettings
type UserActionNamingSettings struct {

	// Case insensitive naming.
	IgnoreCase bool `json:"ignoreCase,omitempty"`

	// User action naming rules for loading actions.
	LoadActionNamingRules []*UserActionNamingRule `json:"loadActionNamingRules"`

	// User action placeholders.
	Placeholders []*UserActionNamingPlaceholder `json:"placeholders"`

	// Deactivate this setting if different domains should not result in separate user actions.
	SplitUserActionsByDomain bool `json:"splitUserActionsByDomain,omitempty"`

	// User action naming rules for xhr actions.
	XhrActionNamingRules []*UserActionNamingRule `json:"xhrActionNamingRules"`
}

// Validate validates this user action naming settings
func (m *UserActionNamingSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoadActionNamingRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlaceholders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXhrActionNamingRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserActionNamingSettings) validateLoadActionNamingRules(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadActionNamingRules) { // not required
		return nil
	}

	for i := 0; i < len(m.LoadActionNamingRules); i++ {
		if swag.IsZero(m.LoadActionNamingRules[i]) { // not required
			continue
		}

		if m.LoadActionNamingRules[i] != nil {
			if err := m.LoadActionNamingRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loadActionNamingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserActionNamingSettings) validatePlaceholders(formats strfmt.Registry) error {

	if swag.IsZero(m.Placeholders) { // not required
		return nil
	}

	for i := 0; i < len(m.Placeholders); i++ {
		if swag.IsZero(m.Placeholders[i]) { // not required
			continue
		}

		if m.Placeholders[i] != nil {
			if err := m.Placeholders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("placeholders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserActionNamingSettings) validateXhrActionNamingRules(formats strfmt.Registry) error {

	if swag.IsZero(m.XhrActionNamingRules) { // not required
		return nil
	}

	for i := 0; i < len(m.XhrActionNamingRules); i++ {
		if swag.IsZero(m.XhrActionNamingRules[i]) { // not required
			continue
		}

		if m.XhrActionNamingRules[i] != nil {
			if err := m.XhrActionNamingRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("xhrActionNamingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserActionNamingSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserActionNamingSettings) UnmarshalBinary(b []byte) error {
	var res UserActionNamingSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
