// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertingProfileTagFilter Configuration of the tag filtering of the alerting profile.
// swagger:model AlertingProfileTagFilter
type AlertingProfileTagFilter struct {

	// The filtering mode:
	// * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.
	// * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.
	// * `NONE`: The rule applies to all monitored entities.
	// Required: true
	// Enum: [INCLUDE_ALL INCLUDE_ANY NONE]
	IncludeMode *string `json:"includeMode"`

	// A list of required tags.
	// Unique: true
	TagFilters []*TagFilter `json:"tagFilters"`
}

// Validate validates this alerting profile tag filter
func (m *AlertingProfileTagFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncludeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var alertingProfileTagFilterTypeIncludeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INCLUDE_ALL","INCLUDE_ANY","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertingProfileTagFilterTypeIncludeModePropEnum = append(alertingProfileTagFilterTypeIncludeModePropEnum, v)
	}
}

const (

	// AlertingProfileTagFilterIncludeModeINCLUDEALL captures enum value "INCLUDE_ALL"
	AlertingProfileTagFilterIncludeModeINCLUDEALL string = "INCLUDE_ALL"

	// AlertingProfileTagFilterIncludeModeINCLUDEANY captures enum value "INCLUDE_ANY"
	AlertingProfileTagFilterIncludeModeINCLUDEANY string = "INCLUDE_ANY"

	// AlertingProfileTagFilterIncludeModeNONE captures enum value "NONE"
	AlertingProfileTagFilterIncludeModeNONE string = "NONE"
)

// prop value enum
func (m *AlertingProfileTagFilter) validateIncludeModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, alertingProfileTagFilterTypeIncludeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AlertingProfileTagFilter) validateIncludeMode(formats strfmt.Registry) error {

	if err := validate.Required("includeMode", "body", m.IncludeMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateIncludeModeEnum("includeMode", "body", *m.IncludeMode); err != nil {
		return err
	}

	return nil
}

func (m *AlertingProfileTagFilter) validateTagFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.TagFilters) { // not required
		return nil
	}

	if err := validate.UniqueItems("tagFilters", "body", m.TagFilters); err != nil {
		return err
	}

	for i := 0; i < len(m.TagFilters); i++ {
		if swag.IsZero(m.TagFilters[i]) { // not required
			continue
		}

		if m.TagFilters[i] != nil {
			if err := m.TagFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertingProfileTagFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertingProfileTagFilter) UnmarshalBinary(b []byte) error {
	var res AlertingProfileTagFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
