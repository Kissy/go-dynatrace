// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebApplicationConfigBrowserRestrictionSettings Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode.
// swagger:model WebApplicationConfigBrowserRestrictionSettings
type WebApplicationConfigBrowserRestrictionSettings struct {

	// A list of browser restrictions.
	BrowserRestrictions []*WebApplicationConfigBrowserRestriction `json:"browserRestrictions"`

	// The mode of the list of browser restrictions.
	// Required: true
	// Enum: [EXCLUDE INCLUDE]
	Mode *string `json:"mode"`
}

// Validate validates this web application config browser restriction settings
func (m *WebApplicationConfigBrowserRestrictionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrowserRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebApplicationConfigBrowserRestrictionSettings) validateBrowserRestrictions(formats strfmt.Registry) error {

	if swag.IsZero(m.BrowserRestrictions) { // not required
		return nil
	}

	for i := 0; i < len(m.BrowserRestrictions); i++ {
		if swag.IsZero(m.BrowserRestrictions[i]) { // not required
			continue
		}

		if m.BrowserRestrictions[i] != nil {
			if err := m.BrowserRestrictions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("browserRestrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var webApplicationConfigBrowserRestrictionSettingsTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXCLUDE","INCLUDE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webApplicationConfigBrowserRestrictionSettingsTypeModePropEnum = append(webApplicationConfigBrowserRestrictionSettingsTypeModePropEnum, v)
	}
}

const (

	// WebApplicationConfigBrowserRestrictionSettingsModeEXCLUDE captures enum value "EXCLUDE"
	WebApplicationConfigBrowserRestrictionSettingsModeEXCLUDE string = "EXCLUDE"

	// WebApplicationConfigBrowserRestrictionSettingsModeINCLUDE captures enum value "INCLUDE"
	WebApplicationConfigBrowserRestrictionSettingsModeINCLUDE string = "INCLUDE"
)

// prop value enum
func (m *WebApplicationConfigBrowserRestrictionSettings) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webApplicationConfigBrowserRestrictionSettingsTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebApplicationConfigBrowserRestrictionSettings) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebApplicationConfigBrowserRestrictionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebApplicationConfigBrowserRestrictionSettings) UnmarshalBinary(b []byte) error {
	var res WebApplicationConfigBrowserRestrictionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
