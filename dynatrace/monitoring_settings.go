// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitoringSettings Real user monitoring settings.
// swagger:model MonitoringSettings
type MonitoringSettings struct {

	// Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings.
	AddCrossOriginAnonymousAttribute bool `json:"addCrossOriginAnonymousAttribute,omitempty"`

	// Advanced JavaScript tag settings.
	// Required: true
	AdvancedJavaScriptTagSettings *AdvancedJavaScriptTagSettings `json:"advancedJavaScriptTagSettings"`

	// Browser restriction settings.
	BrowserRestrictionSettings *WebApplicationConfigBrowserRestrictionSettings `json:"browserRestrictionSettings,omitempty"`

	// Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled.
	// Required: true
	CacheControlHeaderOptimizations *bool `json:"cacheControlHeaderOptimizations"`

	// Content capture settings.
	// Required: true
	ContentCapture *ContentCapture `json:"contentCapture"`

	// Domain for cookie placement.
	// Required: true
	// Max Length: 150
	// Min Length: 0
	CookiePlacementDomain *string `json:"cookiePlacementDomain"`

	// Additional JavaScript tag properties that are specific to your application. To do this, type key=value pairs separated using a (|) symbol.
	// Required: true
	// Max Length: 1000
	// Min Length: 0
	CustomConfigurationProperties *string `json:"customConfigurationProperties"`

	// You can exclude some actions from becoming XHR actions.
	//
	// Put a regular expression, matching all the required URLs, here.
	//
	// If noting specified the feature is disabled.
	// Required: true
	ExcludeXhrRegex *string `json:"excludeXhrRegex"`

	// `fetch()` request capture enabled/disabled.
	// Required: true
	FetchRequests *bool `json:"fetchRequests"`

	// JavaScript injection mode.
	// Required: true
	// Enum: [CODE_SNIPPET CODE_SNIPPET_ASYNC INLINE_CODE JAVASCRIPT_TAG]
	InjectionMode *string `json:"injectionMode"`

	// Ip address restriction settings.
	IPAddressRestrictionSettings *WebApplicationConfigIPAddressRestrictionSettings `json:"ipAddressRestrictionSettings,omitempty"`

	// Support of various JavaScript frameworks.
	// Required: true
	JavaScriptFrameworkSupport *JavaScriptFrameworkSupport `json:"javaScriptFrameworkSupport"`

	// Java script injection rules.
	JavaScriptInjectionRules []*JavaScriptInjectionRules `json:"javaScriptInjectionRules"`

	// The location of your application’s custom JavaScript library file.
	//
	// If nothing specified the root directory of your web server is used.
	// Max Length: 512
	// Min Length: 0
	LibraryFileLocation *string `json:"libraryFileLocation,omitempty"`

	// The location to send monitoring data from the JavaScript tag.
	//
	// Specify either a relative or an absolute URL. If you use an absolute URL, data will be sent using CORS.
	// Max Length: 512
	// Min Length: 0
	MonitoringDataPath *string `json:"monitoringDataPath,omitempty"`

	// Time duration for the cache settings.
	ScriptTagCacheDurationInHours int32 `json:"scriptTagCacheDurationInHours,omitempty"`

	// Secure attribute usage for Dynatrace cookies enabled/disabled.
	// Required: true
	SecureCookieAttribute *bool `json:"secureCookieAttribute"`

	// Path to identify the server’s request ID.
	// Required: true
	// Max Length: 150
	// Min Length: 0
	// Pattern: [a-zA-Z-~\\.]*
	ServerRequestPathID *string `json:"serverRequestPathId"`

	// `XmlHttpRequest` support enabled/disabled.
	// Required: true
	XMLHTTPRequest *bool `json:"xmlHttpRequest"`
}

// Validate validates this monitoring settings
func (m *MonitoringSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvancedJavaScriptTagSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrowserRestrictionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCacheControlHeaderOptimizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentCapture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCookiePlacementDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomConfigurationProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeXhrRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFetchRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInjectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddressRestrictionSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJavaScriptFrameworkSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJavaScriptInjectionRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryFileLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoringDataPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureCookieAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerRequestPathID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXMLHTTPRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringSettings) validateAdvancedJavaScriptTagSettings(formats strfmt.Registry) error {

	if err := validate.Required("advancedJavaScriptTagSettings", "body", m.AdvancedJavaScriptTagSettings); err != nil {
		return err
	}

	if m.AdvancedJavaScriptTagSettings != nil {
		if err := m.AdvancedJavaScriptTagSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedJavaScriptTagSettings")
			}
			return err
		}
	}

	return nil
}

func (m *MonitoringSettings) validateBrowserRestrictionSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.BrowserRestrictionSettings) { // not required
		return nil
	}

	if m.BrowserRestrictionSettings != nil {
		if err := m.BrowserRestrictionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("browserRestrictionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *MonitoringSettings) validateCacheControlHeaderOptimizations(formats strfmt.Registry) error {

	if err := validate.Required("cacheControlHeaderOptimizations", "body", m.CacheControlHeaderOptimizations); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateContentCapture(formats strfmt.Registry) error {

	if err := validate.Required("contentCapture", "body", m.ContentCapture); err != nil {
		return err
	}

	if m.ContentCapture != nil {
		if err := m.ContentCapture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentCapture")
			}
			return err
		}
	}

	return nil
}

func (m *MonitoringSettings) validateCookiePlacementDomain(formats strfmt.Registry) error {

	if err := validate.Required("cookiePlacementDomain", "body", m.CookiePlacementDomain); err != nil {
		return err
	}

	if err := validate.MinLength("cookiePlacementDomain", "body", string(*m.CookiePlacementDomain), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cookiePlacementDomain", "body", string(*m.CookiePlacementDomain), 150); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateCustomConfigurationProperties(formats strfmt.Registry) error {

	if err := validate.Required("customConfigurationProperties", "body", m.CustomConfigurationProperties); err != nil {
		return err
	}

	if err := validate.MinLength("customConfigurationProperties", "body", string(*m.CustomConfigurationProperties), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("customConfigurationProperties", "body", string(*m.CustomConfigurationProperties), 1000); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateExcludeXhrRegex(formats strfmt.Registry) error {

	if err := validate.Required("excludeXhrRegex", "body", m.ExcludeXhrRegex); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateFetchRequests(formats strfmt.Registry) error {

	if err := validate.Required("fetchRequests", "body", m.FetchRequests); err != nil {
		return err
	}

	return nil
}

var monitoringSettingsTypeInjectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CODE_SNIPPET","CODE_SNIPPET_ASYNC","INLINE_CODE","JAVASCRIPT_TAG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoringSettingsTypeInjectionModePropEnum = append(monitoringSettingsTypeInjectionModePropEnum, v)
	}
}

const (

	// MonitoringSettingsInjectionModeCODESNIPPET captures enum value "CODE_SNIPPET"
	MonitoringSettingsInjectionModeCODESNIPPET string = "CODE_SNIPPET"

	// MonitoringSettingsInjectionModeCODESNIPPETASYNC captures enum value "CODE_SNIPPET_ASYNC"
	MonitoringSettingsInjectionModeCODESNIPPETASYNC string = "CODE_SNIPPET_ASYNC"

	// MonitoringSettingsInjectionModeINLINECODE captures enum value "INLINE_CODE"
	MonitoringSettingsInjectionModeINLINECODE string = "INLINE_CODE"

	// MonitoringSettingsInjectionModeJAVASCRIPTTAG captures enum value "JAVASCRIPT_TAG"
	MonitoringSettingsInjectionModeJAVASCRIPTTAG string = "JAVASCRIPT_TAG"
)

// prop value enum
func (m *MonitoringSettings) validateInjectionModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoringSettingsTypeInjectionModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoringSettings) validateInjectionMode(formats strfmt.Registry) error {

	if err := validate.Required("injectionMode", "body", m.InjectionMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateInjectionModeEnum("injectionMode", "body", *m.InjectionMode); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateIPAddressRestrictionSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddressRestrictionSettings) { // not required
		return nil
	}

	if m.IPAddressRestrictionSettings != nil {
		if err := m.IPAddressRestrictionSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipAddressRestrictionSettings")
			}
			return err
		}
	}

	return nil
}

func (m *MonitoringSettings) validateJavaScriptFrameworkSupport(formats strfmt.Registry) error {

	if err := validate.Required("javaScriptFrameworkSupport", "body", m.JavaScriptFrameworkSupport); err != nil {
		return err
	}

	if m.JavaScriptFrameworkSupport != nil {
		if err := m.JavaScriptFrameworkSupport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("javaScriptFrameworkSupport")
			}
			return err
		}
	}

	return nil
}

func (m *MonitoringSettings) validateJavaScriptInjectionRules(formats strfmt.Registry) error {

	if swag.IsZero(m.JavaScriptInjectionRules) { // not required
		return nil
	}

	for i := 0; i < len(m.JavaScriptInjectionRules); i++ {
		if swag.IsZero(m.JavaScriptInjectionRules[i]) { // not required
			continue
		}

		if m.JavaScriptInjectionRules[i] != nil {
			if err := m.JavaScriptInjectionRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("javaScriptInjectionRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MonitoringSettings) validateLibraryFileLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryFileLocation) { // not required
		return nil
	}

	if err := validate.MinLength("libraryFileLocation", "body", string(*m.LibraryFileLocation), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("libraryFileLocation", "body", string(*m.LibraryFileLocation), 512); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateMonitoringDataPath(formats strfmt.Registry) error {

	if swag.IsZero(m.MonitoringDataPath) { // not required
		return nil
	}

	if err := validate.MinLength("monitoringDataPath", "body", string(*m.MonitoringDataPath), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("monitoringDataPath", "body", string(*m.MonitoringDataPath), 512); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateSecureCookieAttribute(formats strfmt.Registry) error {

	if err := validate.Required("secureCookieAttribute", "body", m.SecureCookieAttribute); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateServerRequestPathID(formats strfmt.Registry) error {

	if err := validate.Required("serverRequestPathId", "body", m.ServerRequestPathID); err != nil {
		return err
	}

	if err := validate.MinLength("serverRequestPathId", "body", string(*m.ServerRequestPathID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("serverRequestPathId", "body", string(*m.ServerRequestPathID), 150); err != nil {
		return err
	}

	if err := validate.Pattern("serverRequestPathId", "body", string(*m.ServerRequestPathID), `[a-zA-Z-~\\.]*`); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringSettings) validateXMLHTTPRequest(formats strfmt.Registry) error {

	if err := validate.Required("xmlHttpRequest", "body", m.XMLHTTPRequest); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoringSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoringSettings) UnmarshalBinary(b []byte) error {
	var res MonitoringSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
