// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValueProcessing value processing
// swagger:model ValueProcessing
type ValueProcessing struct {

	// Preprocess by extracting a substring from the original value.
	ExtractSubstring *ExtractSubstring `json:"extractSubstring,omitempty"`

	// Split (preprocessed) string values at this separator.
	SplitAt string `json:"splitAt,omitempty"`

	// Prune Whitespaces. Defaults to false.
	// Required: true
	Trim *bool `json:"trim"`

	// Only capture values matching this condition.
	ValueCondition *ValueCondition `json:"valueCondition,omitempty"`

	// Extract value from captured data per regex.
	ValueExtractorRegex string `json:"valueExtractorRegex,omitempty"`
}

// Validate validates this value processing
func (m *ValueProcessing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtractSubstring(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValueProcessing) validateExtractSubstring(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtractSubstring) { // not required
		return nil
	}

	if m.ExtractSubstring != nil {
		if err := m.ExtractSubstring.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extractSubstring")
			}
			return err
		}
	}

	return nil
}

func (m *ValueProcessing) validateTrim(formats strfmt.Registry) error {

	if err := validate.Required("trim", "body", m.Trim); err != nil {
		return err
	}

	return nil
}

func (m *ValueProcessing) validateValueCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueCondition) { // not required
		return nil
	}

	if m.ValueCondition != nil {
		if err := m.ValueCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("valueCondition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValueProcessing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValueProcessing) UnmarshalBinary(b []byte) error {
	var res ValueProcessing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
