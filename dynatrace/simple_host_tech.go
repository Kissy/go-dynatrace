// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimpleHostTech simple host tech
// swagger:model SimpleHostTech
type SimpleHostTech struct {

	// Predefined technology, if technology is not predefined, then the verbatim type must be set
	// Enum: [APPARMOR BOSH BOSHBPM CLOUDFOUNDRY CONTAINERD CRIO DIEGO_CELL DOCKER GARDEN GRSECURITY KUBERNETES OPENSHIFT OPENSTACK_COMPUTE OPENSTACK_CONTROLLER SELINUX]
	Type string `json:"type,omitempty"`

	// Non-predefined technology, use for custom technologies.
	// Max Length: 128
	// Min Length: 0
	VerbatimType *string `json:"verbatimType,omitempty"`
}

// Validate validates this simple host tech
func (m *SimpleHostTech) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerbatimType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var simpleHostTechTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPARMOR","BOSH","BOSHBPM","CLOUDFOUNDRY","CONTAINERD","CRIO","DIEGO_CELL","DOCKER","GARDEN","GRSECURITY","KUBERNETES","OPENSHIFT","OPENSTACK_COMPUTE","OPENSTACK_CONTROLLER","SELINUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simpleHostTechTypeTypePropEnum = append(simpleHostTechTypeTypePropEnum, v)
	}
}

const (

	// SimpleHostTechTypeAPPARMOR captures enum value "APPARMOR"
	SimpleHostTechTypeAPPARMOR string = "APPARMOR"

	// SimpleHostTechTypeBOSH captures enum value "BOSH"
	SimpleHostTechTypeBOSH string = "BOSH"

	// SimpleHostTechTypeBOSHBPM captures enum value "BOSHBPM"
	SimpleHostTechTypeBOSHBPM string = "BOSHBPM"

	// SimpleHostTechTypeCLOUDFOUNDRY captures enum value "CLOUDFOUNDRY"
	SimpleHostTechTypeCLOUDFOUNDRY string = "CLOUDFOUNDRY"

	// SimpleHostTechTypeCONTAINERD captures enum value "CONTAINERD"
	SimpleHostTechTypeCONTAINERD string = "CONTAINERD"

	// SimpleHostTechTypeCRIO captures enum value "CRIO"
	SimpleHostTechTypeCRIO string = "CRIO"

	// SimpleHostTechTypeDIEGOCELL captures enum value "DIEGO_CELL"
	SimpleHostTechTypeDIEGOCELL string = "DIEGO_CELL"

	// SimpleHostTechTypeDOCKER captures enum value "DOCKER"
	SimpleHostTechTypeDOCKER string = "DOCKER"

	// SimpleHostTechTypeGARDEN captures enum value "GARDEN"
	SimpleHostTechTypeGARDEN string = "GARDEN"

	// SimpleHostTechTypeGRSECURITY captures enum value "GRSECURITY"
	SimpleHostTechTypeGRSECURITY string = "GRSECURITY"

	// SimpleHostTechTypeKUBERNETES captures enum value "KUBERNETES"
	SimpleHostTechTypeKUBERNETES string = "KUBERNETES"

	// SimpleHostTechTypeOPENSHIFT captures enum value "OPENSHIFT"
	SimpleHostTechTypeOPENSHIFT string = "OPENSHIFT"

	// SimpleHostTechTypeOPENSTACKCOMPUTE captures enum value "OPENSTACK_COMPUTE"
	SimpleHostTechTypeOPENSTACKCOMPUTE string = "OPENSTACK_COMPUTE"

	// SimpleHostTechTypeOPENSTACKCONTROLLER captures enum value "OPENSTACK_CONTROLLER"
	SimpleHostTechTypeOPENSTACKCONTROLLER string = "OPENSTACK_CONTROLLER"

	// SimpleHostTechTypeSELINUX captures enum value "SELINUX"
	SimpleHostTechTypeSELINUX string = "SELINUX"
)

// prop value enum
func (m *SimpleHostTech) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, simpleHostTechTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimpleHostTech) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *SimpleHostTech) validateVerbatimType(formats strfmt.Registry) error {

	if swag.IsZero(m.VerbatimType) { // not required
		return nil
	}

	if err := validate.MinLength("verbatimType", "body", string(*m.VerbatimType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("verbatimType", "body", string(*m.VerbatimType), 128); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimpleHostTech) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimpleHostTech) UnmarshalBinary(b []byte) error {
	var res SimpleHostTech
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
