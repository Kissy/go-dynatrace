// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RumMetric rum metric
// swagger:model RumMetric
type RumMetric struct {

	// The application identifier of the application where this RumMetric should belong to
	// Required: true
	ApplicationIdentifier *string `json:"applicationIdentifier"`

	// Specifies the optional dimensions for this RumMetric.
	// Max Items: 2
	// Min Items: 0
	Dimensions []*RumDimensionDefinition `json:"dimensions"`

	// RumMetric enabled/disabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// Specifies the metric definition for this RumMetric.
	// Required: true
	MetricDefinition *RumMetricDefinition `json:"metricDefinition"`

	// The unique key of this RumMetric. Has to start with "calc:apps."
	// Required: true
	MetricKey *string `json:"metricKey"`

	// The name of the RumMetric config
	// Required: true
	// Max Length: 100
	// Min Length: 0
	Name *string `json:"name"`

	// An optional filter. Only user actions matching this filter are used for metric calculation.
	UserActionFilter *UserActionFilter `json:"userActionFilter,omitempty"`
}

// Validate validates this rum metric
func (m *RumMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserActionFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RumMetric) validateApplicationIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("applicationIdentifier", "body", m.ApplicationIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *RumMetric) validateDimensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	iDimensionsSize := int64(len(m.Dimensions))

	if err := validate.MinItems("dimensions", "body", iDimensionsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("dimensions", "body", iDimensionsSize, 2); err != nil {
		return err
	}

	for i := 0; i < len(m.Dimensions); i++ {
		if swag.IsZero(m.Dimensions[i]) { // not required
			continue
		}

		if m.Dimensions[i] != nil {
			if err := m.Dimensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RumMetric) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *RumMetric) validateMetricDefinition(formats strfmt.Registry) error {

	if err := validate.Required("metricDefinition", "body", m.MetricDefinition); err != nil {
		return err
	}

	if m.MetricDefinition != nil {
		if err := m.MetricDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *RumMetric) validateMetricKey(formats strfmt.Registry) error {

	if err := validate.Required("metricKey", "body", m.MetricKey); err != nil {
		return err
	}

	return nil
}

func (m *RumMetric) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *RumMetric) validateUserActionFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.UserActionFilter) { // not required
		return nil
	}

	if m.UserActionFilter != nil {
		if err := m.UserActionFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userActionFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RumMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RumMetric) UnmarshalBinary(b []byte) error {
	var res RumMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
