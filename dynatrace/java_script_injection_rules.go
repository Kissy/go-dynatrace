// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JavaScriptInjectionRules Rules for javascript injection
// swagger:model JavaScriptInjectionRules
type JavaScriptInjectionRules struct {

	// The enable or disable rule of the java script injection.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The html pattern of the java script injection.
	HTMLPattern string `json:"htmlPattern,omitempty"`

	// The url rule of the java script injection.
	// Required: true
	// Enum: [AFTER_SPECIFIC_HTML AUTOMATIC_INJECTION BEFORE_SPECIFIC_HTML DO_NOT_INJECT]
	Rule *string `json:"rule"`

	// The url operator of the java script injection.
	// Required: true
	// Enum: [ALL_PAGES CONTAINS ENDS_WITH EQUALS STARTS_WITH]
	URLOperator *string `json:"urlOperator"`

	// The url pattern of the java script injection.
	URLPattern string `json:"urlPattern,omitempty"`
}

// Validate validates this java script injection rules
func (m *JavaScriptInjectionRules) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JavaScriptInjectionRules) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var javaScriptInjectionRulesTypeRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AFTER_SPECIFIC_HTML","AUTOMATIC_INJECTION","BEFORE_SPECIFIC_HTML","DO_NOT_INJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		javaScriptInjectionRulesTypeRulePropEnum = append(javaScriptInjectionRulesTypeRulePropEnum, v)
	}
}

const (

	// JavaScriptInjectionRulesRuleAFTERSPECIFICHTML captures enum value "AFTER_SPECIFIC_HTML"
	JavaScriptInjectionRulesRuleAFTERSPECIFICHTML string = "AFTER_SPECIFIC_HTML"

	// JavaScriptInjectionRulesRuleAUTOMATICINJECTION captures enum value "AUTOMATIC_INJECTION"
	JavaScriptInjectionRulesRuleAUTOMATICINJECTION string = "AUTOMATIC_INJECTION"

	// JavaScriptInjectionRulesRuleBEFORESPECIFICHTML captures enum value "BEFORE_SPECIFIC_HTML"
	JavaScriptInjectionRulesRuleBEFORESPECIFICHTML string = "BEFORE_SPECIFIC_HTML"

	// JavaScriptInjectionRulesRuleDONOTINJECT captures enum value "DO_NOT_INJECT"
	JavaScriptInjectionRulesRuleDONOTINJECT string = "DO_NOT_INJECT"
)

// prop value enum
func (m *JavaScriptInjectionRules) validateRuleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, javaScriptInjectionRulesTypeRulePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JavaScriptInjectionRules) validateRule(formats strfmt.Registry) error {

	if err := validate.Required("rule", "body", m.Rule); err != nil {
		return err
	}

	// value enum
	if err := m.validateRuleEnum("rule", "body", *m.Rule); err != nil {
		return err
	}

	return nil
}

var javaScriptInjectionRulesTypeURLOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL_PAGES","CONTAINS","ENDS_WITH","EQUALS","STARTS_WITH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		javaScriptInjectionRulesTypeURLOperatorPropEnum = append(javaScriptInjectionRulesTypeURLOperatorPropEnum, v)
	}
}

const (

	// JavaScriptInjectionRulesURLOperatorALLPAGES captures enum value "ALL_PAGES"
	JavaScriptInjectionRulesURLOperatorALLPAGES string = "ALL_PAGES"

	// JavaScriptInjectionRulesURLOperatorCONTAINS captures enum value "CONTAINS"
	JavaScriptInjectionRulesURLOperatorCONTAINS string = "CONTAINS"

	// JavaScriptInjectionRulesURLOperatorENDSWITH captures enum value "ENDS_WITH"
	JavaScriptInjectionRulesURLOperatorENDSWITH string = "ENDS_WITH"

	// JavaScriptInjectionRulesURLOperatorEQUALS captures enum value "EQUALS"
	JavaScriptInjectionRulesURLOperatorEQUALS string = "EQUALS"

	// JavaScriptInjectionRulesURLOperatorSTARTSWITH captures enum value "STARTS_WITH"
	JavaScriptInjectionRulesURLOperatorSTARTSWITH string = "STARTS_WITH"
)

// prop value enum
func (m *JavaScriptInjectionRules) validateURLOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, javaScriptInjectionRulesTypeURLOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JavaScriptInjectionRules) validateURLOperator(formats strfmt.Registry) error {

	if err := validate.Required("urlOperator", "body", m.URLOperator); err != nil {
		return err
	}

	// value enum
	if err := m.validateURLOperatorEnum("urlOperator", "body", *m.URLOperator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JavaScriptInjectionRules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JavaScriptInjectionRules) UnmarshalBinary(b []byte) error {
	var res JavaScriptInjectionRules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
