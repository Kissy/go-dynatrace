// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateCredentials certificate credentials
// swagger:model CertificateCredentials
type CertificateCredentials struct {
	descriptionField *string

	idField string

	nameField *string

	ownerAccessOnlyField bool

	// The certificate in the string format.
	// Required: true
	Certificate *string `json:"certificate"`

	// The certificate format.
	// Required: true
	// Enum: [PEM PKCS12 UNKNOWN]
	CertificateFormat *string `json:"certificateFormat"`

	// The password of the credential.
	// Required: true
	Password *string `json:"password"`
}

// Description gets the description of this subtype
func (m *CertificateCredentials) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this subtype
func (m *CertificateCredentials) SetDescription(val *string) {
	m.descriptionField = val
}

// ID gets the id of this subtype
func (m *CertificateCredentials) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *CertificateCredentials) SetID(val string) {
	m.idField = val
}

// Name gets the name of this subtype
func (m *CertificateCredentials) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *CertificateCredentials) SetName(val *string) {
	m.nameField = val
}

// OwnerAccessOnly gets the owner access only of this subtype
func (m *CertificateCredentials) OwnerAccessOnly() bool {
	return m.ownerAccessOnlyField
}

// SetOwnerAccessOnly sets the owner access only of this subtype
func (m *CertificateCredentials) SetOwnerAccessOnly(val bool) {
	m.ownerAccessOnlyField = val
}

// Type gets the type of this subtype
func (m *CertificateCredentials) Type() string {
	return "CertificateCredentials"
}

// SetType sets the type of this subtype
func (m *CertificateCredentials) SetType(val string) {

}

// Certificate gets the certificate of this subtype

// CertificateFormat gets the certificate format of this subtype

// Password gets the password of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CertificateCredentials) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The certificate in the string format.
		// Required: true
		Certificate *string `json:"certificate"`

		// The certificate format.
		// Required: true
		// Enum: [PEM PKCS12 UNKNOWN]
		CertificateFormat *string `json:"certificateFormat"`

		// The password of the credential.
		// Required: true
		Password *string `json:"password"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Description *string `json:"description"`

		ID string `json:"id,omitempty"`

		Name *string `json:"name"`

		OwnerAccessOnly bool `json:"ownerAccessOnly,omitempty"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result CertificateCredentials

	result.descriptionField = base.Description

	result.idField = base.ID

	result.nameField = base.Name

	result.ownerAccessOnlyField = base.OwnerAccessOnly

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Certificate = data.Certificate

	result.CertificateFormat = data.CertificateFormat

	result.Password = data.Password

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CertificateCredentials) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The certificate in the string format.
		// Required: true
		Certificate *string `json:"certificate"`

		// The certificate format.
		// Required: true
		// Enum: [PEM PKCS12 UNKNOWN]
		CertificateFormat *string `json:"certificateFormat"`

		// The password of the credential.
		// Required: true
		Password *string `json:"password"`
	}{

		Certificate: m.Certificate,

		CertificateFormat: m.CertificateFormat,

		Password: m.Password,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Description *string `json:"description"`

		ID string `json:"id,omitempty"`

		Name *string `json:"name"`

		OwnerAccessOnly bool `json:"ownerAccessOnly,omitempty"`

		Type string `json:"type"`
	}{

		Description: m.Description(),

		ID: m.ID(),

		Name: m.Name(),

		OwnerAccessOnly: m.OwnerAccessOnly(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this certificate credentials
func (m *CertificateCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCredentials) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *CertificateCredentials) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *CertificateCredentials) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

var certificateCredentialsTypeCertificateFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PEM","PKCS12","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateCredentialsTypeCertificateFormatPropEnum = append(certificateCredentialsTypeCertificateFormatPropEnum, v)
	}
}

// property enum
func (m *CertificateCredentials) validateCertificateFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, certificateCredentialsTypeCertificateFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CertificateCredentials) validateCertificateFormat(formats strfmt.Registry) error {

	if err := validate.Required("certificateFormat", "body", m.CertificateFormat); err != nil {
		return err
	}

	// value enum
	if err := m.validateCertificateFormatEnum("certificateFormat", "body", *m.CertificateFormat); err != nil {
		return err
	}

	return nil
}

func (m *CertificateCredentials) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCredentials) UnmarshalBinary(b []byte) error {
	var res CertificateCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
