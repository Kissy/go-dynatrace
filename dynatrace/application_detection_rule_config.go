// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationDetectionRuleConfig Application detection rule.
// swagger:model ApplicationDetectionRuleConfig
type ApplicationDetectionRuleConfig struct {

	// The Dynatrace entity ID of the application, for example `APPLICATION-4A3B43`.
	//
	//  You must use an existing ID. If you need to create a rule for an application that doesn't exist yet, [create an application first](https://www.dynatrace.com/support/help/shortlink/api-config-web-app-post-web-app) and then configure detection rules for it.
	// Required: true
	ApplicationIdentifier *string `json:"applicationIdentifier"`

	// The condition of the rule.
	// Required: true
	FilterConfig *ApplicationFilter `json:"filterConfig"`

	// The ID of the rule.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadataDtoImpl `json:"metadata,omitempty"`

	// The order of the rule in the rules list.
	//
	// The rules are evaluated from top to bottom. The first matching rule applies.
	// Max Length: 2147483647
	// Min Length: 1
	Order string `json:"order,omitempty"`
}

// Validate validates this application detection rule config
func (m *ApplicationDetectionRuleConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationDetectionRuleConfig) validateApplicationIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("applicationIdentifier", "body", m.ApplicationIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationDetectionRuleConfig) validateFilterConfig(formats strfmt.Registry) error {

	if err := validate.Required("filterConfig", "body", m.FilterConfig); err != nil {
		return err
	}

	if m.FilterConfig != nil {
		if err := m.FilterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationDetectionRuleConfig) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationDetectionRuleConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationDetectionRuleConfig) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if err := validate.MinLength("order", "body", string(m.Order), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("order", "body", string(m.Order), 2147483647); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationDetectionRuleConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationDetectionRuleConfig) UnmarshalBinary(b []byte) error {
	var res ApplicationDetectionRuleConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
