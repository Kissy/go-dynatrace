// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FrequentIssueDetectionConfig Parameters of the frequent issue detection. See our help documentation about frequent issue detection: https://www.dynatrace.com/support/help/shortlink/frequent-issues
// swagger:model FrequentIssueDetectionConfig
type FrequentIssueDetectionConfig struct {

	// The detection for applications is enabled (`true`) or disabled (`false`).
	// Required: true
	FrequentIssueDetectionApplicationEnabled *bool `json:"frequentIssueDetectionApplicationEnabled"`

	// The detection for infrastructure is enabled (`true`) or disabled (`false`).
	// Required: true
	FrequentIssueDetectionInfrastructureEnabled *bool `json:"frequentIssueDetectionInfrastructureEnabled"`

	// The detection for services is enabled (`true`) or disabled (`false`).
	// Required: true
	FrequentIssueDetectionServiceEnabled *bool `json:"frequentIssueDetectionServiceEnabled"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
}

// Validate validates this frequent issue detection config
func (m *FrequentIssueDetectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrequentIssueDetectionApplicationEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequentIssueDetectionInfrastructureEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequentIssueDetectionServiceEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FrequentIssueDetectionConfig) validateFrequentIssueDetectionApplicationEnabled(formats strfmt.Registry) error {

	if err := validate.Required("frequentIssueDetectionApplicationEnabled", "body", m.FrequentIssueDetectionApplicationEnabled); err != nil {
		return err
	}

	return nil
}

func (m *FrequentIssueDetectionConfig) validateFrequentIssueDetectionInfrastructureEnabled(formats strfmt.Registry) error {

	if err := validate.Required("frequentIssueDetectionInfrastructureEnabled", "body", m.FrequentIssueDetectionInfrastructureEnabled); err != nil {
		return err
	}

	return nil
}

func (m *FrequentIssueDetectionConfig) validateFrequentIssueDetectionServiceEnabled(formats strfmt.Registry) error {

	if err := validate.Required("frequentIssueDetectionServiceEnabled", "body", m.FrequentIssueDetectionServiceEnabled); err != nil {
		return err
	}

	return nil
}

func (m *FrequentIssueDetectionConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FrequentIssueDetectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FrequentIssueDetectionConfig) UnmarshalBinary(b []byte) error {
	var res FrequentIssueDetectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
