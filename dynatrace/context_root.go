// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContextRoot The contribution to the service ID calculation from the detected context root.
//
//  The context root is the first segment of the request URL after server name. For example, in the `www.dynatrace.com/support/help/extend-dynatrace/dynatrace-api/` URL the context root is `support`.
//
// You have two options:
// * Keep a part of the detected URL. Specify the number of segments to be kept in the **segmentsToCopyFromUrlPath** field.
// * Dynamically transform the detected URL. Specify the transformation parameters in the **transformations** field.
//
// You can use one or both options. If you use both, the transformation applies to the modified URL.
// swagger:model ContextRoot
type ContextRoot struct {

	// The number of segments of the URL to be kept.
	//
	// The URL is divided by slashes (`/`), the indexing starts with `1` at context root.
	//
	// For example, if you specify `2` for the `www.dynatrace.com/support/help/dynatrace-api/` URL, the value of `support/help` is used.
	SegmentsToCopyFromURLPath int32 `json:"segmentsToCopyFromUrlPath,omitempty"`

	// Transformations to be applied to the detected value.
	// Max Items: 10
	// Min Items: 0
	Transformations []*ContextRootTransformation `json:"transformations"`
}

// Validate validates this context root
func (m *ContextRoot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransformations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextRoot) validateTransformations(formats strfmt.Registry) error {

	if swag.IsZero(m.Transformations) { // not required
		return nil
	}

	iTransformationsSize := int64(len(m.Transformations))

	if err := validate.MinItems("transformations", "body", iTransformationsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("transformations", "body", iTransformationsSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.Transformations); i++ {
		if swag.IsZero(m.Transformations[i]) { // not required
			continue
		}

		if m.Transformations[i] != nil {
			if err := m.Transformations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transformations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContextRoot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContextRoot) UnmarshalBinary(b []byte) error {
	var res ContextRoot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
