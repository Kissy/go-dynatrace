// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppIdentifier app identifier
// swagger:model AppIdentifier
type AppIdentifier struct {

	// The id where the file belongs to
	ID string `json:"id,omitempty"`

	// The operating system where the file belongs to
	// Enum: [ANDROID IOS TVOS]
	Os string `json:"os,omitempty"`

	// The bundleId (iOS) or package name (Android) the file belongs to
	PackageName string `json:"packageName,omitempty"`

	// The version code (Android) / bundle version (iOS) the file belongs to
	// Required: true
	VersionCode *string `json:"versionCode"`

	// The version name (Android) / bundle versions string (iOS) the file belongs to
	// Required: true
	VersionName *string `json:"versionName"`
}

// Validate validates this app identifier
func (m *AppIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var appIdentifierTypeOsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANDROID","IOS","TVOS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appIdentifierTypeOsPropEnum = append(appIdentifierTypeOsPropEnum, v)
	}
}

const (

	// AppIdentifierOsANDROID captures enum value "ANDROID"
	AppIdentifierOsANDROID string = "ANDROID"

	// AppIdentifierOsIOS captures enum value "IOS"
	AppIdentifierOsIOS string = "IOS"

	// AppIdentifierOsTVOS captures enum value "TVOS"
	AppIdentifierOsTVOS string = "TVOS"
)

// prop value enum
func (m *AppIdentifier) validateOsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, appIdentifierTypeOsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AppIdentifier) validateOs(formats strfmt.Registry) error {

	if swag.IsZero(m.Os) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsEnum("os", "body", m.Os); err != nil {
		return err
	}

	return nil
}

func (m *AppIdentifier) validateVersionCode(formats strfmt.Registry) error {

	if err := validate.Required("versionCode", "body", m.VersionCode); err != nil {
		return err
	}

	return nil
}

func (m *AppIdentifier) validateVersionName(formats strfmt.Registry) error {

	if err := validate.Required("versionName", "body", m.VersionName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppIdentifier) UnmarshalBinary(b []byte) error {
	var res AppIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
