// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMwareAnomalyDetectionConfig The configuration of the anomaly detection for VMware.
// swagger:model VMwareAnomalyDetectionConfig
type VMwareAnomalyDetectionConfig struct {

	// How to detect high number of dropped packets.
	// Required: true
	DroppedPacketsDetection *DroppedPacketsDetectionConfig `json:"droppedPacketsDetection"`

	// How to detect CPU saturation on ESXi host.
	// Required: true
	EsxiHighCPUSaturation *EsxiHighCPUSaturationConfig `json:"esxiHighCpuSaturation"`

	// How to detect memory saturation on ESXi host.
	// Required: true
	EsxiHighMemoryDetection *EsxiHighMemoryDetectionConfig `json:"esxiHighMemoryDetection"`

	// How to detect guest CPU limit reached.
	GuestCPULimitReached *GuestCPULimitReachedConfig `json:"guestCpuLimitReached,omitempty"`

	// How to detect low datastore space.
	// Required: true
	LowDatastoreSpaceDetection *LowDatastoreSpaceDetectionConfig `json:"lowDatastoreSpaceDetection"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// How to detect overloaded storage on physical storage device.
	// Required: true
	OverloadedStorageDetection *OverloadedStorageDetectionConfig `json:"overloadedStorageDetection"`

	// How to detect physical storage device running slow.
	// Required: true
	SlowPhysicalStorageDetection *SlowPhysicalStorageDetectionConfig `json:"slowPhysicalStorageDetection"`

	// How to detect undersized storage device.
	// Required: true
	UndersizedStorageDetection *UndersizedStorageDetectionConfig `json:"undersizedStorageDetection"`
}

// Validate validates this v mware anomaly detection config
func (m *VMwareAnomalyDetectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDroppedPacketsDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEsxiHighCPUSaturation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEsxiHighMemoryDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestCPULimitReached(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowDatastoreSpaceDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverloadedStorageDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlowPhysicalStorageDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUndersizedStorageDetection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateDroppedPacketsDetection(formats strfmt.Registry) error {

	if err := validate.Required("droppedPacketsDetection", "body", m.DroppedPacketsDetection); err != nil {
		return err
	}

	if m.DroppedPacketsDetection != nil {
		if err := m.DroppedPacketsDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("droppedPacketsDetection")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateEsxiHighCPUSaturation(formats strfmt.Registry) error {

	if err := validate.Required("esxiHighCpuSaturation", "body", m.EsxiHighCPUSaturation); err != nil {
		return err
	}

	if m.EsxiHighCPUSaturation != nil {
		if err := m.EsxiHighCPUSaturation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("esxiHighCpuSaturation")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateEsxiHighMemoryDetection(formats strfmt.Registry) error {

	if err := validate.Required("esxiHighMemoryDetection", "body", m.EsxiHighMemoryDetection); err != nil {
		return err
	}

	if m.EsxiHighMemoryDetection != nil {
		if err := m.EsxiHighMemoryDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("esxiHighMemoryDetection")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateGuestCPULimitReached(formats strfmt.Registry) error {

	if swag.IsZero(m.GuestCPULimitReached) { // not required
		return nil
	}

	if m.GuestCPULimitReached != nil {
		if err := m.GuestCPULimitReached.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestCpuLimitReached")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateLowDatastoreSpaceDetection(formats strfmt.Registry) error {

	if err := validate.Required("lowDatastoreSpaceDetection", "body", m.LowDatastoreSpaceDetection); err != nil {
		return err
	}

	if m.LowDatastoreSpaceDetection != nil {
		if err := m.LowDatastoreSpaceDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lowDatastoreSpaceDetection")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateOverloadedStorageDetection(formats strfmt.Registry) error {

	if err := validate.Required("overloadedStorageDetection", "body", m.OverloadedStorageDetection); err != nil {
		return err
	}

	if m.OverloadedStorageDetection != nil {
		if err := m.OverloadedStorageDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overloadedStorageDetection")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateSlowPhysicalStorageDetection(formats strfmt.Registry) error {

	if err := validate.Required("slowPhysicalStorageDetection", "body", m.SlowPhysicalStorageDetection); err != nil {
		return err
	}

	if m.SlowPhysicalStorageDetection != nil {
		if err := m.SlowPhysicalStorageDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slowPhysicalStorageDetection")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareAnomalyDetectionConfig) validateUndersizedStorageDetection(formats strfmt.Registry) error {

	if err := validate.Required("undersizedStorageDetection", "body", m.UndersizedStorageDetection); err != nil {
		return err
	}

	if m.UndersizedStorageDetection != nil {
		if err := m.UndersizedStorageDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("undersizedStorageDetection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMwareAnomalyDetectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareAnomalyDetectionConfig) UnmarshalBinary(b []byte) error {
	var res VMwareAnomalyDetectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
