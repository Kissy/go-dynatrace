// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialsResponseElement Metadata of the credentials set.
// swagger:model CredentialsResponseElement
type CredentialsResponseElement struct {

	// A short description of the credentials set.
	// Required: true
	Description *string `json:"description"`

	// The ID of the credentials set.
	ID string `json:"id,omitempty"`

	// The name of the credentials set.
	// Required: true
	Name *string `json:"name"`

	// The owner of the credential.
	// Required: true
	Owner *string `json:"owner"`

	// Flag indicating that this credential is visible only to the owner.
	// Required: true
	OwnerAccessOnly *bool `json:"ownerAccessOnly"`

	// The type of the credentials set.
	// Required: true
	// Enum: [CERTIFICATE TOKEN UNKNOWN USERNAME_PASSWORD]
	Type *string `json:"type"`
}

// Validate validates this credentials response element
func (m *CredentialsResponseElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerAccessOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsResponseElement) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CredentialsResponseElement) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CredentialsResponseElement) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *CredentialsResponseElement) validateOwnerAccessOnly(formats strfmt.Registry) error {

	if err := validate.Required("ownerAccessOnly", "body", m.OwnerAccessOnly); err != nil {
		return err
	}

	return nil
}

var credentialsResponseElementTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CERTIFICATE","TOKEN","UNKNOWN","USERNAME_PASSWORD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialsResponseElementTypeTypePropEnum = append(credentialsResponseElementTypeTypePropEnum, v)
	}
}

const (

	// CredentialsResponseElementTypeCERTIFICATE captures enum value "CERTIFICATE"
	CredentialsResponseElementTypeCERTIFICATE string = "CERTIFICATE"

	// CredentialsResponseElementTypeTOKEN captures enum value "TOKEN"
	CredentialsResponseElementTypeTOKEN string = "TOKEN"

	// CredentialsResponseElementTypeUNKNOWN captures enum value "UNKNOWN"
	CredentialsResponseElementTypeUNKNOWN string = "UNKNOWN"

	// CredentialsResponseElementTypeUSERNAMEPASSWORD captures enum value "USERNAME_PASSWORD"
	CredentialsResponseElementTypeUSERNAMEPASSWORD string = "USERNAME_PASSWORD"
)

// prop value enum
func (m *CredentialsResponseElement) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, credentialsResponseElementTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CredentialsResponseElement) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialsResponseElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialsResponseElement) UnmarshalBinary(b []byte) error {
	var res CredentialsResponseElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
