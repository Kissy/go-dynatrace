// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardReport Configuration of a dashboard report.
//
// The dashboard report provides a public link to the associated dashboard with a custom reporting period: last week for weekly subscribers or last month for monthly subscribers.
// swagger:model DashboardReport
type DashboardReport struct {

	// The ID of the associated dashboard.
	// Required: true
	DashboardID *string `json:"dashboardId"`

	// The email notifications for the dashboard report are enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled,omitempty"`

	// The ID of the report.
	ID string `json:"id,omitempty"`

	// A list of the report subscribers.
	// Required: true
	Subscriptions *DashboardReportSubscription `json:"subscriptions"`

	// type
	// Required: true
	// Enum: [DASHBOARD]
	Type *string `json:"type"`
}

// Validate validates this dashboard report
func (m *DashboardReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboardID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardReport) validateDashboardID(formats strfmt.Registry) error {

	if err := validate.Required("dashboardId", "body", m.DashboardID); err != nil {
		return err
	}

	return nil
}

func (m *DashboardReport) validateSubscriptions(formats strfmt.Registry) error {

	if err := validate.Required("subscriptions", "body", m.Subscriptions); err != nil {
		return err
	}

	if m.Subscriptions != nil {
		if err := m.Subscriptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscriptions")
			}
			return err
		}
	}

	return nil
}

var dashboardReportTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DASHBOARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardReportTypeTypePropEnum = append(dashboardReportTypeTypePropEnum, v)
	}
}

const (

	// DashboardReportTypeDASHBOARD captures enum value "DASHBOARD"
	DashboardReportTypeDASHBOARD string = "DASHBOARD"
)

// prop value enum
func (m *DashboardReport) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dashboardReportTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DashboardReport) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardReport) UnmarshalBinary(b []byte) error {
	var res DashboardReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
