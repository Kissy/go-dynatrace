// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ColumnDefinition Definition of numeric column.
// swagger:discriminator ColumnDefinition type
type ColumnDefinition interface {
	runtime.Validatable

	// name
	// Required: true
	// Min Length: 1
	Name() *string
	SetName(*string)

	// Defines the actual set of fields depending on the value:
	//
	// CUSTOM -> CustomColumnDefinition
	// JSON -> JsonColumnDefinition
	//
	// Required: true
	// Enum: [CUSTOM JSON]
	Type() string
	SetType(string)
}

type columnDefinition struct {
	nameField *string

	typeField string
}

// Name gets the name of this polymorphic type
func (m *columnDefinition) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *columnDefinition) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this polymorphic type
func (m *columnDefinition) Type() string {
	return "ColumnDefinition"
}

// SetType sets the type of this polymorphic type
func (m *columnDefinition) SetType(val string) {

}

// UnmarshalColumnDefinitionSlice unmarshals polymorphic slices of ColumnDefinition
func UnmarshalColumnDefinitionSlice(reader io.Reader, consumer runtime.Consumer) ([]ColumnDefinition, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ColumnDefinition
	for _, element := range elements {
		obj, err := unmarshalColumnDefinition(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalColumnDefinition unmarshals polymorphic ColumnDefinition
func UnmarshalColumnDefinition(reader io.Reader, consumer runtime.Consumer) (ColumnDefinition, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalColumnDefinition(data, consumer)
}

func unmarshalColumnDefinition(data []byte, consumer runtime.Consumer) (ColumnDefinition, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "ColumnDefinition":
		var result columnDefinition
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "CustomColumnDefinition":
		var result CustomColumnDefinition
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "JsonColumnDefinition":
		var result JSONColumnDefinition
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}

// Validate validates this column definition
func (m *columnDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *columnDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name()), 1); err != nil {
		return err
	}

	return nil
}

var columnDefinitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CUSTOM","JSON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		columnDefinitionTypeTypePropEnum = append(columnDefinitionTypeTypePropEnum, v)
	}
}

const (

	// ColumnDefinitionTypeCUSTOM captures enum value "CUSTOM"
	ColumnDefinitionTypeCUSTOM string = "CUSTOM"

	// ColumnDefinitionTypeJSON captures enum value "JSON"
	ColumnDefinitionTypeJSON string = "JSON"
)

// prop value enum
func (m *columnDefinition) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, columnDefinitionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}
