// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DroppedPacketsThresholds Custom thresholds for high number of dropped packets. If not set then the automatic mode is used.
// swagger:model DroppedPacketsThresholds
type DroppedPacketsThresholds struct {

	// Alert if receive/transmit dropped packets rate on NIC is higher than *X* packets per second in 3 out of 5 samples.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	DroppedPacketsPerSecond *int32 `json:"droppedPacketsPerSecond"`
}

// Validate validates this dropped packets thresholds
func (m *DroppedPacketsThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDroppedPacketsPerSecond(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DroppedPacketsThresholds) validateDroppedPacketsPerSecond(formats strfmt.Registry) error {

	if err := validate.Required("droppedPacketsPerSecond", "body", m.DroppedPacketsPerSecond); err != nil {
		return err
	}

	if err := validate.MinimumInt("droppedPacketsPerSecond", "body", int64(*m.DroppedPacketsPerSecond), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("droppedPacketsPerSecond", "body", int64(*m.DroppedPacketsPerSecond), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DroppedPacketsThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DroppedPacketsThresholds) UnmarshalBinary(b []byte) error {
	var res DroppedPacketsThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
