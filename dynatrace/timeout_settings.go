// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeoutSettings Settings for timed action capture.
// swagger:model TimeoutSettings
type TimeoutSettings struct {

	// Defines how deep temporary actions may cascade. 0 disables temporary actions completely. Recommended value if enabled is 3.
	// Required: true
	TemporaryActionLimit *int32 `json:"temporaryActionLimit"`

	// The total timeout of all cascaded timeouts that should still be able to create a temporary action
	// Required: true
	TemporaryActionTotalTimeout *int32 `json:"temporaryActionTotalTimeout"`

	// Timed action support enabled/disabled.
	//
	// Enable to detect actions that trigger sending of XHRs via *setTimout* methods.
	// Required: true
	TimedActionSupport *bool `json:"timedActionSupport"`
}

// Validate validates this timeout settings
func (m *TimeoutSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTemporaryActionLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemporaryActionTotalTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimedActionSupport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeoutSettings) validateTemporaryActionLimit(formats strfmt.Registry) error {

	if err := validate.Required("temporaryActionLimit", "body", m.TemporaryActionLimit); err != nil {
		return err
	}

	return nil
}

func (m *TimeoutSettings) validateTemporaryActionTotalTimeout(formats strfmt.Registry) error {

	if err := validate.Required("temporaryActionTotalTimeout", "body", m.TemporaryActionTotalTimeout); err != nil {
		return err
	}

	return nil
}

func (m *TimeoutSettings) validateTimedActionSupport(formats strfmt.Registry) error {

	if err := validate.Required("timedActionSupport", "body", m.TimedActionSupport); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeoutSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeoutSettings) UnmarshalBinary(b []byte) error {
	var res TimeoutSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
