// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetectionRule detection rule
// swagger:model DetectionRule
type DetectionRule struct {

	// Additional annotations filter of the rule.
	//
	// Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented.
	//
	// Not applicable to PHP.
	Annotations []string `json:"annotations"`

	// The fully qualified class or interface to instrument.
	//
	// Required for Java and .NET custom services.
	//
	//  Not applicable to PHP.
	ClassName string `json:"className,omitempty"`

	// Rule enabled/disabled.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The PHP file containing the class or methods to instrument.
	//
	// Required for PHP custom service.
	//
	//  Not applicable to Java and .NET.
	FileName string `json:"fileName,omitempty"`

	// Matcher applying to the file name. Default value is `ENDS_WITH` (if applicable).
	// Enum: [ENDS_WITH EQUALS STARTS_WITH]
	FileNameMatcher string `json:"fileNameMatcher,omitempty"`

	// The ID of the detection rule.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Matcher applying to the class name. `STARTS_WITH` can only be used if there is at least one annotation defined. Default value is `EQUALS`.
	// Enum: [ENDS_WITH EQUALS STARTS_WITH]
	Matcher string `json:"matcher,omitempty"`

	// List of methods to instrument.
	// Required: true
	// Max Items: 2000
	// Min Items: 1
	MethodRules []*MethodRule `json:"methodRules"`
}

// Validate validates this detection rule
func (m *DetectionRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileNameMatcher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatcher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethodRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectionRule) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var detectionRuleTypeFileNameMatcherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENDS_WITH","EQUALS","STARTS_WITH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detectionRuleTypeFileNameMatcherPropEnum = append(detectionRuleTypeFileNameMatcherPropEnum, v)
	}
}

const (

	// DetectionRuleFileNameMatcherENDSWITH captures enum value "ENDS_WITH"
	DetectionRuleFileNameMatcherENDSWITH string = "ENDS_WITH"

	// DetectionRuleFileNameMatcherEQUALS captures enum value "EQUALS"
	DetectionRuleFileNameMatcherEQUALS string = "EQUALS"

	// DetectionRuleFileNameMatcherSTARTSWITH captures enum value "STARTS_WITH"
	DetectionRuleFileNameMatcherSTARTSWITH string = "STARTS_WITH"
)

// prop value enum
func (m *DetectionRule) validateFileNameMatcherEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detectionRuleTypeFileNameMatcherPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetectionRule) validateFileNameMatcher(formats strfmt.Registry) error {

	if swag.IsZero(m.FileNameMatcher) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileNameMatcherEnum("fileNameMatcher", "body", m.FileNameMatcher); err != nil {
		return err
	}

	return nil
}

func (m *DetectionRule) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var detectionRuleTypeMatcherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENDS_WITH","EQUALS","STARTS_WITH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detectionRuleTypeMatcherPropEnum = append(detectionRuleTypeMatcherPropEnum, v)
	}
}

const (

	// DetectionRuleMatcherENDSWITH captures enum value "ENDS_WITH"
	DetectionRuleMatcherENDSWITH string = "ENDS_WITH"

	// DetectionRuleMatcherEQUALS captures enum value "EQUALS"
	DetectionRuleMatcherEQUALS string = "EQUALS"

	// DetectionRuleMatcherSTARTSWITH captures enum value "STARTS_WITH"
	DetectionRuleMatcherSTARTSWITH string = "STARTS_WITH"
)

// prop value enum
func (m *DetectionRule) validateMatcherEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, detectionRuleTypeMatcherPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DetectionRule) validateMatcher(formats strfmt.Registry) error {

	if swag.IsZero(m.Matcher) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatcherEnum("matcher", "body", m.Matcher); err != nil {
		return err
	}

	return nil
}

func (m *DetectionRule) validateMethodRules(formats strfmt.Registry) error {

	if err := validate.Required("methodRules", "body", m.MethodRules); err != nil {
		return err
	}

	iMethodRulesSize := int64(len(m.MethodRules))

	if err := validate.MinItems("methodRules", "body", iMethodRulesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("methodRules", "body", iMethodRulesSize, 2000); err != nil {
		return err
	}

	for i := 0; i < len(m.MethodRules); i++ {
		if swag.IsZero(m.MethodRules[i]) { // not required
			continue
		}

		if m.MethodRules[i] != nil {
			if err := m.MethodRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("methodRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetectionRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetectionRule) UnmarshalBinary(b []byte) error {
	var res DetectionRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
