// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPAddressRange Ip address range that can be specified as single ip address, addresses (from) and address to or address and subnet mask.
// swagger:model IpAddressRange
type IPAddressRange struct {

	// The ip address
	// Required: true
	Address *string `json:"address"`

	// The ip address to
	AddressTo string `json:"addressTo,omitempty"`

	// The subnet of the ip address range settings
	// Maximum: 128
	// Minimum: 0
	SubnetMask *int32 `json:"subnetMask,omitempty"`
}

// Validate validates this Ip address range
func (m *IPAddressRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddressRange) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressRange) validateSubnetMask(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetMask) { // not required
		return nil
	}

	if err := validate.MinimumInt("subnetMask", "body", int64(*m.SubnetMask), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("subnetMask", "body", int64(*m.SubnetMask), 128, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAddressRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddressRange) UnmarshalBinary(b []byte) error {
	var res IPAddressRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
