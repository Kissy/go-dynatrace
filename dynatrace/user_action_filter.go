// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserActionFilter user action filter
// swagger:model UserActionFilter
type UserActionFilter struct {

	// Filter by user actions with an action duration >= this value
	ActionDurationFromMilliseconds int32 `json:"actionDurationFromMilliseconds,omitempty"`

	// Filter by user actions with an action duration <= this value
	ActionDurationToMilliseconds int32 `json:"actionDurationToMilliseconds,omitempty"`

	// Filter by Apdex
	// Enum: [Frustrated Satisfied Tolerating Unknown]
	Apdex string `json:"apdex,omitempty"`

	// Filter by browser family
	BrowserFamily string `json:"browserFamily,omitempty"`

	// Filter by browser family
	BrowserType string `json:"browserType,omitempty"`

	// Filter by browser version
	BrowserVersion string `json:"browserVersion,omitempty"`

	// Filter by city
	City string `json:"city,omitempty"`

	// Filter by continent
	Continent string `json:"continent,omitempty"`

	// Filter by country
	Country string `json:"country,omitempty"`

	// Filter by CustomActions
	CustomAction bool `json:"customAction,omitempty"`

	// Filter by domain
	Domain string `json:"domain,omitempty"`

	// Filter by any error
	HasAnyError bool `json:"hasAnyError,omitempty"`

	// Filter by custom errors
	HasCustomErrors bool `json:"hasCustomErrors,omitempty"`

	// Filter by http errors
	HasHTTPErrors bool `json:"hasHttpErrors,omitempty"`

	// Filter by javascript errors
	HasJavascriptErrors bool `json:"hasJavascriptErrors,omitempty"`

	// Filter by ip
	IP string `json:"ip,omitempty"`

	// Filter by ipV6Traffic
	IPV6Traffic bool `json:"ipV6Traffic,omitempty"`

	// Filter by LoadActions
	LoadAction bool `json:"loadAction,omitempty"`

	// Filter by osFamily
	OsFamily string `json:"osFamily,omitempty"`

	// Filter by osVersion
	OsVersion string `json:"osVersion,omitempty"`

	// Filter by realUsers
	RealUser bool `json:"realUser,omitempty"`

	// Filter by region
	Region string `json:"region,omitempty"`

	// Filter by robots
	Robot bool `json:"robot,omitempty"`

	// Filter by synthetic
	Synthetic bool `json:"synthetic,omitempty"`

	// Filter by userAction name
	UserActionName string `json:"userActionName,omitempty"`

	// Filter by user action properties
	// Max Items: 10
	// Min Items: 0
	UserActionProperties []*UserActionPropertyFilter `json:"userActionProperties"`

	// Filter by XhrActions
	XhrAction bool `json:"xhrAction,omitempty"`
}

// Validate validates this user action filter
func (m *UserActionFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApdex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserActionProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userActionFilterTypeApdexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Frustrated","Satisfied","Tolerating","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionFilterTypeApdexPropEnum = append(userActionFilterTypeApdexPropEnum, v)
	}
}

const (

	// UserActionFilterApdexFrustrated captures enum value "Frustrated"
	UserActionFilterApdexFrustrated string = "Frustrated"

	// UserActionFilterApdexSatisfied captures enum value "Satisfied"
	UserActionFilterApdexSatisfied string = "Satisfied"

	// UserActionFilterApdexTolerating captures enum value "Tolerating"
	UserActionFilterApdexTolerating string = "Tolerating"

	// UserActionFilterApdexUnknown captures enum value "Unknown"
	UserActionFilterApdexUnknown string = "Unknown"
)

// prop value enum
func (m *UserActionFilter) validateApdexEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionFilterTypeApdexPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionFilter) validateApdex(formats strfmt.Registry) error {

	if swag.IsZero(m.Apdex) { // not required
		return nil
	}

	// value enum
	if err := m.validateApdexEnum("apdex", "body", m.Apdex); err != nil {
		return err
	}

	return nil
}

func (m *UserActionFilter) validateUserActionProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.UserActionProperties) { // not required
		return nil
	}

	iUserActionPropertiesSize := int64(len(m.UserActionProperties))

	if err := validate.MinItems("userActionProperties", "body", iUserActionPropertiesSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("userActionProperties", "body", iUserActionPropertiesSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.UserActionProperties); i++ {
		if swag.IsZero(m.UserActionProperties[i]) { // not required
			continue
		}

		if m.UserActionProperties[i] != nil {
			if err := m.UserActionProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userActionProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserActionFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserActionFilter) UnmarshalBinary(b []byte) error {
	var res UserActionFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
