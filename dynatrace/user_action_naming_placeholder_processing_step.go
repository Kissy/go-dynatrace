// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserActionNamingPlaceholderProcessingStep The processing step settings.
// swagger:model UserActionNamingPlaceholderProcessingStep
type UserActionNamingPlaceholderProcessingStep struct {

	// After (to be removed).
	PatternAfter string `json:"patternAfter,omitempty"`

	// If patternAfter should be the first or the last occurrence
	// Enum: [FIRST LAST]
	PatternAfterSearchType string `json:"patternAfterSearchType,omitempty"`

	// Before (to be removed).
	PatternBefore string `json:"patternBefore,omitempty"`

	// If patternBefore should be the first or the last occurrence
	// Enum: [FIRST LAST]
	PatternBeforeSearchType string `json:"patternBeforeSearchType,omitempty"`

	// Replace with.
	Replacement string `json:"replacement,omitempty"`

	// Action.
	// Required: true
	// Enum: [REPLACEMENT SUBSTRING]
	Type *string `json:"type"`
}

// Validate validates this user action naming placeholder processing step
func (m *UserActionNamingPlaceholderProcessingStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePatternAfterSearchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatternBeforeSearchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userActionNamingPlaceholderProcessingStepTypePatternAfterSearchTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FIRST","LAST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionNamingPlaceholderProcessingStepTypePatternAfterSearchTypePropEnum = append(userActionNamingPlaceholderProcessingStepTypePatternAfterSearchTypePropEnum, v)
	}
}

const (

	// UserActionNamingPlaceholderProcessingStepPatternAfterSearchTypeFIRST captures enum value "FIRST"
	UserActionNamingPlaceholderProcessingStepPatternAfterSearchTypeFIRST string = "FIRST"

	// UserActionNamingPlaceholderProcessingStepPatternAfterSearchTypeLAST captures enum value "LAST"
	UserActionNamingPlaceholderProcessingStepPatternAfterSearchTypeLAST string = "LAST"
)

// prop value enum
func (m *UserActionNamingPlaceholderProcessingStep) validatePatternAfterSearchTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionNamingPlaceholderProcessingStepTypePatternAfterSearchTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionNamingPlaceholderProcessingStep) validatePatternAfterSearchType(formats strfmt.Registry) error {

	if swag.IsZero(m.PatternAfterSearchType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePatternAfterSearchTypeEnum("patternAfterSearchType", "body", m.PatternAfterSearchType); err != nil {
		return err
	}

	return nil
}

var userActionNamingPlaceholderProcessingStepTypePatternBeforeSearchTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FIRST","LAST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionNamingPlaceholderProcessingStepTypePatternBeforeSearchTypePropEnum = append(userActionNamingPlaceholderProcessingStepTypePatternBeforeSearchTypePropEnum, v)
	}
}

const (

	// UserActionNamingPlaceholderProcessingStepPatternBeforeSearchTypeFIRST captures enum value "FIRST"
	UserActionNamingPlaceholderProcessingStepPatternBeforeSearchTypeFIRST string = "FIRST"

	// UserActionNamingPlaceholderProcessingStepPatternBeforeSearchTypeLAST captures enum value "LAST"
	UserActionNamingPlaceholderProcessingStepPatternBeforeSearchTypeLAST string = "LAST"
)

// prop value enum
func (m *UserActionNamingPlaceholderProcessingStep) validatePatternBeforeSearchTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionNamingPlaceholderProcessingStepTypePatternBeforeSearchTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionNamingPlaceholderProcessingStep) validatePatternBeforeSearchType(formats strfmt.Registry) error {

	if swag.IsZero(m.PatternBeforeSearchType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePatternBeforeSearchTypeEnum("patternBeforeSearchType", "body", m.PatternBeforeSearchType); err != nil {
		return err
	}

	return nil
}

var userActionNamingPlaceholderProcessingStepTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REPLACEMENT","SUBSTRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionNamingPlaceholderProcessingStepTypeTypePropEnum = append(userActionNamingPlaceholderProcessingStepTypeTypePropEnum, v)
	}
}

const (

	// UserActionNamingPlaceholderProcessingStepTypeREPLACEMENT captures enum value "REPLACEMENT"
	UserActionNamingPlaceholderProcessingStepTypeREPLACEMENT string = "REPLACEMENT"

	// UserActionNamingPlaceholderProcessingStepTypeSUBSTRING captures enum value "SUBSTRING"
	UserActionNamingPlaceholderProcessingStepTypeSUBSTRING string = "SUBSTRING"
)

// prop value enum
func (m *UserActionNamingPlaceholderProcessingStep) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionNamingPlaceholderProcessingStepTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionNamingPlaceholderProcessingStep) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserActionNamingPlaceholderProcessingStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserActionNamingPlaceholderProcessingStep) UnmarshalBinary(b []byte) error {
	var res UserActionNamingPlaceholderProcessingStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
