// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FailureRateIncreaseThresholdConfig Fixed thresholds for failure rate increase detection.
//
//  Required if **detectionMode** is `DETECT_USING_FIXED_THRESHOLDS`. Not applicable otherwise.
// swagger:model FailureRateIncreaseThresholdConfig
type FailureRateIncreaseThresholdConfig struct {

	// Sensitivity of the threshold.
	//
	// With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.
	//
	// With `high` sensitivity, no statistical confidence is used. Each violation triggers alert.
	// Required: true
	// Enum: [HIGH LOW MEDIUM]
	Sensitivity *string `json:"sensitivity"`

	// Failure rate during any 5-minute period to trigger an alert, %.
	// Required: true
	// Maximum: 1000
	// Minimum: 0
	Threshold *int32 `json:"threshold"`
}

// Validate validates this failure rate increase threshold config
func (m *FailureRateIncreaseThresholdConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSensitivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var failureRateIncreaseThresholdConfigTypeSensitivityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HIGH","LOW","MEDIUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		failureRateIncreaseThresholdConfigTypeSensitivityPropEnum = append(failureRateIncreaseThresholdConfigTypeSensitivityPropEnum, v)
	}
}

const (

	// FailureRateIncreaseThresholdConfigSensitivityHIGH captures enum value "HIGH"
	FailureRateIncreaseThresholdConfigSensitivityHIGH string = "HIGH"

	// FailureRateIncreaseThresholdConfigSensitivityLOW captures enum value "LOW"
	FailureRateIncreaseThresholdConfigSensitivityLOW string = "LOW"

	// FailureRateIncreaseThresholdConfigSensitivityMEDIUM captures enum value "MEDIUM"
	FailureRateIncreaseThresholdConfigSensitivityMEDIUM string = "MEDIUM"
)

// prop value enum
func (m *FailureRateIncreaseThresholdConfig) validateSensitivityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, failureRateIncreaseThresholdConfigTypeSensitivityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FailureRateIncreaseThresholdConfig) validateSensitivity(formats strfmt.Registry) error {

	if err := validate.Required("sensitivity", "body", m.Sensitivity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSensitivityEnum("sensitivity", "body", *m.Sensitivity); err != nil {
		return err
	}

	return nil
}

func (m *FailureRateIncreaseThresholdConfig) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	if err := validate.MinimumInt("threshold", "body", int64(*m.Threshold), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("threshold", "body", int64(*m.Threshold), 1000, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FailureRateIncreaseThresholdConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FailureRateIncreaseThresholdConfig) UnmarshalBinary(b []byte) error {
	var res FailureRateIncreaseThresholdConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
