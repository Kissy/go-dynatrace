// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PluginState The state of the plugin.
// swagger:model PluginState
type PluginState struct {

	// The ID of the endpoint where the state is detected - Active Gate only.
	EndpointID string `json:"endpointId,omitempty"`

	// The ID of the host on which the plugin runs.
	HostID string `json:"hostId,omitempty"`

	// The ID of the plugin.
	PluginID string `json:"pluginId,omitempty"`

	// The ID of the entity on which the plugin is active.
	ProcessID string `json:"processId,omitempty"`

	// The state of the plugin.
	// Enum: [DISABLED ERROR_AUTH ERROR_COMMUNICATION_FAILURE ERROR_CONFIG ERROR_TIMEOUT ERROR_UNKNOWN INCOMPATIBLE LIMIT_REACHED NOTHING_TO_REPORT OK STATE_TYPE_UNKNOWN UNINITIALIZED UNSUPPORTED WAITING_FOR_STATE]
	State string `json:"state,omitempty"`

	// A short description of the state.
	StateDescription string `json:"stateDescription,omitempty"`

	// The timestamp when the state was detected, in UTC milliseconds.
	Timestamp int64 `json:"timestamp,omitempty"`

	// The version of the plugin (for example `1.0.0`).
	Version string `json:"version,omitempty"`
}

// Validate validates this plugin state
func (m *PluginState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pluginStateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISABLED","ERROR_AUTH","ERROR_COMMUNICATION_FAILURE","ERROR_CONFIG","ERROR_TIMEOUT","ERROR_UNKNOWN","INCOMPATIBLE","LIMIT_REACHED","NOTHING_TO_REPORT","OK","STATE_TYPE_UNKNOWN","UNINITIALIZED","UNSUPPORTED","WAITING_FOR_STATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginStateTypeStatePropEnum = append(pluginStateTypeStatePropEnum, v)
	}
}

const (

	// PluginStateStateDISABLED captures enum value "DISABLED"
	PluginStateStateDISABLED string = "DISABLED"

	// PluginStateStateERRORAUTH captures enum value "ERROR_AUTH"
	PluginStateStateERRORAUTH string = "ERROR_AUTH"

	// PluginStateStateERRORCOMMUNICATIONFAILURE captures enum value "ERROR_COMMUNICATION_FAILURE"
	PluginStateStateERRORCOMMUNICATIONFAILURE string = "ERROR_COMMUNICATION_FAILURE"

	// PluginStateStateERRORCONFIG captures enum value "ERROR_CONFIG"
	PluginStateStateERRORCONFIG string = "ERROR_CONFIG"

	// PluginStateStateERRORTIMEOUT captures enum value "ERROR_TIMEOUT"
	PluginStateStateERRORTIMEOUT string = "ERROR_TIMEOUT"

	// PluginStateStateERRORUNKNOWN captures enum value "ERROR_UNKNOWN"
	PluginStateStateERRORUNKNOWN string = "ERROR_UNKNOWN"

	// PluginStateStateINCOMPATIBLE captures enum value "INCOMPATIBLE"
	PluginStateStateINCOMPATIBLE string = "INCOMPATIBLE"

	// PluginStateStateLIMITREACHED captures enum value "LIMIT_REACHED"
	PluginStateStateLIMITREACHED string = "LIMIT_REACHED"

	// PluginStateStateNOTHINGTOREPORT captures enum value "NOTHING_TO_REPORT"
	PluginStateStateNOTHINGTOREPORT string = "NOTHING_TO_REPORT"

	// PluginStateStateOK captures enum value "OK"
	PluginStateStateOK string = "OK"

	// PluginStateStateSTATETYPEUNKNOWN captures enum value "STATE_TYPE_UNKNOWN"
	PluginStateStateSTATETYPEUNKNOWN string = "STATE_TYPE_UNKNOWN"

	// PluginStateStateUNINITIALIZED captures enum value "UNINITIALIZED"
	PluginStateStateUNINITIALIZED string = "UNINITIALIZED"

	// PluginStateStateUNSUPPORTED captures enum value "UNSUPPORTED"
	PluginStateStateUNSUPPORTED string = "UNSUPPORTED"

	// PluginStateStateWAITINGFORSTATE captures enum value "WAITING_FOR_STATE"
	PluginStateStateWAITINGFORSTATE string = "WAITING_FOR_STATE"
)

// prop value enum
func (m *PluginState) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pluginStateTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PluginState) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginState) UnmarshalBinary(b []byte) error {
	var res PluginState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
