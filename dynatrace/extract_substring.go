// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtractSubstring extract substring
// swagger:model ExtractSubstring
type ExtractSubstring struct {

	// The delimiter string.
	// Required: true
	Delimiter *string `json:"delimiter"`

	// The end-delimiter string.
	//
	//  Required if the **position** value is `BETWEEN`. Otherwise not allowed.
	EndDelimiter string `json:"endDelimiter,omitempty"`

	// The position of the extracted string relative to delimiters.
	// Required: true
	// Enum: [AFTER BEFORE BETWEEN]
	Position *string `json:"position"`
}

// Validate validates this extract substring
func (m *ExtractSubstring) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelimiter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtractSubstring) validateDelimiter(formats strfmt.Registry) error {

	if err := validate.Required("delimiter", "body", m.Delimiter); err != nil {
		return err
	}

	return nil
}

var extractSubstringTypePositionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AFTER","BEFORE","BETWEEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extractSubstringTypePositionPropEnum = append(extractSubstringTypePositionPropEnum, v)
	}
}

const (

	// ExtractSubstringPositionAFTER captures enum value "AFTER"
	ExtractSubstringPositionAFTER string = "AFTER"

	// ExtractSubstringPositionBEFORE captures enum value "BEFORE"
	ExtractSubstringPositionBEFORE string = "BEFORE"

	// ExtractSubstringPositionBETWEEN captures enum value "BETWEEN"
	ExtractSubstringPositionBETWEEN string = "BETWEEN"
)

// prop value enum
func (m *ExtractSubstring) validatePositionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, extractSubstringTypePositionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtractSubstring) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	// value enum
	if err := m.validatePositionEnum("position", "body", *m.Position); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtractSubstring) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtractSubstring) UnmarshalBinary(b []byte) error {
	var res ExtractSubstring
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
