// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomFilterChartConfig Configuration of a custom chart.
// swagger:model CustomFilterChartConfig
type CustomFilterChartConfig struct {

	// Defines if a legend should be shown.
	LegendShown bool `json:"legendShown,omitempty"`

	// Additional information about charted metric.
	// Required: true
	ResultMetadata map[string]CustomChartingItemMetadataConfig `json:"resultMetadata"`

	// A list of charted metrics.
	// Required: true
	Series []*CustomFilterChartSeriesConfig `json:"series"`

	// The type of the chart.
	// Required: true
	// Enum: [PIE SINGLE_VALUE TIMESERIES TOP_LIST]
	Type *string `json:"type"`
}

// Validate validates this custom filter chart config
func (m *CustomFilterChartConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResultMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomFilterChartConfig) validateResultMetadata(formats strfmt.Registry) error {

	for k := range m.ResultMetadata {

		if err := validate.Required("resultMetadata"+"."+k, "body", m.ResultMetadata[k]); err != nil {
			return err
		}
		if val, ok := m.ResultMetadata[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CustomFilterChartConfig) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("series", "body", m.Series); err != nil {
		return err
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var customFilterChartConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PIE","SINGLE_VALUE","TIMESERIES","TOP_LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFilterChartConfigTypeTypePropEnum = append(customFilterChartConfigTypeTypePropEnum, v)
	}
}

const (

	// CustomFilterChartConfigTypePIE captures enum value "PIE"
	CustomFilterChartConfigTypePIE string = "PIE"

	// CustomFilterChartConfigTypeSINGLEVALUE captures enum value "SINGLE_VALUE"
	CustomFilterChartConfigTypeSINGLEVALUE string = "SINGLE_VALUE"

	// CustomFilterChartConfigTypeTIMESERIES captures enum value "TIMESERIES"
	CustomFilterChartConfigTypeTIMESERIES string = "TIMESERIES"

	// CustomFilterChartConfigTypeTOPLIST captures enum value "TOP_LIST"
	CustomFilterChartConfigTypeTOPLIST string = "TOP_LIST"
)

// prop value enum
func (m *CustomFilterChartConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customFilterChartConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomFilterChartConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomFilterChartConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomFilterChartConfig) UnmarshalBinary(b []byte) error {
	var res CustomFilterChartConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
