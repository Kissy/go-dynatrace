// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DestinationDetails Configuration of a destination-based conversion goal.
// swagger:model DestinationDetails
type DestinationDetails struct {

	// The match is case-sensitive (`true`) or (`false`).
	CaseSensitive bool `json:"caseSensitive,omitempty"`

	// The operator of the match.
	// Enum: [Begins Contains Ends]
	MatchType string `json:"matchType,omitempty"`

	// The path to be reached to hit the conversion goal.
	// Required: true
	URLOrPath *string `json:"urlOrPath"`
}

// Validate validates this destination details
func (m *DestinationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLOrPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var destinationDetailsTypeMatchTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Begins","Contains","Ends"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destinationDetailsTypeMatchTypePropEnum = append(destinationDetailsTypeMatchTypePropEnum, v)
	}
}

const (

	// DestinationDetailsMatchTypeBegins captures enum value "Begins"
	DestinationDetailsMatchTypeBegins string = "Begins"

	// DestinationDetailsMatchTypeContains captures enum value "Contains"
	DestinationDetailsMatchTypeContains string = "Contains"

	// DestinationDetailsMatchTypeEnds captures enum value "Ends"
	DestinationDetailsMatchTypeEnds string = "Ends"
)

// prop value enum
func (m *DestinationDetails) validateMatchTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, destinationDetailsTypeMatchTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DestinationDetails) validateMatchType(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatchTypeEnum("matchType", "body", m.MatchType); err != nil {
		return err
	}

	return nil
}

func (m *DestinationDetails) validateURLOrPath(formats strfmt.Registry) error {

	if err := validate.Required("urlOrPath", "body", m.URLOrPath); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinationDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinationDetails) UnmarshalBinary(b []byte) error {
	var res DestinationDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
