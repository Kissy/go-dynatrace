// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AliasQueue Define an alias for a so called base queue. This can either be a local queue owned by this queue manager, a local definition of a remote queue or a cluster queue visible but owned by another queue manager. The alias can be made visible in one or more clusters.
// swagger:model AliasQueue
type AliasQueue struct {

	// The name of the alias queue.
	// Required: true
	// Max Length: 500
	// Min Length: 1
	AliasQueue *string `json:"aliasQueue"`

	// The name of the base queue, which the alias queue should point to.
	// Required: true
	// Max Length: 500
	// Min Length: 1
	BaseQueue *string `json:"baseQueue"`

	// The alias queue is visible in these [clusters](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_7.5.0/com.ibm.mq.pro.doc/q002750_.htm). The queue manager must be part of these clusters.
	// Required: true
	// Max Items: 10000
	// Min Items: 0
	ClusterVisibility []string `json:"clusterVisibility"`
}

// Validate validates this alias queue
func (m *AliasQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAliasQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AliasQueue) validateAliasQueue(formats strfmt.Registry) error {

	if err := validate.Required("aliasQueue", "body", m.AliasQueue); err != nil {
		return err
	}

	if err := validate.MinLength("aliasQueue", "body", string(*m.AliasQueue), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("aliasQueue", "body", string(*m.AliasQueue), 500); err != nil {
		return err
	}

	return nil
}

func (m *AliasQueue) validateBaseQueue(formats strfmt.Registry) error {

	if err := validate.Required("baseQueue", "body", m.BaseQueue); err != nil {
		return err
	}

	if err := validate.MinLength("baseQueue", "body", string(*m.BaseQueue), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("baseQueue", "body", string(*m.BaseQueue), 500); err != nil {
		return err
	}

	return nil
}

func (m *AliasQueue) validateClusterVisibility(formats strfmt.Registry) error {

	if err := validate.Required("clusterVisibility", "body", m.ClusterVisibility); err != nil {
		return err
	}

	iClusterVisibilitySize := int64(len(m.ClusterVisibility))

	if err := validate.MinItems("clusterVisibility", "body", iClusterVisibilitySize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("clusterVisibility", "body", iClusterVisibilitySize, 10000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AliasQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AliasQueue) UnmarshalBinary(b []byte) error {
	var res AliasQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
