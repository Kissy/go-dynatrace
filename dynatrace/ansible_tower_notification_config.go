// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnsibleTowerNotificationConfig ansible tower notification config
// swagger:model AnsibleTowerNotificationConfig
type AnsibleTowerNotificationConfig struct {
	activeField *bool

	alertingProfileField *strfmt.UUID

	idField strfmt.UUID

	nameField *string

	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates.
	// Required: true
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate"`

	// The custom message of the notification.
	//
	//  This message will be displayed in the extra variables **Message** field of your job template.
	//
	//  You can use the following placeholders:
	// * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.
	// * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.
	// * `{PID}`: The ID of the reported problem.
	// * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.
	// * `{ProblemID}`: The display number of the reported problem.
	// * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.
	// * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.
	// * `{ProblemTitle}`: A short description of the problem.
	// * `{ProblemURL}`: The URL of the problem within Dynatrace.
	// * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`. If the problem has been merged into another problem, it has the `MERGED` value.
	// * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.
	//
	// Required: true
	// Max Length: 1000
	// Min Length: 0
	CustomMessage *string `json:"customMessage"`

	// The ID of the target Ansible Tower job template.
	// Required: true
	JobTemplateID *int32 `json:"jobTemplateID"`

	// The URL of the target Ansible Tower job template.
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	JobTemplateURL *string `json:"jobTemplateURL"`

	// The password for the Ansible Tower account.
	// Max Length: 1000
	// Min Length: 1
	Password string `json:"password,omitempty"`

	// The username of the Ansible Tower account.
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	Username *string `json:"username"`
}

// Active gets the active of this subtype
func (m *AnsibleTowerNotificationConfig) Active() *bool {
	return m.activeField
}

// SetActive sets the active of this subtype
func (m *AnsibleTowerNotificationConfig) SetActive(val *bool) {
	m.activeField = val
}

// AlertingProfile gets the alerting profile of this subtype
func (m *AnsibleTowerNotificationConfig) AlertingProfile() *strfmt.UUID {
	return m.alertingProfileField
}

// SetAlertingProfile sets the alerting profile of this subtype
func (m *AnsibleTowerNotificationConfig) SetAlertingProfile(val *strfmt.UUID) {
	m.alertingProfileField = val
}

// ID gets the id of this subtype
func (m *AnsibleTowerNotificationConfig) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *AnsibleTowerNotificationConfig) SetID(val strfmt.UUID) {
	m.idField = val
}

// Name gets the name of this subtype
func (m *AnsibleTowerNotificationConfig) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *AnsibleTowerNotificationConfig) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this subtype
func (m *AnsibleTowerNotificationConfig) Type() string {
	return "AnsibleTowerNotificationConfig"
}

// SetType sets the type of this subtype
func (m *AnsibleTowerNotificationConfig) SetType(val string) {

}

// AcceptAnyCertificate gets the accept any certificate of this subtype

// CustomMessage gets the custom message of this subtype

// JobTemplateID gets the job template ID of this subtype

// JobTemplateURL gets the job template URL of this subtype

// Password gets the password of this subtype

// Username gets the username of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AnsibleTowerNotificationConfig) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates.
		// Required: true
		AcceptAnyCertificate *bool `json:"acceptAnyCertificate"`

		// The custom message of the notification.
		//
		//  This message will be displayed in the extra variables **Message** field of your job template.
		//
		//  You can use the following placeholders:
		// * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.
		// * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.
		// * `{PID}`: The ID of the reported problem.
		// * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.
		// * `{ProblemID}`: The display number of the reported problem.
		// * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.
		// * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.
		// * `{ProblemTitle}`: A short description of the problem.
		// * `{ProblemURL}`: The URL of the problem within Dynatrace.
		// * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`. If the problem has been merged into another problem, it has the `MERGED` value.
		// * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.
		//
		// Required: true
		// Max Length: 1000
		// Min Length: 0
		CustomMessage *string `json:"customMessage"`

		// The ID of the target Ansible Tower job template.
		// Required: true
		JobTemplateID *int32 `json:"jobTemplateID"`

		// The URL of the target Ansible Tower job template.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		JobTemplateURL *string `json:"jobTemplateURL"`

		// The password for the Ansible Tower account.
		// Max Length: 1000
		// Min Length: 1
		Password string `json:"password,omitempty"`

		// The username of the Ansible Tower account.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		Username *string `json:"username"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Active *bool `json:"active"`

		AlertingProfile *strfmt.UUID `json:"alertingProfile"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AnsibleTowerNotificationConfig

	result.activeField = base.Active

	result.alertingProfileField = base.AlertingProfile

	result.idField = base.ID

	result.nameField = base.Name

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.AcceptAnyCertificate = data.AcceptAnyCertificate

	result.CustomMessage = data.CustomMessage

	result.JobTemplateID = data.JobTemplateID

	result.JobTemplateURL = data.JobTemplateURL

	result.Password = data.Password

	result.Username = data.Username

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AnsibleTowerNotificationConfig) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates.
		// Required: true
		AcceptAnyCertificate *bool `json:"acceptAnyCertificate"`

		// The custom message of the notification.
		//
		//  This message will be displayed in the extra variables **Message** field of your job template.
		//
		//  You can use the following placeholders:
		// * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.
		// * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.
		// * `{PID}`: The ID of the reported problem.
		// * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.
		// * `{ProblemID}`: The display number of the reported problem.
		// * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.
		// * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.
		// * `{ProblemTitle}`: A short description of the problem.
		// * `{ProblemURL}`: The URL of the problem within Dynatrace.
		// * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`. If the problem has been merged into another problem, it has the `MERGED` value.
		// * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.
		//
		// Required: true
		// Max Length: 1000
		// Min Length: 0
		CustomMessage *string `json:"customMessage"`

		// The ID of the target Ansible Tower job template.
		// Required: true
		JobTemplateID *int32 `json:"jobTemplateID"`

		// The URL of the target Ansible Tower job template.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		JobTemplateURL *string `json:"jobTemplateURL"`

		// The password for the Ansible Tower account.
		// Max Length: 1000
		// Min Length: 1
		Password string `json:"password,omitempty"`

		// The username of the Ansible Tower account.
		// Required: true
		// Max Length: 1000
		// Min Length: 1
		Username *string `json:"username"`
	}{

		AcceptAnyCertificate: m.AcceptAnyCertificate,

		CustomMessage: m.CustomMessage,

		JobTemplateID: m.JobTemplateID,

		JobTemplateURL: m.JobTemplateURL,

		Password: m.Password,

		Username: m.Username,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Active *bool `json:"active"`

		AlertingProfile *strfmt.UUID `json:"alertingProfile"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}{

		Active: m.Active(),

		AlertingProfile: m.AlertingProfile(),

		ID: m.ID(),

		Name: m.Name(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this ansible tower notification config
func (m *AnsibleTowerNotificationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertingProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptAnyCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTemplateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnsibleTowerNotificationConfig) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active()); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateAlertingProfile(formats strfmt.Registry) error {

	if err := validate.Required("alertingProfile", "body", m.AlertingProfile()); err != nil {
		return err
	}

	if err := validate.FormatOf("alertingProfile", "body", "uuid", m.AlertingProfile().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name()), 100); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateAcceptAnyCertificate(formats strfmt.Registry) error {

	if err := validate.Required("acceptAnyCertificate", "body", m.AcceptAnyCertificate); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateCustomMessage(formats strfmt.Registry) error {

	if err := validate.Required("customMessage", "body", m.CustomMessage); err != nil {
		return err
	}

	if err := validate.MinLength("customMessage", "body", string(*m.CustomMessage), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("customMessage", "body", string(*m.CustomMessage), 1000); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateJobTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("jobTemplateID", "body", m.JobTemplateID); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateJobTemplateURL(formats strfmt.Registry) error {

	if err := validate.Required("jobTemplateURL", "body", m.JobTemplateURL); err != nil {
		return err
	}

	if err := validate.MinLength("jobTemplateURL", "body", string(*m.JobTemplateURL), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("jobTemplateURL", "body", string(*m.JobTemplateURL), 1000); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", string(m.Password), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(m.Password), 1000); err != nil {
		return err
	}

	return nil
}

func (m *AnsibleTowerNotificationConfig) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", string(*m.Username), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", string(*m.Username), 1000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnsibleTowerNotificationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnsibleTowerNotificationConfig) UnmarshalBinary(b []byte) error {
	var res AnsibleTowerNotificationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
