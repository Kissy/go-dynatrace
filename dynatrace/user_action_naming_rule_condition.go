// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserActionNamingRuleCondition The settings of conditions for user action naming.
// swagger:model UserActionNamingRuleCondition
type UserActionNamingRuleCondition struct {

	// operand1
	// Required: true
	// Min Length: 1
	Operand1 *string `json:"operand1"`

	// operand2
	Operand2 string `json:"operand2,omitempty"`

	// operator
	// Required: true
	// Enum: [CONTAINS ENDS_WITH EQUALS IS_EMPTY IS_NOT_EMPTY NOT_CONTAINS NOT_ENDS_WITH NOT_EQUALS NOT_STARTS_WITH STARTS_WITH]
	Operator *string `json:"operator"`
}

// Validate validates this user action naming rule condition
func (m *UserActionNamingRuleCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperand1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserActionNamingRuleCondition) validateOperand1(formats strfmt.Registry) error {

	if err := validate.Required("operand1", "body", m.Operand1); err != nil {
		return err
	}

	if err := validate.MinLength("operand1", "body", string(*m.Operand1), 1); err != nil {
		return err
	}

	return nil
}

var userActionNamingRuleConditionTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONTAINS","ENDS_WITH","EQUALS","IS_EMPTY","IS_NOT_EMPTY","NOT_CONTAINS","NOT_ENDS_WITH","NOT_EQUALS","NOT_STARTS_WITH","STARTS_WITH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userActionNamingRuleConditionTypeOperatorPropEnum = append(userActionNamingRuleConditionTypeOperatorPropEnum, v)
	}
}

const (

	// UserActionNamingRuleConditionOperatorCONTAINS captures enum value "CONTAINS"
	UserActionNamingRuleConditionOperatorCONTAINS string = "CONTAINS"

	// UserActionNamingRuleConditionOperatorENDSWITH captures enum value "ENDS_WITH"
	UserActionNamingRuleConditionOperatorENDSWITH string = "ENDS_WITH"

	// UserActionNamingRuleConditionOperatorEQUALS captures enum value "EQUALS"
	UserActionNamingRuleConditionOperatorEQUALS string = "EQUALS"

	// UserActionNamingRuleConditionOperatorISEMPTY captures enum value "IS_EMPTY"
	UserActionNamingRuleConditionOperatorISEMPTY string = "IS_EMPTY"

	// UserActionNamingRuleConditionOperatorISNOTEMPTY captures enum value "IS_NOT_EMPTY"
	UserActionNamingRuleConditionOperatorISNOTEMPTY string = "IS_NOT_EMPTY"

	// UserActionNamingRuleConditionOperatorNOTCONTAINS captures enum value "NOT_CONTAINS"
	UserActionNamingRuleConditionOperatorNOTCONTAINS string = "NOT_CONTAINS"

	// UserActionNamingRuleConditionOperatorNOTENDSWITH captures enum value "NOT_ENDS_WITH"
	UserActionNamingRuleConditionOperatorNOTENDSWITH string = "NOT_ENDS_WITH"

	// UserActionNamingRuleConditionOperatorNOTEQUALS captures enum value "NOT_EQUALS"
	UserActionNamingRuleConditionOperatorNOTEQUALS string = "NOT_EQUALS"

	// UserActionNamingRuleConditionOperatorNOTSTARTSWITH captures enum value "NOT_STARTS_WITH"
	UserActionNamingRuleConditionOperatorNOTSTARTSWITH string = "NOT_STARTS_WITH"

	// UserActionNamingRuleConditionOperatorSTARTSWITH captures enum value "STARTS_WITH"
	UserActionNamingRuleConditionOperatorSTARTSWITH string = "STARTS_WITH"
)

// prop value enum
func (m *UserActionNamingRuleCondition) validateOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userActionNamingRuleConditionTypeOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserActionNamingRuleCondition) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserActionNamingRuleCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserActionNamingRuleCondition) UnmarshalBinary(b []byte) error {
	var res UserActionNamingRuleCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
