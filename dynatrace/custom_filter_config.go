// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomFilterConfig Configuration of the custom filter of a tile.
// swagger:model CustomFilterConfig
type CustomFilterConfig struct {

	// The configuration of a custom chart.
	// Required: true
	ChartConfig *CustomFilterChartConfig `json:"chartConfig"`

	// The name of the tile, set by user
	// Required: true
	CustomName *string `json:"customName"`

	// The default name of the tile
	// Required: true
	// Min Length: 1
	DefaultName *string `json:"defaultName"`

	// A list of filters, applied to specific entity types.
	// Required: true
	FiltersPerEntityType map[string]map[string][]string `json:"filtersPerEntityType"`

	// The type of the filter.
	//
	//  It shows to which entity the filter belongs.
	//
	//  Custom charts have the `MIXED` type.
	// Required: true
	// Enum: [ALB APPLICATION APPLICATION_METHOD APPMON ASG AWS_CREDENTIALS AWS_CUSTOM_SERVICE AWS_LAMBDA_FUNCTION CLOUD_APPLICATION CLOUD_APPLICATION_NAMESPACE CONTAINER_GROUP_INSTANCE CUSTOM_APPLICATION CUSTOM_DEVICES CUSTOM_SERVICES DATABASE DATABASE_KEY_REQUEST DCRUM_APPLICATION DCRUM_ENTITY DYNAMO_DB EBS EC2 ELB ENVIRONMENT ESXI EXTERNAL_SYNTHETIC_TEST GLOBAL_BACKGROUND_ACTIVITY HOST IOT KUBERNETES_CLUSTER KUBERNETES_NODE MDA_SERVICE MIXED MOBILE_APPLICATION MONITORED_ENTITY NLB PG_BACKGROUND_ACTIVITY PROBLEM PROCESS_GROUP_INSTANCE RDS REMOTE_PLUGIN SERVICE SERVICE_KEY_REQUEST SYNTHETIC_BROWSER_MONITOR SYNTHETIC_HTTPCHECK SYNTHETIC_HTTPCHECK_STEP SYNTHETIC_LOCATION SYNTHETIC_TEST SYNTHETIC_TEST_STEP UI_ENTITY VIRTUAL_MACHINE WEB_CHECK]
	Type *string `json:"type"`
}

// Validate validates this custom filter config
func (m *CustomFilterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiltersPerEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomFilterConfig) validateChartConfig(formats strfmt.Registry) error {

	if err := validate.Required("chartConfig", "body", m.ChartConfig); err != nil {
		return err
	}

	if m.ChartConfig != nil {
		if err := m.ChartConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CustomFilterConfig) validateCustomName(formats strfmt.Registry) error {

	if err := validate.Required("customName", "body", m.CustomName); err != nil {
		return err
	}

	return nil
}

func (m *CustomFilterConfig) validateDefaultName(formats strfmt.Registry) error {

	if err := validate.Required("defaultName", "body", m.DefaultName); err != nil {
		return err
	}

	if err := validate.MinLength("defaultName", "body", string(*m.DefaultName), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomFilterConfig) validateFiltersPerEntityType(formats strfmt.Registry) error {

	for k := range m.FiltersPerEntityType {

		if err := validate.Required("filtersPerEntityType"+"."+k, "body", m.FiltersPerEntityType[k]); err != nil {
			return err
		}

		for kk := range m.FiltersPerEntityType[k] {

			if err := validate.UniqueItems("filtersPerEntityType"+"."+k+"."+kk, "body", m.FiltersPerEntityType[k][kk]); err != nil {
				return err
			}

		}

	}

	return nil
}

var customFilterConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALB","APPLICATION","APPLICATION_METHOD","APPMON","ASG","AWS_CREDENTIALS","AWS_CUSTOM_SERVICE","AWS_LAMBDA_FUNCTION","CLOUD_APPLICATION","CLOUD_APPLICATION_NAMESPACE","CONTAINER_GROUP_INSTANCE","CUSTOM_APPLICATION","CUSTOM_DEVICES","CUSTOM_SERVICES","DATABASE","DATABASE_KEY_REQUEST","DCRUM_APPLICATION","DCRUM_ENTITY","DYNAMO_DB","EBS","EC2","ELB","ENVIRONMENT","ESXI","EXTERNAL_SYNTHETIC_TEST","GLOBAL_BACKGROUND_ACTIVITY","HOST","IOT","KUBERNETES_CLUSTER","KUBERNETES_NODE","MDA_SERVICE","MIXED","MOBILE_APPLICATION","MONITORED_ENTITY","NLB","PG_BACKGROUND_ACTIVITY","PROBLEM","PROCESS_GROUP_INSTANCE","RDS","REMOTE_PLUGIN","SERVICE","SERVICE_KEY_REQUEST","SYNTHETIC_BROWSER_MONITOR","SYNTHETIC_HTTPCHECK","SYNTHETIC_HTTPCHECK_STEP","SYNTHETIC_LOCATION","SYNTHETIC_TEST","SYNTHETIC_TEST_STEP","UI_ENTITY","VIRTUAL_MACHINE","WEB_CHECK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFilterConfigTypeTypePropEnum = append(customFilterConfigTypeTypePropEnum, v)
	}
}

const (

	// CustomFilterConfigTypeALB captures enum value "ALB"
	CustomFilterConfigTypeALB string = "ALB"

	// CustomFilterConfigTypeAPPLICATION captures enum value "APPLICATION"
	CustomFilterConfigTypeAPPLICATION string = "APPLICATION"

	// CustomFilterConfigTypeAPPLICATIONMETHOD captures enum value "APPLICATION_METHOD"
	CustomFilterConfigTypeAPPLICATIONMETHOD string = "APPLICATION_METHOD"

	// CustomFilterConfigTypeAPPMON captures enum value "APPMON"
	CustomFilterConfigTypeAPPMON string = "APPMON"

	// CustomFilterConfigTypeASG captures enum value "ASG"
	CustomFilterConfigTypeASG string = "ASG"

	// CustomFilterConfigTypeAWSCREDENTIALS captures enum value "AWS_CREDENTIALS"
	CustomFilterConfigTypeAWSCREDENTIALS string = "AWS_CREDENTIALS"

	// CustomFilterConfigTypeAWSCUSTOMSERVICE captures enum value "AWS_CUSTOM_SERVICE"
	CustomFilterConfigTypeAWSCUSTOMSERVICE string = "AWS_CUSTOM_SERVICE"

	// CustomFilterConfigTypeAWSLAMBDAFUNCTION captures enum value "AWS_LAMBDA_FUNCTION"
	CustomFilterConfigTypeAWSLAMBDAFUNCTION string = "AWS_LAMBDA_FUNCTION"

	// CustomFilterConfigTypeCLOUDAPPLICATION captures enum value "CLOUD_APPLICATION"
	CustomFilterConfigTypeCLOUDAPPLICATION string = "CLOUD_APPLICATION"

	// CustomFilterConfigTypeCLOUDAPPLICATIONNAMESPACE captures enum value "CLOUD_APPLICATION_NAMESPACE"
	CustomFilterConfigTypeCLOUDAPPLICATIONNAMESPACE string = "CLOUD_APPLICATION_NAMESPACE"

	// CustomFilterConfigTypeCONTAINERGROUPINSTANCE captures enum value "CONTAINER_GROUP_INSTANCE"
	CustomFilterConfigTypeCONTAINERGROUPINSTANCE string = "CONTAINER_GROUP_INSTANCE"

	// CustomFilterConfigTypeCUSTOMAPPLICATION captures enum value "CUSTOM_APPLICATION"
	CustomFilterConfigTypeCUSTOMAPPLICATION string = "CUSTOM_APPLICATION"

	// CustomFilterConfigTypeCUSTOMDEVICES captures enum value "CUSTOM_DEVICES"
	CustomFilterConfigTypeCUSTOMDEVICES string = "CUSTOM_DEVICES"

	// CustomFilterConfigTypeCUSTOMSERVICES captures enum value "CUSTOM_SERVICES"
	CustomFilterConfigTypeCUSTOMSERVICES string = "CUSTOM_SERVICES"

	// CustomFilterConfigTypeDATABASE captures enum value "DATABASE"
	CustomFilterConfigTypeDATABASE string = "DATABASE"

	// CustomFilterConfigTypeDATABASEKEYREQUEST captures enum value "DATABASE_KEY_REQUEST"
	CustomFilterConfigTypeDATABASEKEYREQUEST string = "DATABASE_KEY_REQUEST"

	// CustomFilterConfigTypeDCRUMAPPLICATION captures enum value "DCRUM_APPLICATION"
	CustomFilterConfigTypeDCRUMAPPLICATION string = "DCRUM_APPLICATION"

	// CustomFilterConfigTypeDCRUMENTITY captures enum value "DCRUM_ENTITY"
	CustomFilterConfigTypeDCRUMENTITY string = "DCRUM_ENTITY"

	// CustomFilterConfigTypeDYNAMODB captures enum value "DYNAMO_DB"
	CustomFilterConfigTypeDYNAMODB string = "DYNAMO_DB"

	// CustomFilterConfigTypeEBS captures enum value "EBS"
	CustomFilterConfigTypeEBS string = "EBS"

	// CustomFilterConfigTypeEC2 captures enum value "EC2"
	CustomFilterConfigTypeEC2 string = "EC2"

	// CustomFilterConfigTypeELB captures enum value "ELB"
	CustomFilterConfigTypeELB string = "ELB"

	// CustomFilterConfigTypeENVIRONMENT captures enum value "ENVIRONMENT"
	CustomFilterConfigTypeENVIRONMENT string = "ENVIRONMENT"

	// CustomFilterConfigTypeESXI captures enum value "ESXI"
	CustomFilterConfigTypeESXI string = "ESXI"

	// CustomFilterConfigTypeEXTERNALSYNTHETICTEST captures enum value "EXTERNAL_SYNTHETIC_TEST"
	CustomFilterConfigTypeEXTERNALSYNTHETICTEST string = "EXTERNAL_SYNTHETIC_TEST"

	// CustomFilterConfigTypeGLOBALBACKGROUNDACTIVITY captures enum value "GLOBAL_BACKGROUND_ACTIVITY"
	CustomFilterConfigTypeGLOBALBACKGROUNDACTIVITY string = "GLOBAL_BACKGROUND_ACTIVITY"

	// CustomFilterConfigTypeHOST captures enum value "HOST"
	CustomFilterConfigTypeHOST string = "HOST"

	// CustomFilterConfigTypeIOT captures enum value "IOT"
	CustomFilterConfigTypeIOT string = "IOT"

	// CustomFilterConfigTypeKUBERNETESCLUSTER captures enum value "KUBERNETES_CLUSTER"
	CustomFilterConfigTypeKUBERNETESCLUSTER string = "KUBERNETES_CLUSTER"

	// CustomFilterConfigTypeKUBERNETESNODE captures enum value "KUBERNETES_NODE"
	CustomFilterConfigTypeKUBERNETESNODE string = "KUBERNETES_NODE"

	// CustomFilterConfigTypeMDASERVICE captures enum value "MDA_SERVICE"
	CustomFilterConfigTypeMDASERVICE string = "MDA_SERVICE"

	// CustomFilterConfigTypeMIXED captures enum value "MIXED"
	CustomFilterConfigTypeMIXED string = "MIXED"

	// CustomFilterConfigTypeMOBILEAPPLICATION captures enum value "MOBILE_APPLICATION"
	CustomFilterConfigTypeMOBILEAPPLICATION string = "MOBILE_APPLICATION"

	// CustomFilterConfigTypeMONITOREDENTITY captures enum value "MONITORED_ENTITY"
	CustomFilterConfigTypeMONITOREDENTITY string = "MONITORED_ENTITY"

	// CustomFilterConfigTypeNLB captures enum value "NLB"
	CustomFilterConfigTypeNLB string = "NLB"

	// CustomFilterConfigTypePGBACKGROUNDACTIVITY captures enum value "PG_BACKGROUND_ACTIVITY"
	CustomFilterConfigTypePGBACKGROUNDACTIVITY string = "PG_BACKGROUND_ACTIVITY"

	// CustomFilterConfigTypePROBLEM captures enum value "PROBLEM"
	CustomFilterConfigTypePROBLEM string = "PROBLEM"

	// CustomFilterConfigTypePROCESSGROUPINSTANCE captures enum value "PROCESS_GROUP_INSTANCE"
	CustomFilterConfigTypePROCESSGROUPINSTANCE string = "PROCESS_GROUP_INSTANCE"

	// CustomFilterConfigTypeRDS captures enum value "RDS"
	CustomFilterConfigTypeRDS string = "RDS"

	// CustomFilterConfigTypeREMOTEPLUGIN captures enum value "REMOTE_PLUGIN"
	CustomFilterConfigTypeREMOTEPLUGIN string = "REMOTE_PLUGIN"

	// CustomFilterConfigTypeSERVICE captures enum value "SERVICE"
	CustomFilterConfigTypeSERVICE string = "SERVICE"

	// CustomFilterConfigTypeSERVICEKEYREQUEST captures enum value "SERVICE_KEY_REQUEST"
	CustomFilterConfigTypeSERVICEKEYREQUEST string = "SERVICE_KEY_REQUEST"

	// CustomFilterConfigTypeSYNTHETICBROWSERMONITOR captures enum value "SYNTHETIC_BROWSER_MONITOR"
	CustomFilterConfigTypeSYNTHETICBROWSERMONITOR string = "SYNTHETIC_BROWSER_MONITOR"

	// CustomFilterConfigTypeSYNTHETICHTTPCHECK captures enum value "SYNTHETIC_HTTPCHECK"
	CustomFilterConfigTypeSYNTHETICHTTPCHECK string = "SYNTHETIC_HTTPCHECK"

	// CustomFilterConfigTypeSYNTHETICHTTPCHECKSTEP captures enum value "SYNTHETIC_HTTPCHECK_STEP"
	CustomFilterConfigTypeSYNTHETICHTTPCHECKSTEP string = "SYNTHETIC_HTTPCHECK_STEP"

	// CustomFilterConfigTypeSYNTHETICLOCATION captures enum value "SYNTHETIC_LOCATION"
	CustomFilterConfigTypeSYNTHETICLOCATION string = "SYNTHETIC_LOCATION"

	// CustomFilterConfigTypeSYNTHETICTEST captures enum value "SYNTHETIC_TEST"
	CustomFilterConfigTypeSYNTHETICTEST string = "SYNTHETIC_TEST"

	// CustomFilterConfigTypeSYNTHETICTESTSTEP captures enum value "SYNTHETIC_TEST_STEP"
	CustomFilterConfigTypeSYNTHETICTESTSTEP string = "SYNTHETIC_TEST_STEP"

	// CustomFilterConfigTypeUIENTITY captures enum value "UI_ENTITY"
	CustomFilterConfigTypeUIENTITY string = "UI_ENTITY"

	// CustomFilterConfigTypeVIRTUALMACHINE captures enum value "VIRTUAL_MACHINE"
	CustomFilterConfigTypeVIRTUALMACHINE string = "VIRTUAL_MACHINE"

	// CustomFilterConfigTypeWEBCHECK captures enum value "WEB_CHECK"
	CustomFilterConfigTypeWEBCHECK string = "WEB_CHECK"
)

// prop value enum
func (m *CustomFilterConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customFilterConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomFilterConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomFilterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomFilterConfig) UnmarshalBinary(b []byte) error {
	var res CustomFilterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
