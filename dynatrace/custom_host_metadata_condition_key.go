// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomHostMetadataConditionKey custom host metadata condition key
// swagger:model CustomHostMetadataConditionKey
type CustomHostMetadataConditionKey struct {
	attributeField *string

	// The key of the attribute, which need dynamic keys.
	//
	// Not applicable otherwise, as the attibute itself acts as a key.
	// Required: true
	DynamicKey *CustomHostMetadataKey `json:"dynamicKey"`
}

// Attribute gets the attribute of this subtype
func (m *CustomHostMetadataConditionKey) Attribute() *string {
	return m.attributeField
}

// SetAttribute sets the attribute of this subtype
func (m *CustomHostMetadataConditionKey) SetAttribute(val *string) {
	m.attributeField = val
}

// Type gets the type of this subtype
func (m *CustomHostMetadataConditionKey) Type() string {
	return "CustomHostMetadataConditionKey"
}

// SetType sets the type of this subtype
func (m *CustomHostMetadataConditionKey) SetType(val string) {

}

// DynamicKey gets the dynamic key of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CustomHostMetadataConditionKey) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The key of the attribute, which need dynamic keys.
		//
		// Not applicable otherwise, as the attibute itself acts as a key.
		// Required: true
		DynamicKey *CustomHostMetadataKey `json:"dynamicKey"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Attribute *string `json:"attribute"`

		Type string `json:"type,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result CustomHostMetadataConditionKey

	result.attributeField = base.Attribute

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.DynamicKey = data.DynamicKey

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CustomHostMetadataConditionKey) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The key of the attribute, which need dynamic keys.
		//
		// Not applicable otherwise, as the attibute itself acts as a key.
		// Required: true
		DynamicKey *CustomHostMetadataKey `json:"dynamicKey"`
	}{

		DynamicKey: m.DynamicKey,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Attribute *string `json:"attribute"`

		Type string `json:"type,omitempty"`
	}{

		Attribute: m.Attribute(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this custom host metadata condition key
func (m *CustomHostMetadataConditionKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDynamicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customHostMetadataConditionKeyTypeAttributePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPMON_SERVER_NAME","APPMON_SYSTEM_PROFILE_NAME","AWS_ACCOUNT_ID","AWS_ACCOUNT_NAME","AWS_APPLICATION_LOAD_BALANCER_NAME","AWS_APPLICATION_LOAD_BALANCER_TAGS","AWS_AUTO_SCALING_GROUP_NAME","AWS_AUTO_SCALING_GROUP_TAGS","AWS_AVAILABILITY_ZONE_NAME","AWS_CLASSIC_LOAD_BALANCER_BACKEND_PORTS","AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS","AWS_CLASSIC_LOAD_BALANCER_NAME","AWS_CLASSIC_LOAD_BALANCER_TAGS","AWS_NETWORK_LOAD_BALANCER_NAME","AWS_NETWORK_LOAD_BALANCER_TAGS","AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME","AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT","AWS_RELATIONAL_DATABASE_SERVICE_ENGINE","AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS","AWS_RELATIONAL_DATABASE_SERVICE_NAME","AWS_RELATIONAL_DATABASE_SERVICE_PORT","AWS_RELATIONAL_DATABASE_SERVICE_TAGS","AZURE_ENTITY_NAME","AZURE_ENTITY_TAGS","AZURE_MGMT_GROUP_NAME","AZURE_MGMT_GROUP_UUID","AZURE_REGION_NAME","AZURE_SCALE_SET_NAME","AZURE_SUBSCRIPTION_NAME","AZURE_SUBSCRIPTION_UUID","AZURE_TENANT_NAME","AZURE_TENANT_UUID","AZURE_VM_NAME","BROWSER_MONITOR_NAME","BROWSER_MONITOR_TAGS","CLOUD_APPLICATION_NAME","CLOUD_APPLICATION_NAMESPACE_NAME","CLOUD_FOUNDRY_FOUNDATION_NAME","CLOUD_FOUNDRY_ORG_NAME","CUSTOM_APPLICATION_NAME","CUSTOM_APPLICATION_PLATFORM","CUSTOM_APPLICATION_TAGS","CUSTOM_APPLICATION_TYPE","CUSTOM_DEVICE_DETECTED_NAME","CUSTOM_DEVICE_DNS_ADDRESS","CUSTOM_DEVICE_GROUP_NAME","CUSTOM_DEVICE_GROUP_TAGS","CUSTOM_DEVICE_IP_ADDRESS","CUSTOM_DEVICE_METADATA","CUSTOM_DEVICE_NAME","CUSTOM_DEVICE_PORT","CUSTOM_DEVICE_TAGS","CUSTOM_DEVICE_TECHNOLOGY","DATA_CENTER_SERVICE_DECODER_TYPE","DATA_CENTER_SERVICE_IP_ADDRESS","DATA_CENTER_SERVICE_METADATA","DATA_CENTER_SERVICE_NAME","DATA_CENTER_SERVICE_PORT","DATA_CENTER_SERVICE_TAGS","DOCKER_CONTAINER_NAME","DOCKER_FULL_IMAGE_NAME","DOCKER_IMAGE_VERSION","DOCKER_STRIPPED_IMAGE_NAME","EC2_INSTANCE_AMI_ID","EC2_INSTANCE_AWS_INSTANCE_TYPE","EC2_INSTANCE_AWS_SECURITY_GROUP","EC2_INSTANCE_BEANSTALK_ENV_NAME","EC2_INSTANCE_ID","EC2_INSTANCE_NAME","EC2_INSTANCE_PRIVATE_HOST_NAME","EC2_INSTANCE_PUBLIC_HOST_NAME","EC2_INSTANCE_TAGS","ENTERPRISE_APPLICATION_DECODER_TYPE","ENTERPRISE_APPLICATION_IP_ADDRESS","ENTERPRISE_APPLICATION_METADATA","ENTERPRISE_APPLICATION_NAME","ENTERPRISE_APPLICATION_PORT","ENTERPRISE_APPLICATION_TAGS","ESXI_HOST_CLUSTER_NAME","ESXI_HOST_HARDWARE_MODEL","ESXI_HOST_HARDWARE_VENDOR","ESXI_HOST_NAME","ESXI_HOST_PRODUCT_NAME","ESXI_HOST_PRODUCT_VERSION","ESXI_HOST_TAGS","EXTERNAL_MONITOR_ENGINE_DESCRIPTION","EXTERNAL_MONITOR_ENGINE_NAME","EXTERNAL_MONITOR_ENGINE_TYPE","EXTERNAL_MONITOR_NAME","EXTERNAL_MONITOR_TAGS","GEOLOCATION_SITE_NAME","GOOGLE_CLOUD_PLATFORM_ZONE_NAME","GOOGLE_COMPUTE_INSTANCE_ID","GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE","GOOGLE_COMPUTE_INSTANCE_NAME","GOOGLE_COMPUTE_INSTANCE_PROJECT","GOOGLE_COMPUTE_INSTANCE_PROJECT_ID","GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES","HOST_AIX_LOGICAL_CPU_COUNT","HOST_AIX_SIMULTANEOUS_THREADS","HOST_AIX_VIRTUAL_CPU_COUNT","HOST_ARCHITECTURE","HOST_AWS_NAME_TAG","HOST_AZURE_COMPUTE_MODE","HOST_AZURE_SKU","HOST_AZURE_WEB_APPLICATION_HOST_NAMES","HOST_AZURE_WEB_APPLICATION_SITE_NAMES","HOST_BITNESS","HOST_BOSH_AVAILABILITY_ZONE","HOST_BOSH_DEPLOYMENT_ID","HOST_BOSH_INSTANCE_ID","HOST_BOSH_INSTANCE_NAME","HOST_BOSH_NAME","HOST_BOSH_STEMCELL_VERSION","HOST_CLOUD_TYPE","HOST_CPU_CORES","HOST_CUSTOM_METADATA","HOST_DETECTED_NAME","HOST_GROUP_ID","HOST_GROUP_NAME","HOST_HYPERVISOR_TYPE","HOST_IP_ADDRESS","HOST_KUBERNETES_LABELS","HOST_LOGICAL_CPU_CORES","HOST_NAME","HOST_ONEAGENT_CUSTOM_HOST_NAME","HOST_OS_TYPE","HOST_OS_VERSION","HOST_PAAS_MEMORY_LIMIT","HOST_PAAS_TYPE","HOST_TAGS","HOST_TECHNOLOGY","HTTP_MONITOR_NAME","HTTP_MONITOR_TAGS","KUBERNETES_CLUSTER_NAME","KUBERNETES_NODE_NAME","MOBILE_APPLICATION_NAME","MOBILE_APPLICATION_PLATFORM","MOBILE_APPLICATION_TAGS","NAME_OF_COMPUTE_NODE","OPENSTACK_ACCOUNT_NAME","OPENSTACK_ACCOUNT_PROJECT_NAME","OPENSTACK_AVAILABILITY_ZONE_NAME","OPENSTACK_PROJECT_NAME","OPENSTACK_REGION_NAME","OPENSTACK_VM_INSTANCE_TYPE","OPENSTACK_VM_NAME","OPENSTACK_VM_SECURITY_GROUP","PROCESS_GROUP_AZURE_HOST_NAME","PROCESS_GROUP_AZURE_SITE_NAME","PROCESS_GROUP_CUSTOM_METADATA","PROCESS_GROUP_DETECTED_NAME","PROCESS_GROUP_ID","PROCESS_GROUP_INSTANCE_CUSTOM_METADATA","PROCESS_GROUP_LISTEN_PORT","PROCESS_GROUP_NAME","PROCESS_GROUP_PREDEFINED_METADATA","PROCESS_GROUP_TAGS","PROCESS_GROUP_TECHNOLOGY","PROCESS_GROUP_TECHNOLOGY_EDITION","PROCESS_GROUP_TECHNOLOGY_VERSION","SERVICE_AKKA_ACTOR_SYSTEM","SERVICE_CTG_SERVICE_NAME","SERVICE_DATABASE_HOST_NAME","SERVICE_DATABASE_NAME","SERVICE_DATABASE_TOPOLOGY","SERVICE_DATABASE_VENDOR","SERVICE_DETECTED_NAME","SERVICE_ESB_APPLICATION_NAME","SERVICE_IBM_CTG_GATEWAY_URL","SERVICE_IIB_APPLICATION_NAME","SERVICE_MESSAGING_LISTENER_CLASS_NAME","SERVICE_NAME","SERVICE_PORT","SERVICE_PUBLIC_DOMAIN_NAME","SERVICE_REMOTE_ENDPOINT","SERVICE_REMOTE_SERVICE_NAME","SERVICE_TAGS","SERVICE_TECHNOLOGY","SERVICE_TECHNOLOGY_EDITION","SERVICE_TECHNOLOGY_VERSION","SERVICE_TOPOLOGY","SERVICE_TYPE","SERVICE_WEB_APPLICATION_ID","SERVICE_WEB_CONTEXT_ROOT","SERVICE_WEB_SERVER_ENDPOINT","SERVICE_WEB_SERVER_NAME","SERVICE_WEB_SERVICE_NAME","SERVICE_WEB_SERVICE_NAMESPACE","VMWARE_DATACENTER_NAME","VMWARE_VM_NAME","WEB_APPLICATION_NAME","WEB_APPLICATION_NAME_PATTERN","WEB_APPLICATION_TAGS","WEB_APPLICATION_TYPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customHostMetadataConditionKeyTypeAttributePropEnum = append(customHostMetadataConditionKeyTypeAttributePropEnum, v)
	}
}

// property enum
func (m *CustomHostMetadataConditionKey) validateAttributeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customHostMetadataConditionKeyTypeAttributePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomHostMetadataConditionKey) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("attribute", "body", m.Attribute()); err != nil {
		return err
	}

	// value enum
	if err := m.validateAttributeEnum("attribute", "body", *m.Attribute()); err != nil {
		return err
	}

	return nil
}

func (m *CustomHostMetadataConditionKey) validateDynamicKey(formats strfmt.Registry) error {

	if err := validate.Required("dynamicKey", "body", m.DynamicKey); err != nil {
		return err
	}

	if m.DynamicKey != nil {
		if err := m.DynamicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomHostMetadataConditionKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomHostMetadataConditionKey) UnmarshalBinary(b []byte) error {
	var res CustomHostMetadataConditionKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
