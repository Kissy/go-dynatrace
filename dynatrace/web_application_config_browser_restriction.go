// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebApplicationConfigBrowserRestriction Browser exclusion rules for the browsers that are to be excluded.
// swagger:model WebApplicationConfigBrowserRestriction
type WebApplicationConfigBrowserRestriction struct {

	// The type of the browser that is used.
	// Required: true
	// Enum: [ANDROID_WEBKIT BOTS_SPIDERS CHROME EDGE FIREFOX INTERNET_EXPLORER OPERA SAFARI]
	BrowserType *string `json:"browserType"`

	// The version of the browser that is used.
	BrowserVersion string `json:"browserVersion,omitempty"`

	// Compares different browsers together.
	// Enum: [EQUALS GREATER_THAN_OR_EQUAL LOWER_THAN_OR_EQUAL]
	Comparator string `json:"comparator,omitempty"`

	// The platform on which the browser is being used.
	// Enum: [ALL DESKTOP MOBILE]
	Platform string `json:"platform,omitempty"`
}

// Validate validates this web application config browser restriction
func (m *WebApplicationConfigBrowserRestriction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrowserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var webApplicationConfigBrowserRestrictionTypeBrowserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANDROID_WEBKIT","BOTS_SPIDERS","CHROME","EDGE","FIREFOX","INTERNET_EXPLORER","OPERA","SAFARI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webApplicationConfigBrowserRestrictionTypeBrowserTypePropEnum = append(webApplicationConfigBrowserRestrictionTypeBrowserTypePropEnum, v)
	}
}

const (

	// WebApplicationConfigBrowserRestrictionBrowserTypeANDROIDWEBKIT captures enum value "ANDROID_WEBKIT"
	WebApplicationConfigBrowserRestrictionBrowserTypeANDROIDWEBKIT string = "ANDROID_WEBKIT"

	// WebApplicationConfigBrowserRestrictionBrowserTypeBOTSSPIDERS captures enum value "BOTS_SPIDERS"
	WebApplicationConfigBrowserRestrictionBrowserTypeBOTSSPIDERS string = "BOTS_SPIDERS"

	// WebApplicationConfigBrowserRestrictionBrowserTypeCHROME captures enum value "CHROME"
	WebApplicationConfigBrowserRestrictionBrowserTypeCHROME string = "CHROME"

	// WebApplicationConfigBrowserRestrictionBrowserTypeEDGE captures enum value "EDGE"
	WebApplicationConfigBrowserRestrictionBrowserTypeEDGE string = "EDGE"

	// WebApplicationConfigBrowserRestrictionBrowserTypeFIREFOX captures enum value "FIREFOX"
	WebApplicationConfigBrowserRestrictionBrowserTypeFIREFOX string = "FIREFOX"

	// WebApplicationConfigBrowserRestrictionBrowserTypeINTERNETEXPLORER captures enum value "INTERNET_EXPLORER"
	WebApplicationConfigBrowserRestrictionBrowserTypeINTERNETEXPLORER string = "INTERNET_EXPLORER"

	// WebApplicationConfigBrowserRestrictionBrowserTypeOPERA captures enum value "OPERA"
	WebApplicationConfigBrowserRestrictionBrowserTypeOPERA string = "OPERA"

	// WebApplicationConfigBrowserRestrictionBrowserTypeSAFARI captures enum value "SAFARI"
	WebApplicationConfigBrowserRestrictionBrowserTypeSAFARI string = "SAFARI"
)

// prop value enum
func (m *WebApplicationConfigBrowserRestriction) validateBrowserTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webApplicationConfigBrowserRestrictionTypeBrowserTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebApplicationConfigBrowserRestriction) validateBrowserType(formats strfmt.Registry) error {

	if err := validate.Required("browserType", "body", m.BrowserType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBrowserTypeEnum("browserType", "body", *m.BrowserType); err != nil {
		return err
	}

	return nil
}

var webApplicationConfigBrowserRestrictionTypeComparatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQUALS","GREATER_THAN_OR_EQUAL","LOWER_THAN_OR_EQUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webApplicationConfigBrowserRestrictionTypeComparatorPropEnum = append(webApplicationConfigBrowserRestrictionTypeComparatorPropEnum, v)
	}
}

const (

	// WebApplicationConfigBrowserRestrictionComparatorEQUALS captures enum value "EQUALS"
	WebApplicationConfigBrowserRestrictionComparatorEQUALS string = "EQUALS"

	// WebApplicationConfigBrowserRestrictionComparatorGREATERTHANOREQUAL captures enum value "GREATER_THAN_OR_EQUAL"
	WebApplicationConfigBrowserRestrictionComparatorGREATERTHANOREQUAL string = "GREATER_THAN_OR_EQUAL"

	// WebApplicationConfigBrowserRestrictionComparatorLOWERTHANOREQUAL captures enum value "LOWER_THAN_OR_EQUAL"
	WebApplicationConfigBrowserRestrictionComparatorLOWERTHANOREQUAL string = "LOWER_THAN_OR_EQUAL"
)

// prop value enum
func (m *WebApplicationConfigBrowserRestriction) validateComparatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webApplicationConfigBrowserRestrictionTypeComparatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebApplicationConfigBrowserRestriction) validateComparator(formats strfmt.Registry) error {

	if swag.IsZero(m.Comparator) { // not required
		return nil
	}

	// value enum
	if err := m.validateComparatorEnum("comparator", "body", m.Comparator); err != nil {
		return err
	}

	return nil
}

var webApplicationConfigBrowserRestrictionTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","DESKTOP","MOBILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webApplicationConfigBrowserRestrictionTypePlatformPropEnum = append(webApplicationConfigBrowserRestrictionTypePlatformPropEnum, v)
	}
}

const (

	// WebApplicationConfigBrowserRestrictionPlatformALL captures enum value "ALL"
	WebApplicationConfigBrowserRestrictionPlatformALL string = "ALL"

	// WebApplicationConfigBrowserRestrictionPlatformDESKTOP captures enum value "DESKTOP"
	WebApplicationConfigBrowserRestrictionPlatformDESKTOP string = "DESKTOP"

	// WebApplicationConfigBrowserRestrictionPlatformMOBILE captures enum value "MOBILE"
	WebApplicationConfigBrowserRestrictionPlatformMOBILE string = "MOBILE"
)

// prop value enum
func (m *WebApplicationConfigBrowserRestriction) validatePlatformEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webApplicationConfigBrowserRestrictionTypePlatformPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebApplicationConfigBrowserRestriction) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebApplicationConfigBrowserRestriction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebApplicationConfigBrowserRestriction) UnmarshalBinary(b []byte) error {
	var res WebApplicationConfigBrowserRestriction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
