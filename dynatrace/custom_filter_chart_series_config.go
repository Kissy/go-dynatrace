// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomFilterChartSeriesConfig Configuration of a charted metric.
// swagger:model CustomFilterChartSeriesConfig
type CustomFilterChartSeriesConfig struct {

	// The charted aggregation of the metric.
	// Required: true
	// Enum: [AVG COUNT DISTINCT FASTEST10PERCENT MAX MEDIAN MIN NONE OF_INTEREST_RATIO OTHER_RATIO PERCENTILE PER_MIN SLOWEST10PERCENT SLOWEST5PERCENT SUM]
	Aggregation *string `json:"aggregation"`

	// aggregation rate
	// Enum: [HOUR MINUTE SECOND TOTAL]
	AggregationRate string `json:"aggregationRate,omitempty"`

	// Configuration of the charted metric splitting.
	// Required: true
	Dimensions []*CustomFilterChartSeriesDimensionConfig `json:"dimensions"`

	// The type of the Dynatrace entity that delivered the charted metric.
	// Required: true
	EntityType *string `json:"entityType"`

	// The name of the charted metric.
	// Required: true
	Metric *string `json:"metric"`

	// The charted percentile.
	//
	//  Only applicable if the **aggregation** is set to `PERCENTILE`.
	Percentile int64 `json:"percentile,omitempty"`

	// Sort ascending (`true`) or descending (`false`).
	SortAscending bool `json:"sortAscending,omitempty"`

	// sort column
	SortColumn bool `json:"sortColumn,omitempty"`

	// The visualization of the timeseries chart.
	// Required: true
	// Enum: [AREA BAR LINE]
	Type *string `json:"type"`
}

// Validate validates this custom filter chart series config
func (m *CustomFilterChartSeriesConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregationRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customFilterChartSeriesConfigTypeAggregationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVG","COUNT","DISTINCT","FASTEST10PERCENT","MAX","MEDIAN","MIN","NONE","OF_INTEREST_RATIO","OTHER_RATIO","PERCENTILE","PER_MIN","SLOWEST10PERCENT","SLOWEST5PERCENT","SUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFilterChartSeriesConfigTypeAggregationPropEnum = append(customFilterChartSeriesConfigTypeAggregationPropEnum, v)
	}
}

const (

	// CustomFilterChartSeriesConfigAggregationAVG captures enum value "AVG"
	CustomFilterChartSeriesConfigAggregationAVG string = "AVG"

	// CustomFilterChartSeriesConfigAggregationCOUNT captures enum value "COUNT"
	CustomFilterChartSeriesConfigAggregationCOUNT string = "COUNT"

	// CustomFilterChartSeriesConfigAggregationDISTINCT captures enum value "DISTINCT"
	CustomFilterChartSeriesConfigAggregationDISTINCT string = "DISTINCT"

	// CustomFilterChartSeriesConfigAggregationFASTEST10PERCENT captures enum value "FASTEST10PERCENT"
	CustomFilterChartSeriesConfigAggregationFASTEST10PERCENT string = "FASTEST10PERCENT"

	// CustomFilterChartSeriesConfigAggregationMAX captures enum value "MAX"
	CustomFilterChartSeriesConfigAggregationMAX string = "MAX"

	// CustomFilterChartSeriesConfigAggregationMEDIAN captures enum value "MEDIAN"
	CustomFilterChartSeriesConfigAggregationMEDIAN string = "MEDIAN"

	// CustomFilterChartSeriesConfigAggregationMIN captures enum value "MIN"
	CustomFilterChartSeriesConfigAggregationMIN string = "MIN"

	// CustomFilterChartSeriesConfigAggregationNONE captures enum value "NONE"
	CustomFilterChartSeriesConfigAggregationNONE string = "NONE"

	// CustomFilterChartSeriesConfigAggregationOFINTERESTRATIO captures enum value "OF_INTEREST_RATIO"
	CustomFilterChartSeriesConfigAggregationOFINTERESTRATIO string = "OF_INTEREST_RATIO"

	// CustomFilterChartSeriesConfigAggregationOTHERRATIO captures enum value "OTHER_RATIO"
	CustomFilterChartSeriesConfigAggregationOTHERRATIO string = "OTHER_RATIO"

	// CustomFilterChartSeriesConfigAggregationPERCENTILE captures enum value "PERCENTILE"
	CustomFilterChartSeriesConfigAggregationPERCENTILE string = "PERCENTILE"

	// CustomFilterChartSeriesConfigAggregationPERMIN captures enum value "PER_MIN"
	CustomFilterChartSeriesConfigAggregationPERMIN string = "PER_MIN"

	// CustomFilterChartSeriesConfigAggregationSLOWEST10PERCENT captures enum value "SLOWEST10PERCENT"
	CustomFilterChartSeriesConfigAggregationSLOWEST10PERCENT string = "SLOWEST10PERCENT"

	// CustomFilterChartSeriesConfigAggregationSLOWEST5PERCENT captures enum value "SLOWEST5PERCENT"
	CustomFilterChartSeriesConfigAggregationSLOWEST5PERCENT string = "SLOWEST5PERCENT"

	// CustomFilterChartSeriesConfigAggregationSUM captures enum value "SUM"
	CustomFilterChartSeriesConfigAggregationSUM string = "SUM"
)

// prop value enum
func (m *CustomFilterChartSeriesConfig) validateAggregationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customFilterChartSeriesConfigTypeAggregationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomFilterChartSeriesConfig) validateAggregation(formats strfmt.Registry) error {

	if err := validate.Required("aggregation", "body", m.Aggregation); err != nil {
		return err
	}

	// value enum
	if err := m.validateAggregationEnum("aggregation", "body", *m.Aggregation); err != nil {
		return err
	}

	return nil
}

var customFilterChartSeriesConfigTypeAggregationRatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOUR","MINUTE","SECOND","TOTAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFilterChartSeriesConfigTypeAggregationRatePropEnum = append(customFilterChartSeriesConfigTypeAggregationRatePropEnum, v)
	}
}

const (

	// CustomFilterChartSeriesConfigAggregationRateHOUR captures enum value "HOUR"
	CustomFilterChartSeriesConfigAggregationRateHOUR string = "HOUR"

	// CustomFilterChartSeriesConfigAggregationRateMINUTE captures enum value "MINUTE"
	CustomFilterChartSeriesConfigAggregationRateMINUTE string = "MINUTE"

	// CustomFilterChartSeriesConfigAggregationRateSECOND captures enum value "SECOND"
	CustomFilterChartSeriesConfigAggregationRateSECOND string = "SECOND"

	// CustomFilterChartSeriesConfigAggregationRateTOTAL captures enum value "TOTAL"
	CustomFilterChartSeriesConfigAggregationRateTOTAL string = "TOTAL"
)

// prop value enum
func (m *CustomFilterChartSeriesConfig) validateAggregationRateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customFilterChartSeriesConfigTypeAggregationRatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomFilterChartSeriesConfig) validateAggregationRate(formats strfmt.Registry) error {

	if swag.IsZero(m.AggregationRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateAggregationRateEnum("aggregationRate", "body", m.AggregationRate); err != nil {
		return err
	}

	return nil
}

func (m *CustomFilterChartSeriesConfig) validateDimensions(formats strfmt.Registry) error {

	if err := validate.Required("dimensions", "body", m.Dimensions); err != nil {
		return err
	}

	for i := 0; i < len(m.Dimensions); i++ {
		if swag.IsZero(m.Dimensions[i]) { // not required
			continue
		}

		if m.Dimensions[i] != nil {
			if err := m.Dimensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomFilterChartSeriesConfig) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *CustomFilterChartSeriesConfig) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	return nil
}

var customFilterChartSeriesConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AREA","BAR","LINE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFilterChartSeriesConfigTypeTypePropEnum = append(customFilterChartSeriesConfigTypeTypePropEnum, v)
	}
}

const (

	// CustomFilterChartSeriesConfigTypeAREA captures enum value "AREA"
	CustomFilterChartSeriesConfigTypeAREA string = "AREA"

	// CustomFilterChartSeriesConfigTypeBAR captures enum value "BAR"
	CustomFilterChartSeriesConfigTypeBAR string = "BAR"

	// CustomFilterChartSeriesConfigTypeLINE captures enum value "LINE"
	CustomFilterChartSeriesConfigTypeLINE string = "LINE"
)

// prop value enum
func (m *CustomFilterChartSeriesConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customFilterChartSeriesConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomFilterChartSeriesConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomFilterChartSeriesConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomFilterChartSeriesConfig) UnmarshalBinary(b []byte) error {
	var res CustomFilterChartSeriesConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
