// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPInRangeCompareOperation Ip in range compare operation
// swagger:model IpInRangeCompareOperation
type IPInRangeCompareOperation struct {

	// The lower boundary of the IP range.
	// Required: true
	Lower *string `json:"lower"`

	// Inverts the operation of the condition. Set to `true` to turn **IP is in range** into **IP is not in range**.
	//
	//  If not set, then `false` is used.
	Negate bool `json:"negate,omitempty"`

	// The upper boundary of the IP range.
	// Required: true
	Upper *string `json:"upper"`
}

// Type gets the type of this subtype
func (m *IPInRangeCompareOperation) Type() string {
	return "IpInRangeCompareOperation"
}

// SetType sets the type of this subtype
func (m *IPInRangeCompareOperation) SetType(val string) {

}

// Lower gets the lower of this subtype

// Negate gets the negate of this subtype

// Upper gets the upper of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *IPInRangeCompareOperation) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The lower boundary of the IP range.
		// Required: true
		Lower *string `json:"lower"`

		// Inverts the operation of the condition. Set to `true` to turn **IP is in range** into **IP is not in range**.
		//
		//  If not set, then `false` is used.
		Negate bool `json:"negate,omitempty"`

		// The upper boundary of the IP range.
		// Required: true
		Upper *string `json:"upper"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result IPInRangeCompareOperation

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Lower = data.Lower

	result.Negate = data.Negate

	result.Upper = data.Upper

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m IPInRangeCompareOperation) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The lower boundary of the IP range.
		// Required: true
		Lower *string `json:"lower"`

		// Inverts the operation of the condition. Set to `true` to turn **IP is in range** into **IP is not in range**.
		//
		//  If not set, then `false` is used.
		Negate bool `json:"negate,omitempty"`

		// The upper boundary of the IP range.
		// Required: true
		Upper *string `json:"upper"`
	}{

		Lower: m.Lower,

		Negate: m.Negate,

		Upper: m.Upper,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this Ip in range compare operation
func (m *IPInRangeCompareOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpper(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPInRangeCompareOperation) validateLower(formats strfmt.Registry) error {

	if err := validate.Required("lower", "body", m.Lower); err != nil {
		return err
	}

	return nil
}

func (m *IPInRangeCompareOperation) validateUpper(formats strfmt.Registry) error {

	if err := validate.Required("upper", "body", m.Upper); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPInRangeCompareOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPInRangeCompareOperation) UnmarshalBinary(b []byte) error {
	var res IPInRangeCompareOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
