// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversionGoal A conversion goal of the application.
// swagger:model ConversionGoal
type ConversionGoal struct {

	// Configuration for the destination-based conversion goal
	//
	//  Required if the **type** is `Destination`. Omit it otherwise.
	DestinationDetails *DestinationDetails `json:"destinationDetails,omitempty"`

	// The ID of conversion goal.
	//
	//  Omit it while creating a new conversion goal.
	ID string `json:"id,omitempty"`

	// The name of the conversion goal.
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// The type of the conversion goal.
	// Enum: [Destination UserAction VisitDuration VisitNumActions]
	Type string `json:"type,omitempty"`

	// Configuration for the user action-based conversion goal.
	//
	//  Required if the **type** is `UserAction`. Omit it otherwise.
	UserActionDetails *UserActionDetails `json:"userActionDetails,omitempty"`

	// Configuration for the visit duration-based conversion goal.
	//
	//  Required if the **type** is `VisitDuration`. Omit it otherwise.
	VisitDurationDetails *VisitDurationDetails `json:"visitDurationDetails,omitempty"`

	// Configuration for the number of user actions-based conversion goal.
	//
	//  Required if the **type** is `VisitNumActions`. Omit it otherwise.
	VisitNumActionDetails *VisitNumActionDetails `json:"visitNumActionDetails,omitempty"`
}

// Validate validates this conversion goal
func (m *ConversionGoal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserActionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisitDurationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisitNumActionDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversionGoal) validateDestinationDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationDetails) { // not required
		return nil
	}

	if m.DestinationDetails != nil {
		if err := m.DestinationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ConversionGoal) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}

var conversionGoalTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Destination","UserAction","VisitDuration","VisitNumActions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conversionGoalTypeTypePropEnum = append(conversionGoalTypeTypePropEnum, v)
	}
}

const (

	// ConversionGoalTypeDestination captures enum value "Destination"
	ConversionGoalTypeDestination string = "Destination"

	// ConversionGoalTypeUserAction captures enum value "UserAction"
	ConversionGoalTypeUserAction string = "UserAction"

	// ConversionGoalTypeVisitDuration captures enum value "VisitDuration"
	ConversionGoalTypeVisitDuration string = "VisitDuration"

	// ConversionGoalTypeVisitNumActions captures enum value "VisitNumActions"
	ConversionGoalTypeVisitNumActions string = "VisitNumActions"
)

// prop value enum
func (m *ConversionGoal) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, conversionGoalTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConversionGoal) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ConversionGoal) validateUserActionDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.UserActionDetails) { // not required
		return nil
	}

	if m.UserActionDetails != nil {
		if err := m.UserActionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userActionDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ConversionGoal) validateVisitDurationDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.VisitDurationDetails) { // not required
		return nil
	}

	if m.VisitDurationDetails != nil {
		if err := m.VisitDurationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visitDurationDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ConversionGoal) validateVisitNumActionDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.VisitNumActionDetails) { // not required
		return nil
	}

	if m.VisitNumActionDetails != nil {
		if err := m.VisitNumActionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visitNumActionDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConversionGoal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversionGoal) UnmarshalBinary(b []byte) error {
	var res ConversionGoal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
