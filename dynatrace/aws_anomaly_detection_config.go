// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsAnomalyDetectionConfig The configuration of anomaly detection for AWS.
// swagger:model AwsAnomalyDetectionConfig
type AwsAnomalyDetectionConfig struct {

	// How to detect high CPU saturation on EC2 monitoring candidate. If null, then these settings won't be changed.
	Ec2CandidateCPUSaturationDetection *Ec2CandidateCPUSaturationDetectionConfig `json:"ec2CandidateCpuSaturationDetection,omitempty"`

	// How to detect high number of backend connection errors on ELB.
	// Required: true
	ElbHighConnectionErrorsDetection *ElbHighConnectionErrorsDetectionConfig `json:"elbHighConnectionErrorsDetection"`

	// How to detect AWS Lambda high error rate.
	// Required: true
	LambdaHighErrorRateDetection *LambdaHighErrorRateDetectionConfig `json:"lambdaHighErrorRateDetection"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// How to detect high CPU utilization on RDS.
	// Required: true
	RdsHighCPUDetection *RdsHighCPUDetectionConfig `json:"rdsHighCpuDetection"`

	// How to detect DRS running out of memory.
	// Required: true
	RdsHighMemoryDetection *RdsHighMemoryDetectionConfig `json:"rdsHighMemoryDetection"`

	// How to detect high RDS write/read latency.
	// Required: true
	RdsHighWriteReadLatencyDetection *RdsHighWriteReadLatencyDetectionConfig `json:"rdsHighWriteReadLatencyDetection"`

	// How to detect low free storage space on RDS.
	// Required: true
	RdsLowStorageDetection *RdsLowStorageDetectionConfig `json:"rdsLowStorageDetection"`

	// How to detect restarts sequence on RDS.
	// Required: true
	RdsRestartsSequenceDetection *RdsRestartsSequenceDetectionConfig `json:"rdsRestartsSequenceDetection"`
}

// Validate validates this aws anomaly detection config
func (m *AwsAnomalyDetectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEc2CandidateCPUSaturationDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElbHighConnectionErrorsDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLambdaHighErrorRateDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsHighCPUDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsHighMemoryDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsHighWriteReadLatencyDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsLowStorageDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsRestartsSequenceDetection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsAnomalyDetectionConfig) validateEc2CandidateCPUSaturationDetection(formats strfmt.Registry) error {

	if swag.IsZero(m.Ec2CandidateCPUSaturationDetection) { // not required
		return nil
	}

	if m.Ec2CandidateCPUSaturationDetection != nil {
		if err := m.Ec2CandidateCPUSaturationDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ec2CandidateCpuSaturationDetection")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateElbHighConnectionErrorsDetection(formats strfmt.Registry) error {

	if err := validate.Required("elbHighConnectionErrorsDetection", "body", m.ElbHighConnectionErrorsDetection); err != nil {
		return err
	}

	if m.ElbHighConnectionErrorsDetection != nil {
		if err := m.ElbHighConnectionErrorsDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elbHighConnectionErrorsDetection")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateLambdaHighErrorRateDetection(formats strfmt.Registry) error {

	if err := validate.Required("lambdaHighErrorRateDetection", "body", m.LambdaHighErrorRateDetection); err != nil {
		return err
	}

	if m.LambdaHighErrorRateDetection != nil {
		if err := m.LambdaHighErrorRateDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lambdaHighErrorRateDetection")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateRdsHighCPUDetection(formats strfmt.Registry) error {

	if err := validate.Required("rdsHighCpuDetection", "body", m.RdsHighCPUDetection); err != nil {
		return err
	}

	if m.RdsHighCPUDetection != nil {
		if err := m.RdsHighCPUDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsHighCpuDetection")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateRdsHighMemoryDetection(formats strfmt.Registry) error {

	if err := validate.Required("rdsHighMemoryDetection", "body", m.RdsHighMemoryDetection); err != nil {
		return err
	}

	if m.RdsHighMemoryDetection != nil {
		if err := m.RdsHighMemoryDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsHighMemoryDetection")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateRdsHighWriteReadLatencyDetection(formats strfmt.Registry) error {

	if err := validate.Required("rdsHighWriteReadLatencyDetection", "body", m.RdsHighWriteReadLatencyDetection); err != nil {
		return err
	}

	if m.RdsHighWriteReadLatencyDetection != nil {
		if err := m.RdsHighWriteReadLatencyDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsHighWriteReadLatencyDetection")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateRdsLowStorageDetection(formats strfmt.Registry) error {

	if err := validate.Required("rdsLowStorageDetection", "body", m.RdsLowStorageDetection); err != nil {
		return err
	}

	if m.RdsLowStorageDetection != nil {
		if err := m.RdsLowStorageDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsLowStorageDetection")
			}
			return err
		}
	}

	return nil
}

func (m *AwsAnomalyDetectionConfig) validateRdsRestartsSequenceDetection(formats strfmt.Registry) error {

	if err := validate.Required("rdsRestartsSequenceDetection", "body", m.RdsRestartsSequenceDetection); err != nil {
		return err
	}

	if m.RdsRestartsSequenceDetection != nil {
		if err := m.RdsRestartsSequenceDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsRestartsSequenceDetection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsAnomalyDetectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsAnomalyDetectionConfig) UnmarshalBinary(b []byte) error {
	var res AwsAnomalyDetectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
