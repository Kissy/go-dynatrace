// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteEnvironmentConfigDto remote environment config dto
// swagger:model RemoteEnvironmentConfigDto
type RemoteEnvironmentConfigDto struct {

	// The display name of the remote environment.
	// Required: true
	DisplayName *string `json:"displayName"`

	// The ID of the configuration.
	ID string `json:"id,omitempty"`

	// The network scope of the remote environment:
	// * `EXTERNAL`: The remote environment is located in an another network.
	// * `INTERNAL`: The remote environment is located in the same network.
	// * `CLUSTER`: The remote environment is located in the same cluster.
	//
	// Dynatrace SaaS can only use `EXTERNAL`.
	//
	// If not set, `EXTERNAL` is used.
	// Enum: [CLUSTER EXTERNAL INTERNAL]
	NetworkScope string `json:"networkScope,omitempty"`

	// The API token granting access to the remote environment.
	//
	// The token must have the **Fetch data from a remote environment** (`RestRequestForwarding`) scope. You can create such a token only via [Tokens API](https://www.dynatrace.com/support/help/shortlink/api-tokens-post-new).
	//
	// For security reasons, GET requests return this field as `null`.
	Token string `json:"token,omitempty"`

	// The URI of the remote environment.
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	URI *string `json:"uri"`
}

// Validate validates this remote environment config dto
func (m *RemoteEnvironmentConfigDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteEnvironmentConfigDto) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

var remoteEnvironmentConfigDtoTypeNetworkScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","EXTERNAL","INTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteEnvironmentConfigDtoTypeNetworkScopePropEnum = append(remoteEnvironmentConfigDtoTypeNetworkScopePropEnum, v)
	}
}

const (

	// RemoteEnvironmentConfigDtoNetworkScopeCLUSTER captures enum value "CLUSTER"
	RemoteEnvironmentConfigDtoNetworkScopeCLUSTER string = "CLUSTER"

	// RemoteEnvironmentConfigDtoNetworkScopeEXTERNAL captures enum value "EXTERNAL"
	RemoteEnvironmentConfigDtoNetworkScopeEXTERNAL string = "EXTERNAL"

	// RemoteEnvironmentConfigDtoNetworkScopeINTERNAL captures enum value "INTERNAL"
	RemoteEnvironmentConfigDtoNetworkScopeINTERNAL string = "INTERNAL"
)

// prop value enum
func (m *RemoteEnvironmentConfigDto) validateNetworkScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, remoteEnvironmentConfigDtoTypeNetworkScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RemoteEnvironmentConfigDto) validateNetworkScope(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetworkScopeEnum("networkScope", "body", m.NetworkScope); err != nil {
		return err
	}

	return nil
}

func (m *RemoteEnvironmentConfigDto) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	if err := validate.MinLength("uri", "body", string(*m.URI), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("uri", "body", string(*m.URI), 1000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteEnvironmentConfigDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteEnvironmentConfigDto) UnmarshalBinary(b []byte) error {
	var res RemoteEnvironmentConfigDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
