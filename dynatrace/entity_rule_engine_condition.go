// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EntityRuleEngineCondition A condition defines how to execute matching logic for an entity.
// swagger:model EntityRuleEngineCondition
type EntityRuleEngineCondition struct {
	comparisonInfoField ComparisonBasic

	keyField ConditionKey
}

// ComparisonInfo gets the comparison info of this base type
func (m *EntityRuleEngineCondition) ComparisonInfo() ComparisonBasic {
	return m.comparisonInfoField
}

// SetComparisonInfo sets the comparison info of this base type
func (m *EntityRuleEngineCondition) SetComparisonInfo(val ComparisonBasic) {
	m.comparisonInfoField = val
}

// Key gets the key of this base type
func (m *EntityRuleEngineCondition) Key() ConditionKey {
	return m.keyField
}

// SetKey sets the key of this base type
func (m *EntityRuleEngineCondition) SetKey(val ConditionKey) {
	m.keyField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *EntityRuleEngineCondition) UnmarshalJSON(raw []byte) error {
	var data struct {
		ComparisonInfo json.RawMessage `json:"comparisonInfo"`

		Key json.RawMessage `json:"key"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propComparisonInfo, err := UnmarshalComparisonBasic(bytes.NewBuffer(data.ComparisonInfo), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	propKey, err := UnmarshalConditionKey(bytes.NewBuffer(data.Key), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result EntityRuleEngineCondition

	// comparisonInfo
	result.comparisonInfoField = propComparisonInfo

	// key
	result.keyField = propKey

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m EntityRuleEngineCondition) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ComparisonInfo ComparisonBasic `json:"comparisonInfo"`

		Key ConditionKey `json:"key"`
	}{

		ComparisonInfo: m.comparisonInfoField,

		Key: m.keyField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this entity rule engine condition
func (m *EntityRuleEngineCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparisonInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityRuleEngineCondition) validateComparisonInfo(formats strfmt.Registry) error {

	if err := validate.Required("comparisonInfo", "body", m.ComparisonInfo()); err != nil {
		return err
	}

	if err := m.ComparisonInfo().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("comparisonInfo")
		}
		return err
	}

	return nil
}

func (m *EntityRuleEngineCondition) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key()); err != nil {
		return err
	}

	if err := m.Key().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("key")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityRuleEngineCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityRuleEngineCondition) UnmarshalBinary(b []byte) error {
	var res EntityRuleEngineCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
