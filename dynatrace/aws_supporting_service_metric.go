// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsSupportingServiceMetric A metric of supporting service to be monitored.
// swagger:model AwsSupportingServiceMetric
type AwsSupportingServiceMetric struct {

	// A list of metric's dimensions names.
	// Required: true
	// Max Items: 2147483647
	// Min Items: 1
	Dimensions []string `json:"dimensions"`

	// The name of the metric of the supporting service.
	// Required: true
	Name *string `json:"name"`

	// The statistic (aggregation) to be used for the metric. AVG_MIN_MAX value is 3 statistics at once: AVERAGE, MINIMUM and MAXIMUM
	// Required: true
	// Enum: [AVERAGE AVG_MIN_MAX MAXIMUM MINIMUM SAMPLE_COUNT SUM]
	Statistic *string `json:"statistic"`
}

// Validate validates this aws supporting service metric
func (m *AwsSupportingServiceMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsSupportingServiceMetric) validateDimensions(formats strfmt.Registry) error {

	if err := validate.Required("dimensions", "body", m.Dimensions); err != nil {
		return err
	}

	iDimensionsSize := int64(len(m.Dimensions))

	if err := validate.MinItems("dimensions", "body", iDimensionsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("dimensions", "body", iDimensionsSize, 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *AwsSupportingServiceMetric) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var awsSupportingServiceMetricTypeStatisticPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVERAGE","AVG_MIN_MAX","MAXIMUM","MINIMUM","SAMPLE_COUNT","SUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsSupportingServiceMetricTypeStatisticPropEnum = append(awsSupportingServiceMetricTypeStatisticPropEnum, v)
	}
}

const (

	// AwsSupportingServiceMetricStatisticAVERAGE captures enum value "AVERAGE"
	AwsSupportingServiceMetricStatisticAVERAGE string = "AVERAGE"

	// AwsSupportingServiceMetricStatisticAVGMINMAX captures enum value "AVG_MIN_MAX"
	AwsSupportingServiceMetricStatisticAVGMINMAX string = "AVG_MIN_MAX"

	// AwsSupportingServiceMetricStatisticMAXIMUM captures enum value "MAXIMUM"
	AwsSupportingServiceMetricStatisticMAXIMUM string = "MAXIMUM"

	// AwsSupportingServiceMetricStatisticMINIMUM captures enum value "MINIMUM"
	AwsSupportingServiceMetricStatisticMINIMUM string = "MINIMUM"

	// AwsSupportingServiceMetricStatisticSAMPLECOUNT captures enum value "SAMPLE_COUNT"
	AwsSupportingServiceMetricStatisticSAMPLECOUNT string = "SAMPLE_COUNT"

	// AwsSupportingServiceMetricStatisticSUM captures enum value "SUM"
	AwsSupportingServiceMetricStatisticSUM string = "SUM"
)

// prop value enum
func (m *AwsSupportingServiceMetric) validateStatisticEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, awsSupportingServiceMetricTypeStatisticPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AwsSupportingServiceMetric) validateStatistic(formats strfmt.Registry) error {

	if err := validate.Required("statistic", "body", m.Statistic); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatisticEnum("statistic", "body", *m.Statistic); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsSupportingServiceMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsSupportingServiceMetric) UnmarshalBinary(b []byte) error {
	var res AwsSupportingServiceMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
