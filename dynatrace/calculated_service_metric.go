// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CalculatedServiceMetric Descriptor of a calculated service metric.
// swagger:model CalculatedServiceMetric
type CalculatedServiceMetric struct {

	// The set of conditions for the metric usage.
	//
	//  **All** the specified conditions must be fulfilled to use the metric.
	Conditions []*Condition `json:"conditions"`

	// The dimensions splitting of the metric.
	DimensionDefinition *DimensionDefinition `json:"dimensionDefinition,omitempty"`

	// The metric is enabled (`true`) or disabled (`false`).
	// Required: true
	Enabled *bool `json:"enabled"`

	// Restricts the metric usage to the specified service.
	//
	//  This field is mutually exclusive with the **managementZones** field.
	EntityID string `json:"entityId,omitempty"`

	// Restricts the metric usage to specified management zones.
	//
	//  This field is mutually exclusive with the **entityId** field.
	// Max Items: 1
	// Min Items: 0
	ManagementZones []string `json:"managementZones"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// The source of the metric.
	// Required: true
	MetricDefinition *CalculatedMetricDefinition `json:"metricDefinition"`

	// The displayed name of the metric.
	// Required: true
	// Max Length: 200
	// Min Length: 0
	Name *string `json:"name"`

	// The key of the calculated service metric.
	// Required: true
	// Max Length: 200
	// Min Length: 0
	TsmMetricKey *string `json:"tsmMetricKey"`

	// The unit of the metric.
	// Required: true
	// Enum: [BIT BIT_PER_HOUR BIT_PER_MINUTE BIT_PER_SECOND BYTE BYTE_PER_HOUR BYTE_PER_MINUTE BYTE_PER_SECOND CORES COUNT GIBI_BYTE GIGA_BYTE HOUR KIBI_BYTE KIBI_BYTE_PER_HOUR KIBI_BYTE_PER_MINUTE KIBI_BYTE_PER_SECOND KILO_BYTE KILO_BYTE_PER_HOUR KILO_BYTE_PER_MINUTE KILO_BYTE_PER_SECOND MEBI_BYTE MEBI_BYTE_PER_HOUR MEBI_BYTE_PER_MINUTE MEBI_BYTE_PER_SECOND MEGA_BYTE MEGA_BYTE_PER_HOUR MEGA_BYTE_PER_MINUTE MEGA_BYTE_PER_SECOND MICRO_SECOND MILLI_CORES MILLI_SECOND MILLI_SECOND_PER_MINUTE MINUTE NANO_SECOND NANO_SECOND_PER_MINUTE NOT_APPLICABLE PERCENT PER_HOUR PER_MINUTE PER_SECOND PROMILLE RATIO SECOND STATE UNSPECIFIED]
	Unit *string `json:"unit"`

	// The display name of the metric's unit.
	//
	//  Only applicable when the **unit** parameter is set to `UNSPECIFIED`.
	UnitDisplayName string `json:"unitDisplayName,omitempty"`
}

// Validate validates this calculated service metric
func (m *CalculatedServiceMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensionDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementZones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTsmMetricKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalculatedServiceMetric) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CalculatedServiceMetric) validateDimensionDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.DimensionDefinition) { // not required
		return nil
	}

	if m.DimensionDefinition != nil {
		if err := m.DimensionDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensionDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *CalculatedServiceMetric) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *CalculatedServiceMetric) validateManagementZones(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementZones) { // not required
		return nil
	}

	iManagementZonesSize := int64(len(m.ManagementZones))

	if err := validate.MinItems("managementZones", "body", iManagementZonesSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("managementZones", "body", iManagementZonesSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *CalculatedServiceMetric) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *CalculatedServiceMetric) validateMetricDefinition(formats strfmt.Registry) error {

	if err := validate.Required("metricDefinition", "body", m.MetricDefinition); err != nil {
		return err
	}

	if m.MetricDefinition != nil {
		if err := m.MetricDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *CalculatedServiceMetric) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 200); err != nil {
		return err
	}

	return nil
}

func (m *CalculatedServiceMetric) validateTsmMetricKey(formats strfmt.Registry) error {

	if err := validate.Required("tsmMetricKey", "body", m.TsmMetricKey); err != nil {
		return err
	}

	if err := validate.MinLength("tsmMetricKey", "body", string(*m.TsmMetricKey), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("tsmMetricKey", "body", string(*m.TsmMetricKey), 200); err != nil {
		return err
	}

	return nil
}

var calculatedServiceMetricTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BIT","BIT_PER_HOUR","BIT_PER_MINUTE","BIT_PER_SECOND","BYTE","BYTE_PER_HOUR","BYTE_PER_MINUTE","BYTE_PER_SECOND","CORES","COUNT","GIBI_BYTE","GIGA_BYTE","HOUR","KIBI_BYTE","KIBI_BYTE_PER_HOUR","KIBI_BYTE_PER_MINUTE","KIBI_BYTE_PER_SECOND","KILO_BYTE","KILO_BYTE_PER_HOUR","KILO_BYTE_PER_MINUTE","KILO_BYTE_PER_SECOND","MEBI_BYTE","MEBI_BYTE_PER_HOUR","MEBI_BYTE_PER_MINUTE","MEBI_BYTE_PER_SECOND","MEGA_BYTE","MEGA_BYTE_PER_HOUR","MEGA_BYTE_PER_MINUTE","MEGA_BYTE_PER_SECOND","MICRO_SECOND","MILLI_CORES","MILLI_SECOND","MILLI_SECOND_PER_MINUTE","MINUTE","NANO_SECOND","NANO_SECOND_PER_MINUTE","NOT_APPLICABLE","PERCENT","PER_HOUR","PER_MINUTE","PER_SECOND","PROMILLE","RATIO","SECOND","STATE","UNSPECIFIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		calculatedServiceMetricTypeUnitPropEnum = append(calculatedServiceMetricTypeUnitPropEnum, v)
	}
}

const (

	// CalculatedServiceMetricUnitBIT captures enum value "BIT"
	CalculatedServiceMetricUnitBIT string = "BIT"

	// CalculatedServiceMetricUnitBITPERHOUR captures enum value "BIT_PER_HOUR"
	CalculatedServiceMetricUnitBITPERHOUR string = "BIT_PER_HOUR"

	// CalculatedServiceMetricUnitBITPERMINUTE captures enum value "BIT_PER_MINUTE"
	CalculatedServiceMetricUnitBITPERMINUTE string = "BIT_PER_MINUTE"

	// CalculatedServiceMetricUnitBITPERSECOND captures enum value "BIT_PER_SECOND"
	CalculatedServiceMetricUnitBITPERSECOND string = "BIT_PER_SECOND"

	// CalculatedServiceMetricUnitBYTE captures enum value "BYTE"
	CalculatedServiceMetricUnitBYTE string = "BYTE"

	// CalculatedServiceMetricUnitBYTEPERHOUR captures enum value "BYTE_PER_HOUR"
	CalculatedServiceMetricUnitBYTEPERHOUR string = "BYTE_PER_HOUR"

	// CalculatedServiceMetricUnitBYTEPERMINUTE captures enum value "BYTE_PER_MINUTE"
	CalculatedServiceMetricUnitBYTEPERMINUTE string = "BYTE_PER_MINUTE"

	// CalculatedServiceMetricUnitBYTEPERSECOND captures enum value "BYTE_PER_SECOND"
	CalculatedServiceMetricUnitBYTEPERSECOND string = "BYTE_PER_SECOND"

	// CalculatedServiceMetricUnitCORES captures enum value "CORES"
	CalculatedServiceMetricUnitCORES string = "CORES"

	// CalculatedServiceMetricUnitCOUNT captures enum value "COUNT"
	CalculatedServiceMetricUnitCOUNT string = "COUNT"

	// CalculatedServiceMetricUnitGIBIBYTE captures enum value "GIBI_BYTE"
	CalculatedServiceMetricUnitGIBIBYTE string = "GIBI_BYTE"

	// CalculatedServiceMetricUnitGIGABYTE captures enum value "GIGA_BYTE"
	CalculatedServiceMetricUnitGIGABYTE string = "GIGA_BYTE"

	// CalculatedServiceMetricUnitHOUR captures enum value "HOUR"
	CalculatedServiceMetricUnitHOUR string = "HOUR"

	// CalculatedServiceMetricUnitKIBIBYTE captures enum value "KIBI_BYTE"
	CalculatedServiceMetricUnitKIBIBYTE string = "KIBI_BYTE"

	// CalculatedServiceMetricUnitKIBIBYTEPERHOUR captures enum value "KIBI_BYTE_PER_HOUR"
	CalculatedServiceMetricUnitKIBIBYTEPERHOUR string = "KIBI_BYTE_PER_HOUR"

	// CalculatedServiceMetricUnitKIBIBYTEPERMINUTE captures enum value "KIBI_BYTE_PER_MINUTE"
	CalculatedServiceMetricUnitKIBIBYTEPERMINUTE string = "KIBI_BYTE_PER_MINUTE"

	// CalculatedServiceMetricUnitKIBIBYTEPERSECOND captures enum value "KIBI_BYTE_PER_SECOND"
	CalculatedServiceMetricUnitKIBIBYTEPERSECOND string = "KIBI_BYTE_PER_SECOND"

	// CalculatedServiceMetricUnitKILOBYTE captures enum value "KILO_BYTE"
	CalculatedServiceMetricUnitKILOBYTE string = "KILO_BYTE"

	// CalculatedServiceMetricUnitKILOBYTEPERHOUR captures enum value "KILO_BYTE_PER_HOUR"
	CalculatedServiceMetricUnitKILOBYTEPERHOUR string = "KILO_BYTE_PER_HOUR"

	// CalculatedServiceMetricUnitKILOBYTEPERMINUTE captures enum value "KILO_BYTE_PER_MINUTE"
	CalculatedServiceMetricUnitKILOBYTEPERMINUTE string = "KILO_BYTE_PER_MINUTE"

	// CalculatedServiceMetricUnitKILOBYTEPERSECOND captures enum value "KILO_BYTE_PER_SECOND"
	CalculatedServiceMetricUnitKILOBYTEPERSECOND string = "KILO_BYTE_PER_SECOND"

	// CalculatedServiceMetricUnitMEBIBYTE captures enum value "MEBI_BYTE"
	CalculatedServiceMetricUnitMEBIBYTE string = "MEBI_BYTE"

	// CalculatedServiceMetricUnitMEBIBYTEPERHOUR captures enum value "MEBI_BYTE_PER_HOUR"
	CalculatedServiceMetricUnitMEBIBYTEPERHOUR string = "MEBI_BYTE_PER_HOUR"

	// CalculatedServiceMetricUnitMEBIBYTEPERMINUTE captures enum value "MEBI_BYTE_PER_MINUTE"
	CalculatedServiceMetricUnitMEBIBYTEPERMINUTE string = "MEBI_BYTE_PER_MINUTE"

	// CalculatedServiceMetricUnitMEBIBYTEPERSECOND captures enum value "MEBI_BYTE_PER_SECOND"
	CalculatedServiceMetricUnitMEBIBYTEPERSECOND string = "MEBI_BYTE_PER_SECOND"

	// CalculatedServiceMetricUnitMEGABYTE captures enum value "MEGA_BYTE"
	CalculatedServiceMetricUnitMEGABYTE string = "MEGA_BYTE"

	// CalculatedServiceMetricUnitMEGABYTEPERHOUR captures enum value "MEGA_BYTE_PER_HOUR"
	CalculatedServiceMetricUnitMEGABYTEPERHOUR string = "MEGA_BYTE_PER_HOUR"

	// CalculatedServiceMetricUnitMEGABYTEPERMINUTE captures enum value "MEGA_BYTE_PER_MINUTE"
	CalculatedServiceMetricUnitMEGABYTEPERMINUTE string = "MEGA_BYTE_PER_MINUTE"

	// CalculatedServiceMetricUnitMEGABYTEPERSECOND captures enum value "MEGA_BYTE_PER_SECOND"
	CalculatedServiceMetricUnitMEGABYTEPERSECOND string = "MEGA_BYTE_PER_SECOND"

	// CalculatedServiceMetricUnitMICROSECOND captures enum value "MICRO_SECOND"
	CalculatedServiceMetricUnitMICROSECOND string = "MICRO_SECOND"

	// CalculatedServiceMetricUnitMILLICORES captures enum value "MILLI_CORES"
	CalculatedServiceMetricUnitMILLICORES string = "MILLI_CORES"

	// CalculatedServiceMetricUnitMILLISECOND captures enum value "MILLI_SECOND"
	CalculatedServiceMetricUnitMILLISECOND string = "MILLI_SECOND"

	// CalculatedServiceMetricUnitMILLISECONDPERMINUTE captures enum value "MILLI_SECOND_PER_MINUTE"
	CalculatedServiceMetricUnitMILLISECONDPERMINUTE string = "MILLI_SECOND_PER_MINUTE"

	// CalculatedServiceMetricUnitMINUTE captures enum value "MINUTE"
	CalculatedServiceMetricUnitMINUTE string = "MINUTE"

	// CalculatedServiceMetricUnitNANOSECOND captures enum value "NANO_SECOND"
	CalculatedServiceMetricUnitNANOSECOND string = "NANO_SECOND"

	// CalculatedServiceMetricUnitNANOSECONDPERMINUTE captures enum value "NANO_SECOND_PER_MINUTE"
	CalculatedServiceMetricUnitNANOSECONDPERMINUTE string = "NANO_SECOND_PER_MINUTE"

	// CalculatedServiceMetricUnitNOTAPPLICABLE captures enum value "NOT_APPLICABLE"
	CalculatedServiceMetricUnitNOTAPPLICABLE string = "NOT_APPLICABLE"

	// CalculatedServiceMetricUnitPERCENT captures enum value "PERCENT"
	CalculatedServiceMetricUnitPERCENT string = "PERCENT"

	// CalculatedServiceMetricUnitPERHOUR captures enum value "PER_HOUR"
	CalculatedServiceMetricUnitPERHOUR string = "PER_HOUR"

	// CalculatedServiceMetricUnitPERMINUTE captures enum value "PER_MINUTE"
	CalculatedServiceMetricUnitPERMINUTE string = "PER_MINUTE"

	// CalculatedServiceMetricUnitPERSECOND captures enum value "PER_SECOND"
	CalculatedServiceMetricUnitPERSECOND string = "PER_SECOND"

	// CalculatedServiceMetricUnitPROMILLE captures enum value "PROMILLE"
	CalculatedServiceMetricUnitPROMILLE string = "PROMILLE"

	// CalculatedServiceMetricUnitRATIO captures enum value "RATIO"
	CalculatedServiceMetricUnitRATIO string = "RATIO"

	// CalculatedServiceMetricUnitSECOND captures enum value "SECOND"
	CalculatedServiceMetricUnitSECOND string = "SECOND"

	// CalculatedServiceMetricUnitSTATE captures enum value "STATE"
	CalculatedServiceMetricUnitSTATE string = "STATE"

	// CalculatedServiceMetricUnitUNSPECIFIED captures enum value "UNSPECIFIED"
	CalculatedServiceMetricUnitUNSPECIFIED string = "UNSPECIFIED"
)

// prop value enum
func (m *CalculatedServiceMetric) validateUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, calculatedServiceMetricTypeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CalculatedServiceMetric) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CalculatedServiceMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CalculatedServiceMetric) UnmarshalBinary(b []byte) error {
	var res CalculatedServiceMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
