// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataPrivacyAndSecurity data privacy and security
// swagger:model DataPrivacyAndSecurity
type DataPrivacyAndSecurity struct {

	// The audit logging is enabled (`true`) or disabled (`false`).
	LogAuditEvents bool `json:"logAuditEvents,omitempty"`

	// Mask IP addresses and GPS coordinates enabled/disabled.
	// Required: true
	MaskIPAddressesAndGpsCoordinates *bool `json:"maskIpAddressesAndGpsCoordinates"`

	// Mask personal data in URIs enabled/disabled.
	// Required: true
	MaskPersonalDataInUris *bool `json:"maskPersonalDataInUris"`

	// Mask user action names (Web applications only) enabled/disabled.
	// Required: true
	MaskUserActionNames *bool `json:"maskUserActionNames"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
}

// Validate validates this data privacy and security
func (m *DataPrivacyAndSecurity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaskIPAddressesAndGpsCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaskPersonalDataInUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaskUserActionNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataPrivacyAndSecurity) validateMaskIPAddressesAndGpsCoordinates(formats strfmt.Registry) error {

	if err := validate.Required("maskIpAddressesAndGpsCoordinates", "body", m.MaskIPAddressesAndGpsCoordinates); err != nil {
		return err
	}

	return nil
}

func (m *DataPrivacyAndSecurity) validateMaskPersonalDataInUris(formats strfmt.Registry) error {

	if err := validate.Required("maskPersonalDataInUris", "body", m.MaskPersonalDataInUris); err != nil {
		return err
	}

	return nil
}

func (m *DataPrivacyAndSecurity) validateMaskUserActionNames(formats strfmt.Registry) error {

	if err := validate.Required("maskUserActionNames", "body", m.MaskUserActionNames); err != nil {
		return err
	}

	return nil
}

func (m *DataPrivacyAndSecurity) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataPrivacyAndSecurity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataPrivacyAndSecurity) UnmarshalBinary(b []byte) error {
	var res DataPrivacyAndSecurity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
