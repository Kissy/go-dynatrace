// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EsxiHighMemoryThresholds Custom thresholds for memory saturation on ESXi host. If not set then the automatic mode is used.
// swagger:model EsxiHighMemoryThresholds
type EsxiHighMemoryThresholds struct {

	// Alert if ESXi host swap IN/OUT or compression/decompression rate is higher *X* kilobytes per second in 3 out of 5 samples.
	// Required: true
	// Maximum: 1e+06
	// Minimum: 0.01
	CompressionDecompressionRate *float64 `json:"compressionDecompressionRate"`
}

// Validate validates this esxi high memory thresholds
func (m *EsxiHighMemoryThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompressionDecompressionRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EsxiHighMemoryThresholds) validateCompressionDecompressionRate(formats strfmt.Registry) error {

	if err := validate.Required("compressionDecompressionRate", "body", m.CompressionDecompressionRate); err != nil {
		return err
	}

	if err := validate.Minimum("compressionDecompressionRate", "body", float64(*m.CompressionDecompressionRate), 0.01, false); err != nil {
		return err
	}

	if err := validate.Maximum("compressionDecompressionRate", "body", float64(*m.CompressionDecompressionRate), 1e+06, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EsxiHighMemoryThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EsxiHighMemoryThresholds) UnmarshalBinary(b []byte) error {
	var res EsxiHighMemoryThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
