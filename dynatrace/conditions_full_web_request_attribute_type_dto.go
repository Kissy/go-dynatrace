// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConditionsFullWebRequestAttributeTypeDto A condition of the service detection rule.
// swagger:model ConditionsFullWebRequestAttributeTypeDto
type ConditionsFullWebRequestAttributeTypeDto struct {

	// The type of the attribute to be checked.
	// Required: true
	// Enum: [APPLICATION_ID CONTEXT_ROOT PG_TAG SERVER_NAME URL_HOST_NAME URL_PATH]
	AttributeType *string `json:"attributeType"`

	compareOperationsField []CompareOperation
}

// CompareOperations gets the compare operations of this base type
func (m *ConditionsFullWebRequestAttributeTypeDto) CompareOperations() []CompareOperation {
	return m.compareOperationsField
}

// SetCompareOperations sets the compare operations of this base type
func (m *ConditionsFullWebRequestAttributeTypeDto) SetCompareOperations(val []CompareOperation) {
	m.compareOperationsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ConditionsFullWebRequestAttributeTypeDto) UnmarshalJSON(raw []byte) error {
	var data struct {
		AttributeType *string `json:"attributeType"`

		CompareOperations json.RawMessage `json:"compareOperations"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propCompareOperations []CompareOperation
	if string(data.CompareOperations) != "null" {
		compareOperations, err := UnmarshalCompareOperationSlice(bytes.NewBuffer(data.CompareOperations), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propCompareOperations = compareOperations
	}

	var result ConditionsFullWebRequestAttributeTypeDto

	// attributeType
	result.AttributeType = data.AttributeType

	// compareOperations
	result.compareOperationsField = propCompareOperations

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ConditionsFullWebRequestAttributeTypeDto) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		AttributeType *string `json:"attributeType"`
	}{

		AttributeType: m.AttributeType,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		CompareOperations []CompareOperation `json:"compareOperations"`
	}{

		CompareOperations: m.compareOperationsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this conditions full web request attribute type dto
func (m *ConditionsFullWebRequestAttributeTypeDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompareOperations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var conditionsFullWebRequestAttributeTypeDtoTypeAttributeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPLICATION_ID","CONTEXT_ROOT","PG_TAG","SERVER_NAME","URL_HOST_NAME","URL_PATH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conditionsFullWebRequestAttributeTypeDtoTypeAttributeTypePropEnum = append(conditionsFullWebRequestAttributeTypeDtoTypeAttributeTypePropEnum, v)
	}
}

const (

	// ConditionsFullWebRequestAttributeTypeDtoAttributeTypeAPPLICATIONID captures enum value "APPLICATION_ID"
	ConditionsFullWebRequestAttributeTypeDtoAttributeTypeAPPLICATIONID string = "APPLICATION_ID"

	// ConditionsFullWebRequestAttributeTypeDtoAttributeTypeCONTEXTROOT captures enum value "CONTEXT_ROOT"
	ConditionsFullWebRequestAttributeTypeDtoAttributeTypeCONTEXTROOT string = "CONTEXT_ROOT"

	// ConditionsFullWebRequestAttributeTypeDtoAttributeTypePGTAG captures enum value "PG_TAG"
	ConditionsFullWebRequestAttributeTypeDtoAttributeTypePGTAG string = "PG_TAG"

	// ConditionsFullWebRequestAttributeTypeDtoAttributeTypeSERVERNAME captures enum value "SERVER_NAME"
	ConditionsFullWebRequestAttributeTypeDtoAttributeTypeSERVERNAME string = "SERVER_NAME"

	// ConditionsFullWebRequestAttributeTypeDtoAttributeTypeURLHOSTNAME captures enum value "URL_HOST_NAME"
	ConditionsFullWebRequestAttributeTypeDtoAttributeTypeURLHOSTNAME string = "URL_HOST_NAME"

	// ConditionsFullWebRequestAttributeTypeDtoAttributeTypeURLPATH captures enum value "URL_PATH"
	ConditionsFullWebRequestAttributeTypeDtoAttributeTypeURLPATH string = "URL_PATH"
)

// prop value enum
func (m *ConditionsFullWebRequestAttributeTypeDto) validateAttributeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, conditionsFullWebRequestAttributeTypeDtoTypeAttributeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConditionsFullWebRequestAttributeTypeDto) validateAttributeType(formats strfmt.Registry) error {

	if err := validate.Required("attributeType", "body", m.AttributeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAttributeTypeEnum("attributeType", "body", *m.AttributeType); err != nil {
		return err
	}

	return nil
}

func (m *ConditionsFullWebRequestAttributeTypeDto) validateCompareOperations(formats strfmt.Registry) error {

	if swag.IsZero(m.CompareOperations()) { // not required
		return nil
	}

	iCompareOperationsSize := int64(len(m.CompareOperations()))

	if err := validate.MinItems("compareOperations", "body", iCompareOperationsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("compareOperations", "body", iCompareOperationsSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.CompareOperations()); i++ {

		if err := m.compareOperationsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compareOperations" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConditionsFullWebRequestAttributeTypeDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConditionsFullWebRequestAttributeTypeDto) UnmarshalBinary(b []byte) error {
	var res ConditionsFullWebRequestAttributeTypeDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
