// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValueCondition value condition
// swagger:model ValueCondition
type ValueCondition struct {

	// Negate the comparison.
	// Required: true
	Negate *bool `json:"negate"`

	// Operator comparing the extracted value to the comparison value.
	// Required: true
	// Enum: [BEGINS_WITH CONTAINS ENDS_WITH EQUALS]
	Operator *string `json:"operator"`

	// The value to compare to.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this value condition
func (m *ValueCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNegate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValueCondition) validateNegate(formats strfmt.Registry) error {

	if err := validate.Required("negate", "body", m.Negate); err != nil {
		return err
	}

	return nil
}

var valueConditionTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BEGINS_WITH","CONTAINS","ENDS_WITH","EQUALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		valueConditionTypeOperatorPropEnum = append(valueConditionTypeOperatorPropEnum, v)
	}
}

const (

	// ValueConditionOperatorBEGINSWITH captures enum value "BEGINS_WITH"
	ValueConditionOperatorBEGINSWITH string = "BEGINS_WITH"

	// ValueConditionOperatorCONTAINS captures enum value "CONTAINS"
	ValueConditionOperatorCONTAINS string = "CONTAINS"

	// ValueConditionOperatorENDSWITH captures enum value "ENDS_WITH"
	ValueConditionOperatorENDSWITH string = "ENDS_WITH"

	// ValueConditionOperatorEQUALS captures enum value "EQUALS"
	ValueConditionOperatorEQUALS string = "EQUALS"
)

// prop value enum
func (m *ValueCondition) validateOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, valueConditionTypeOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ValueCondition) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ValueCondition) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValueCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValueCondition) UnmarshalBinary(b []byte) error {
	var res ValueCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
