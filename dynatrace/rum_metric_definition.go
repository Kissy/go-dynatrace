// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RumMetricDefinition rum metric definition
// swagger:model RumMetricDefinition
type RumMetricDefinition struct {

	// The type of metric this RumMetricDefinition holds
	// Required: true
	// Enum: [ApplicationCache Callback DNSLookup DOMComplete DOMContentLoaded DOMInteractive DoubleProperty ErrorCount HTMLDownloaded LoadEventEnd LoadEventStart NavigationStart OnDOMContentLoaded OnLoad Processing RedirectTime Request RequestStart Response SecureConnect SpeedIndex TCPConnect TimeToFirstByte UserActionDuration VisuallyComplete]
	Metric *string `json:"metric"`

	// The key of the user action property. Only required if metric is set to "DoubleProperty"
	PropertyKey string `json:"propertyKey,omitempty"`
}

// Validate validates this rum metric definition
func (m *RumMetricDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rumMetricDefinitionTypeMetricPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ApplicationCache","Callback","DNSLookup","DOMComplete","DOMContentLoaded","DOMInteractive","DoubleProperty","ErrorCount","HTMLDownloaded","LoadEventEnd","LoadEventStart","NavigationStart","OnDOMContentLoaded","OnLoad","Processing","RedirectTime","Request","RequestStart","Response","SecureConnect","SpeedIndex","TCPConnect","TimeToFirstByte","UserActionDuration","VisuallyComplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rumMetricDefinitionTypeMetricPropEnum = append(rumMetricDefinitionTypeMetricPropEnum, v)
	}
}

const (

	// RumMetricDefinitionMetricApplicationCache captures enum value "ApplicationCache"
	RumMetricDefinitionMetricApplicationCache string = "ApplicationCache"

	// RumMetricDefinitionMetricCallback captures enum value "Callback"
	RumMetricDefinitionMetricCallback string = "Callback"

	// RumMetricDefinitionMetricDNSLookup captures enum value "DNSLookup"
	RumMetricDefinitionMetricDNSLookup string = "DNSLookup"

	// RumMetricDefinitionMetricDOMComplete captures enum value "DOMComplete"
	RumMetricDefinitionMetricDOMComplete string = "DOMComplete"

	// RumMetricDefinitionMetricDOMContentLoaded captures enum value "DOMContentLoaded"
	RumMetricDefinitionMetricDOMContentLoaded string = "DOMContentLoaded"

	// RumMetricDefinitionMetricDOMInteractive captures enum value "DOMInteractive"
	RumMetricDefinitionMetricDOMInteractive string = "DOMInteractive"

	// RumMetricDefinitionMetricDoubleProperty captures enum value "DoubleProperty"
	RumMetricDefinitionMetricDoubleProperty string = "DoubleProperty"

	// RumMetricDefinitionMetricErrorCount captures enum value "ErrorCount"
	RumMetricDefinitionMetricErrorCount string = "ErrorCount"

	// RumMetricDefinitionMetricHTMLDownloaded captures enum value "HTMLDownloaded"
	RumMetricDefinitionMetricHTMLDownloaded string = "HTMLDownloaded"

	// RumMetricDefinitionMetricLoadEventEnd captures enum value "LoadEventEnd"
	RumMetricDefinitionMetricLoadEventEnd string = "LoadEventEnd"

	// RumMetricDefinitionMetricLoadEventStart captures enum value "LoadEventStart"
	RumMetricDefinitionMetricLoadEventStart string = "LoadEventStart"

	// RumMetricDefinitionMetricNavigationStart captures enum value "NavigationStart"
	RumMetricDefinitionMetricNavigationStart string = "NavigationStart"

	// RumMetricDefinitionMetricOnDOMContentLoaded captures enum value "OnDOMContentLoaded"
	RumMetricDefinitionMetricOnDOMContentLoaded string = "OnDOMContentLoaded"

	// RumMetricDefinitionMetricOnLoad captures enum value "OnLoad"
	RumMetricDefinitionMetricOnLoad string = "OnLoad"

	// RumMetricDefinitionMetricProcessing captures enum value "Processing"
	RumMetricDefinitionMetricProcessing string = "Processing"

	// RumMetricDefinitionMetricRedirectTime captures enum value "RedirectTime"
	RumMetricDefinitionMetricRedirectTime string = "RedirectTime"

	// RumMetricDefinitionMetricRequest captures enum value "Request"
	RumMetricDefinitionMetricRequest string = "Request"

	// RumMetricDefinitionMetricRequestStart captures enum value "RequestStart"
	RumMetricDefinitionMetricRequestStart string = "RequestStart"

	// RumMetricDefinitionMetricResponse captures enum value "Response"
	RumMetricDefinitionMetricResponse string = "Response"

	// RumMetricDefinitionMetricSecureConnect captures enum value "SecureConnect"
	RumMetricDefinitionMetricSecureConnect string = "SecureConnect"

	// RumMetricDefinitionMetricSpeedIndex captures enum value "SpeedIndex"
	RumMetricDefinitionMetricSpeedIndex string = "SpeedIndex"

	// RumMetricDefinitionMetricTCPConnect captures enum value "TCPConnect"
	RumMetricDefinitionMetricTCPConnect string = "TCPConnect"

	// RumMetricDefinitionMetricTimeToFirstByte captures enum value "TimeToFirstByte"
	RumMetricDefinitionMetricTimeToFirstByte string = "TimeToFirstByte"

	// RumMetricDefinitionMetricUserActionDuration captures enum value "UserActionDuration"
	RumMetricDefinitionMetricUserActionDuration string = "UserActionDuration"

	// RumMetricDefinitionMetricVisuallyComplete captures enum value "VisuallyComplete"
	RumMetricDefinitionMetricVisuallyComplete string = "VisuallyComplete"
)

// prop value enum
func (m *RumMetricDefinition) validateMetricEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rumMetricDefinitionTypeMetricPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RumMetricDefinition) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	// value enum
	if err := m.validateMetricEnum("metric", "body", *m.Metric); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RumMetricDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RumMetricDefinition) UnmarshalBinary(b []byte) error {
	var res RumMetricDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
