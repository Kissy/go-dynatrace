// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationDataPrivacy Data privacy settings of the application.
// swagger:model ApplicationDataPrivacy
type ApplicationDataPrivacy struct {

	// Set to `true` to disable data capture and cookies until JavaScriptAPI dtrum.enable() is called.
	// Required: true
	DataCaptureOptInEnabled *bool `json:"dataCaptureOptInEnabled"`

	// How to handle browsers' "Do Not Track": `IGNORE_DO_NOT_TRACK`, or `CAPTURE_ANONYMIZED`, or `DO_NOT_CAPTURE`.
	// Required: true
	// Enum: [CAPTURE_ANONYMIZED DO_NOT_CAPTURE IGNORE_DO_NOT_TRACK]
	DoNotTrackBehaviour *string `json:"doNotTrackBehaviour"`

	// Dynatrace entity ID of the web application.
	// Read Only: true
	Identifier string `json:"identifier,omitempty"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// Set to `true` to set persistent cookie in order to recognize returning devices.
	// Required: true
	PersistentCookieForUserTracking *bool `json:"persistentCookieForUserTracking"`
}

// Validate validates this application data privacy
func (m *ApplicationDataPrivacy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataCaptureOptInEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoNotTrackBehaviour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentCookieForUserTracking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationDataPrivacy) validateDataCaptureOptInEnabled(formats strfmt.Registry) error {

	if err := validate.Required("dataCaptureOptInEnabled", "body", m.DataCaptureOptInEnabled); err != nil {
		return err
	}

	return nil
}

var applicationDataPrivacyTypeDoNotTrackBehaviourPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CAPTURE_ANONYMIZED","DO_NOT_CAPTURE","IGNORE_DO_NOT_TRACK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationDataPrivacyTypeDoNotTrackBehaviourPropEnum = append(applicationDataPrivacyTypeDoNotTrackBehaviourPropEnum, v)
	}
}

const (

	// ApplicationDataPrivacyDoNotTrackBehaviourCAPTUREANONYMIZED captures enum value "CAPTURE_ANONYMIZED"
	ApplicationDataPrivacyDoNotTrackBehaviourCAPTUREANONYMIZED string = "CAPTURE_ANONYMIZED"

	// ApplicationDataPrivacyDoNotTrackBehaviourDONOTCAPTURE captures enum value "DO_NOT_CAPTURE"
	ApplicationDataPrivacyDoNotTrackBehaviourDONOTCAPTURE string = "DO_NOT_CAPTURE"

	// ApplicationDataPrivacyDoNotTrackBehaviourIGNOREDONOTTRACK captures enum value "IGNORE_DO_NOT_TRACK"
	ApplicationDataPrivacyDoNotTrackBehaviourIGNOREDONOTTRACK string = "IGNORE_DO_NOT_TRACK"
)

// prop value enum
func (m *ApplicationDataPrivacy) validateDoNotTrackBehaviourEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applicationDataPrivacyTypeDoNotTrackBehaviourPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationDataPrivacy) validateDoNotTrackBehaviour(formats strfmt.Registry) error {

	if err := validate.Required("doNotTrackBehaviour", "body", m.DoNotTrackBehaviour); err != nil {
		return err
	}

	// value enum
	if err := m.validateDoNotTrackBehaviourEnum("doNotTrackBehaviour", "body", *m.DoNotTrackBehaviour); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationDataPrivacy) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationDataPrivacy) validatePersistentCookieForUserTracking(formats strfmt.Registry) error {

	if err := validate.Required("persistentCookieForUserTracking", "body", m.PersistentCookieForUserTracking); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationDataPrivacy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationDataPrivacy) UnmarshalBinary(b []byte) error {
	var res ApplicationDataPrivacy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
