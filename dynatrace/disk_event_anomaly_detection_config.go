// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskEventAnomalyDetectionConfig disk event anomaly detection config
// swagger:model DiskEventAnomalyDetectionConfig
type DiskEventAnomalyDetectionConfig struct {

	// Narrows the rule usage down to disks, matching the specified criteria.
	DiskNameFilter *DiskNameFilter `json:"diskNameFilter,omitempty"`

	// Disk event rule enabled/disabled.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the disk event rule.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// The metric to monitor.
	// Required: true
	// Enum: [LOW_DISK_SPACE LOW_INODES READ_TIME_EXCEEDING WRITE_TIME_EXCEEDING]
	Metric *string `json:"metric"`

	// The name of the disk event rule.
	// Required: true
	// Max Length: 49
	// Min Length: 1
	Name *string `json:"name"`

	// The number of samples to evaluate.
	// Required: true
	// Maximum: 20
	// Minimum: 3
	Samples *int32 `json:"samples"`

	// Narrows the rule usage down to the hosts matching the specified tags.
	// Unique: true
	TagFilters []*TagFilter `json:"tagFilters"`

	// The threshold to trigger disk event.
	//
	//  * A percentage for `LowDiskSpace` or `LowInodes` metrics.
	//  * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics.
	// Required: true
	// Maximum: 1000
	// Minimum: 0
	Threshold *float64 `json:"threshold"`

	// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples.
	// Required: true
	// Minimum: 1
	ViolatingSamples *int32 `json:"violatingSamples"`
}

// Validate validates this disk event anomaly detection config
func (m *DiskEventAnomalyDetectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskNameFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViolatingSamples(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateDiskNameFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskNameFilter) { // not required
		return nil
	}

	if m.DiskNameFilter != nil {
		if err := m.DiskNameFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskNameFilter")
			}
			return err
		}
	}

	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

var diskEventAnomalyDetectionConfigTypeMetricPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOW_DISK_SPACE","LOW_INODES","READ_TIME_EXCEEDING","WRITE_TIME_EXCEEDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskEventAnomalyDetectionConfigTypeMetricPropEnum = append(diskEventAnomalyDetectionConfigTypeMetricPropEnum, v)
	}
}

const (

	// DiskEventAnomalyDetectionConfigMetricLOWDISKSPACE captures enum value "LOW_DISK_SPACE"
	DiskEventAnomalyDetectionConfigMetricLOWDISKSPACE string = "LOW_DISK_SPACE"

	// DiskEventAnomalyDetectionConfigMetricLOWINODES captures enum value "LOW_INODES"
	DiskEventAnomalyDetectionConfigMetricLOWINODES string = "LOW_INODES"

	// DiskEventAnomalyDetectionConfigMetricREADTIMEEXCEEDING captures enum value "READ_TIME_EXCEEDING"
	DiskEventAnomalyDetectionConfigMetricREADTIMEEXCEEDING string = "READ_TIME_EXCEEDING"

	// DiskEventAnomalyDetectionConfigMetricWRITETIMEEXCEEDING captures enum value "WRITE_TIME_EXCEEDING"
	DiskEventAnomalyDetectionConfigMetricWRITETIMEEXCEEDING string = "WRITE_TIME_EXCEEDING"
)

// prop value enum
func (m *DiskEventAnomalyDetectionConfig) validateMetricEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, diskEventAnomalyDetectionConfigTypeMetricPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	// value enum
	if err := m.validateMetricEnum("metric", "body", *m.Metric); err != nil {
		return err
	}

	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 49); err != nil {
		return err
	}

	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateSamples(formats strfmt.Registry) error {

	if err := validate.Required("samples", "body", m.Samples); err != nil {
		return err
	}

	if err := validate.MinimumInt("samples", "body", int64(*m.Samples), 3, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("samples", "body", int64(*m.Samples), 20, false); err != nil {
		return err
	}

	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateTagFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.TagFilters) { // not required
		return nil
	}

	if err := validate.UniqueItems("tagFilters", "body", m.TagFilters); err != nil {
		return err
	}

	for i := 0; i < len(m.TagFilters); i++ {
		if swag.IsZero(m.TagFilters[i]) { // not required
			continue
		}

		if m.TagFilters[i] != nil {
			if err := m.TagFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	if err := validate.Minimum("threshold", "body", float64(*m.Threshold), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("threshold", "body", float64(*m.Threshold), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *DiskEventAnomalyDetectionConfig) validateViolatingSamples(formats strfmt.Registry) error {

	if err := validate.Required("violatingSamples", "body", m.ViolatingSamples); err != nil {
		return err
	}

	if err := validate.MinimumInt("violatingSamples", "body", int64(*m.ViolatingSamples), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiskEventAnomalyDetectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskEventAnomalyDetectionConfig) UnmarshalBinary(b []byte) error {
	var res DiskEventAnomalyDetectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
