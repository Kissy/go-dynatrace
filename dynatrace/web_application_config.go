// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebApplicationConfig Configuration of a web application.
// swagger:model WebApplicationConfig
type WebApplicationConfig struct {

	// A list of conversion goals of the application.
	ConversionGoals []*ConversionGoal `json:"conversionGoals"`

	// Analize *X*% of user sessions.
	// Required: true
	// Maximum: 100
	// Minimum: 0
	CostControlUserSessionPercentage *float64 `json:"costControlUserSessionPercentage"`

	// The Apdex settings of custom actions.
	// Required: true
	CustomActionApdexSettings *Apdex `json:"customActionApdexSettings"`

	// Dynatrace entity ID of the web application.
	// Read Only: true
	Identifier string `json:"identifier,omitempty"`

	// The Apdex settings of load actions.
	// Required: true
	LoadActionApdexSettings *Apdex `json:"loadActionApdexSettings"`

	// The key performance metric of load actions.
	// Required: true
	// Enum: [ACTION_DURATION DOM_INTERACTIVE LOAD_EVENT_END LOAD_EVENT_START RESPONSE_END RESPONSE_START SPEED_INDEX VISUALLY_COMPLETE]
	LoadActionKeyPerformanceMetric *string `json:"loadActionKeyPerformanceMetric"`

	// Java script agent meta data capture settings.
	MetaDataCaptureSettings []*MetaDataCapturing `json:"metaDataCaptureSettings"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// Real user monitoring settings.
	// Required: true
	MonitoringSettings *MonitoringSettings `json:"monitoringSettings"`

	// The name of the web application, displayed in the UI.
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// Real user monitoring enabled/disabled.
	// Required: true
	RealUserMonitoringEnabled *bool `json:"realUserMonitoringEnabled"`

	// The type of the web application.
	// Enum: [AUTO_INJECTED BROWSER_EXTENSION_INJECTED MANUALLY_INJECTED]
	Type string `json:"type,omitempty"`

	// Url injection pattern for manual web application.
	URLInjectionPattern string `json:"urlInjectionPattern,omitempty"`

	// User action naming settings.
	UserActionNamingSettings *UserActionNamingSettings `json:"userActionNamingSettings,omitempty"`

	// Content resource settings.
	// Required: true
	WaterfallSettings *WaterfallSettings `json:"waterfallSettings"`

	// The Apdex settings of XHR actions.
	// Required: true
	XhrActionApdexSettings *Apdex `json:"xhrActionApdexSettings"`

	// The key performance metric of XHR actions.
	// Required: true
	// Enum: [ACTION_DURATION RESPONSE_END RESPONSE_START VISUALLY_COMPLETE]
	XhrActionKeyPerformanceMetric *string `json:"xhrActionKeyPerformanceMetric"`
}

// Validate validates this web application config
func (m *WebApplicationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConversionGoals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostControlUserSessionPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomActionApdexSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadActionApdexSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadActionKeyPerformanceMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaDataCaptureSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoringSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealUserMonitoringEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserActionNamingSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaterfallSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXhrActionApdexSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXhrActionKeyPerformanceMetric(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebApplicationConfig) validateConversionGoals(formats strfmt.Registry) error {

	if swag.IsZero(m.ConversionGoals) { // not required
		return nil
	}

	for i := 0; i < len(m.ConversionGoals); i++ {
		if swag.IsZero(m.ConversionGoals[i]) { // not required
			continue
		}

		if m.ConversionGoals[i] != nil {
			if err := m.ConversionGoals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversionGoals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebApplicationConfig) validateCostControlUserSessionPercentage(formats strfmt.Registry) error {

	if err := validate.Required("costControlUserSessionPercentage", "body", m.CostControlUserSessionPercentage); err != nil {
		return err
	}

	if err := validate.Minimum("costControlUserSessionPercentage", "body", float64(*m.CostControlUserSessionPercentage), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("costControlUserSessionPercentage", "body", float64(*m.CostControlUserSessionPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *WebApplicationConfig) validateCustomActionApdexSettings(formats strfmt.Registry) error {

	if err := validate.Required("customActionApdexSettings", "body", m.CustomActionApdexSettings); err != nil {
		return err
	}

	if m.CustomActionApdexSettings != nil {
		if err := m.CustomActionApdexSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customActionApdexSettings")
			}
			return err
		}
	}

	return nil
}

func (m *WebApplicationConfig) validateLoadActionApdexSettings(formats strfmt.Registry) error {

	if err := validate.Required("loadActionApdexSettings", "body", m.LoadActionApdexSettings); err != nil {
		return err
	}

	if m.LoadActionApdexSettings != nil {
		if err := m.LoadActionApdexSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loadActionApdexSettings")
			}
			return err
		}
	}

	return nil
}

var webApplicationConfigTypeLoadActionKeyPerformanceMetricPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTION_DURATION","DOM_INTERACTIVE","LOAD_EVENT_END","LOAD_EVENT_START","RESPONSE_END","RESPONSE_START","SPEED_INDEX","VISUALLY_COMPLETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webApplicationConfigTypeLoadActionKeyPerformanceMetricPropEnum = append(webApplicationConfigTypeLoadActionKeyPerformanceMetricPropEnum, v)
	}
}

const (

	// WebApplicationConfigLoadActionKeyPerformanceMetricACTIONDURATION captures enum value "ACTION_DURATION"
	WebApplicationConfigLoadActionKeyPerformanceMetricACTIONDURATION string = "ACTION_DURATION"

	// WebApplicationConfigLoadActionKeyPerformanceMetricDOMINTERACTIVE captures enum value "DOM_INTERACTIVE"
	WebApplicationConfigLoadActionKeyPerformanceMetricDOMINTERACTIVE string = "DOM_INTERACTIVE"

	// WebApplicationConfigLoadActionKeyPerformanceMetricLOADEVENTEND captures enum value "LOAD_EVENT_END"
	WebApplicationConfigLoadActionKeyPerformanceMetricLOADEVENTEND string = "LOAD_EVENT_END"

	// WebApplicationConfigLoadActionKeyPerformanceMetricLOADEVENTSTART captures enum value "LOAD_EVENT_START"
	WebApplicationConfigLoadActionKeyPerformanceMetricLOADEVENTSTART string = "LOAD_EVENT_START"

	// WebApplicationConfigLoadActionKeyPerformanceMetricRESPONSEEND captures enum value "RESPONSE_END"
	WebApplicationConfigLoadActionKeyPerformanceMetricRESPONSEEND string = "RESPONSE_END"

	// WebApplicationConfigLoadActionKeyPerformanceMetricRESPONSESTART captures enum value "RESPONSE_START"
	WebApplicationConfigLoadActionKeyPerformanceMetricRESPONSESTART string = "RESPONSE_START"

	// WebApplicationConfigLoadActionKeyPerformanceMetricSPEEDINDEX captures enum value "SPEED_INDEX"
	WebApplicationConfigLoadActionKeyPerformanceMetricSPEEDINDEX string = "SPEED_INDEX"

	// WebApplicationConfigLoadActionKeyPerformanceMetricVISUALLYCOMPLETE captures enum value "VISUALLY_COMPLETE"
	WebApplicationConfigLoadActionKeyPerformanceMetricVISUALLYCOMPLETE string = "VISUALLY_COMPLETE"
)

// prop value enum
func (m *WebApplicationConfig) validateLoadActionKeyPerformanceMetricEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webApplicationConfigTypeLoadActionKeyPerformanceMetricPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebApplicationConfig) validateLoadActionKeyPerformanceMetric(formats strfmt.Registry) error {

	if err := validate.Required("loadActionKeyPerformanceMetric", "body", m.LoadActionKeyPerformanceMetric); err != nil {
		return err
	}

	// value enum
	if err := m.validateLoadActionKeyPerformanceMetricEnum("loadActionKeyPerformanceMetric", "body", *m.LoadActionKeyPerformanceMetric); err != nil {
		return err
	}

	return nil
}

func (m *WebApplicationConfig) validateMetaDataCaptureSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.MetaDataCaptureSettings) { // not required
		return nil
	}

	for i := 0; i < len(m.MetaDataCaptureSettings); i++ {
		if swag.IsZero(m.MetaDataCaptureSettings[i]) { // not required
			continue
		}

		if m.MetaDataCaptureSettings[i] != nil {
			if err := m.MetaDataCaptureSettings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metaDataCaptureSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebApplicationConfig) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *WebApplicationConfig) validateMonitoringSettings(formats strfmt.Registry) error {

	if err := validate.Required("monitoringSettings", "body", m.MonitoringSettings); err != nil {
		return err
	}

	if m.MonitoringSettings != nil {
		if err := m.MonitoringSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringSettings")
			}
			return err
		}
	}

	return nil
}

func (m *WebApplicationConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *WebApplicationConfig) validateRealUserMonitoringEnabled(formats strfmt.Registry) error {

	if err := validate.Required("realUserMonitoringEnabled", "body", m.RealUserMonitoringEnabled); err != nil {
		return err
	}

	return nil
}

var webApplicationConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO_INJECTED","BROWSER_EXTENSION_INJECTED","MANUALLY_INJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webApplicationConfigTypeTypePropEnum = append(webApplicationConfigTypeTypePropEnum, v)
	}
}

const (

	// WebApplicationConfigTypeAUTOINJECTED captures enum value "AUTO_INJECTED"
	WebApplicationConfigTypeAUTOINJECTED string = "AUTO_INJECTED"

	// WebApplicationConfigTypeBROWSEREXTENSIONINJECTED captures enum value "BROWSER_EXTENSION_INJECTED"
	WebApplicationConfigTypeBROWSEREXTENSIONINJECTED string = "BROWSER_EXTENSION_INJECTED"

	// WebApplicationConfigTypeMANUALLYINJECTED captures enum value "MANUALLY_INJECTED"
	WebApplicationConfigTypeMANUALLYINJECTED string = "MANUALLY_INJECTED"
)

// prop value enum
func (m *WebApplicationConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webApplicationConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebApplicationConfig) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *WebApplicationConfig) validateUserActionNamingSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.UserActionNamingSettings) { // not required
		return nil
	}

	if m.UserActionNamingSettings != nil {
		if err := m.UserActionNamingSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userActionNamingSettings")
			}
			return err
		}
	}

	return nil
}

func (m *WebApplicationConfig) validateWaterfallSettings(formats strfmt.Registry) error {

	if err := validate.Required("waterfallSettings", "body", m.WaterfallSettings); err != nil {
		return err
	}

	if m.WaterfallSettings != nil {
		if err := m.WaterfallSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("waterfallSettings")
			}
			return err
		}
	}

	return nil
}

func (m *WebApplicationConfig) validateXhrActionApdexSettings(formats strfmt.Registry) error {

	if err := validate.Required("xhrActionApdexSettings", "body", m.XhrActionApdexSettings); err != nil {
		return err
	}

	if m.XhrActionApdexSettings != nil {
		if err := m.XhrActionApdexSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("xhrActionApdexSettings")
			}
			return err
		}
	}

	return nil
}

var webApplicationConfigTypeXhrActionKeyPerformanceMetricPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTION_DURATION","RESPONSE_END","RESPONSE_START","VISUALLY_COMPLETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webApplicationConfigTypeXhrActionKeyPerformanceMetricPropEnum = append(webApplicationConfigTypeXhrActionKeyPerformanceMetricPropEnum, v)
	}
}

const (

	// WebApplicationConfigXhrActionKeyPerformanceMetricACTIONDURATION captures enum value "ACTION_DURATION"
	WebApplicationConfigXhrActionKeyPerformanceMetricACTIONDURATION string = "ACTION_DURATION"

	// WebApplicationConfigXhrActionKeyPerformanceMetricRESPONSEEND captures enum value "RESPONSE_END"
	WebApplicationConfigXhrActionKeyPerformanceMetricRESPONSEEND string = "RESPONSE_END"

	// WebApplicationConfigXhrActionKeyPerformanceMetricRESPONSESTART captures enum value "RESPONSE_START"
	WebApplicationConfigXhrActionKeyPerformanceMetricRESPONSESTART string = "RESPONSE_START"

	// WebApplicationConfigXhrActionKeyPerformanceMetricVISUALLYCOMPLETE captures enum value "VISUALLY_COMPLETE"
	WebApplicationConfigXhrActionKeyPerformanceMetricVISUALLYCOMPLETE string = "VISUALLY_COMPLETE"
)

// prop value enum
func (m *WebApplicationConfig) validateXhrActionKeyPerformanceMetricEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webApplicationConfigTypeXhrActionKeyPerformanceMetricPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebApplicationConfig) validateXhrActionKeyPerformanceMetric(formats strfmt.Registry) error {

	if err := validate.Required("xhrActionKeyPerformanceMetric", "body", m.XhrActionKeyPerformanceMetric); err != nil {
		return err
	}

	// value enum
	if err := m.validateXhrActionKeyPerformanceMetricEnum("xhrActionKeyPerformanceMetric", "body", *m.XhrActionKeyPerformanceMetric); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebApplicationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebApplicationConfig) UnmarshalBinary(b []byte) error {
	var res WebApplicationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
