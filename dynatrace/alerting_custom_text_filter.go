// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertingCustomTextFilter Configuration of a matching filter.
// swagger:model AlertingCustomTextFilter
type AlertingCustomTextFilter struct {

	// The condition is case sensitive (`false`) or case insensitive (`true`).
	//
	//  If not set, then `false` is used, making the condition case sensitive.
	// Required: true
	CaseInsensitive *bool `json:"caseInsensitive"`

	// The filter is enabled (`true`) or disabled (`false`).
	// Required: true
	Enabled *bool `json:"enabled"`

	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**.
	// Required: true
	Negate *bool `json:"negate"`

	// Operator of the comparison.
	//
	//  You can reverse it by setting **negate** to `true`.
	// Required: true
	// Enum: [BEGINS_WITH CONTAINS CONTAINS_REGEX ENDS_WITH EQUALS]
	Operator *string `json:"operator"`

	// The value to compare to.
	// Required: true
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this alerting custom text filter
func (m *AlertingCustomTextFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaseInsensitive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNegate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingCustomTextFilter) validateCaseInsensitive(formats strfmt.Registry) error {

	if err := validate.Required("caseInsensitive", "body", m.CaseInsensitive); err != nil {
		return err
	}

	return nil
}

func (m *AlertingCustomTextFilter) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *AlertingCustomTextFilter) validateNegate(formats strfmt.Registry) error {

	if err := validate.Required("negate", "body", m.Negate); err != nil {
		return err
	}

	return nil
}

var alertingCustomTextFilterTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BEGINS_WITH","CONTAINS","CONTAINS_REGEX","ENDS_WITH","EQUALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertingCustomTextFilterTypeOperatorPropEnum = append(alertingCustomTextFilterTypeOperatorPropEnum, v)
	}
}

const (

	// AlertingCustomTextFilterOperatorBEGINSWITH captures enum value "BEGINS_WITH"
	AlertingCustomTextFilterOperatorBEGINSWITH string = "BEGINS_WITH"

	// AlertingCustomTextFilterOperatorCONTAINS captures enum value "CONTAINS"
	AlertingCustomTextFilterOperatorCONTAINS string = "CONTAINS"

	// AlertingCustomTextFilterOperatorCONTAINSREGEX captures enum value "CONTAINS_REGEX"
	AlertingCustomTextFilterOperatorCONTAINSREGEX string = "CONTAINS_REGEX"

	// AlertingCustomTextFilterOperatorENDSWITH captures enum value "ENDS_WITH"
	AlertingCustomTextFilterOperatorENDSWITH string = "ENDS_WITH"

	// AlertingCustomTextFilterOperatorEQUALS captures enum value "EQUALS"
	AlertingCustomTextFilterOperatorEQUALS string = "EQUALS"
)

// prop value enum
func (m *AlertingCustomTextFilter) validateOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, alertingCustomTextFilterTypeOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AlertingCustomTextFilter) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *AlertingCustomTextFilter) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", string(*m.Value), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertingCustomTextFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertingCustomTextFilter) UnmarshalBinary(b []byte) error {
	var res AlertingCustomTextFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
