// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HighMemoryThresholds Custom thresholds for high memory usage. If not set then the automatic mode is used.
//
//  **Both** conditions must be met to trigger an alert.
// swagger:model HighMemoryThresholds
type HighMemoryThresholds struct {

	// Memory page fault rate is higher than *X* faults per second on Linux.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	PageFaultsPerSecondNonWindows *int32 `json:"pageFaultsPerSecondNonWindows"`

	// Memory page fault rate is higher than *X* faults per second on Windows.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	PageFaultsPerSecondWindows *int32 `json:"pageFaultsPerSecondWindows"`

	// Memory usage is higher than *X*% on Linux.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	UsedMemoryPercentageNonWindows *int32 `json:"usedMemoryPercentageNonWindows"`

	// Memory usage is higher than *X*% on Windows.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	UsedMemoryPercentageWindows *int32 `json:"usedMemoryPercentageWindows"`
}

// Validate validates this high memory thresholds
func (m *HighMemoryThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePageFaultsPerSecondNonWindows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageFaultsPerSecondWindows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedMemoryPercentageNonWindows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedMemoryPercentageWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HighMemoryThresholds) validatePageFaultsPerSecondNonWindows(formats strfmt.Registry) error {

	if err := validate.Required("pageFaultsPerSecondNonWindows", "body", m.PageFaultsPerSecondNonWindows); err != nil {
		return err
	}

	if err := validate.MinimumInt("pageFaultsPerSecondNonWindows", "body", int64(*m.PageFaultsPerSecondNonWindows), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageFaultsPerSecondNonWindows", "body", int64(*m.PageFaultsPerSecondNonWindows), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *HighMemoryThresholds) validatePageFaultsPerSecondWindows(formats strfmt.Registry) error {

	if err := validate.Required("pageFaultsPerSecondWindows", "body", m.PageFaultsPerSecondWindows); err != nil {
		return err
	}

	if err := validate.MinimumInt("pageFaultsPerSecondWindows", "body", int64(*m.PageFaultsPerSecondWindows), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageFaultsPerSecondWindows", "body", int64(*m.PageFaultsPerSecondWindows), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *HighMemoryThresholds) validateUsedMemoryPercentageNonWindows(formats strfmt.Registry) error {

	if err := validate.Required("usedMemoryPercentageNonWindows", "body", m.UsedMemoryPercentageNonWindows); err != nil {
		return err
	}

	if err := validate.MinimumInt("usedMemoryPercentageNonWindows", "body", int64(*m.UsedMemoryPercentageNonWindows), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("usedMemoryPercentageNonWindows", "body", int64(*m.UsedMemoryPercentageNonWindows), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *HighMemoryThresholds) validateUsedMemoryPercentageWindows(formats strfmt.Registry) error {

	if err := validate.Required("usedMemoryPercentageWindows", "body", m.UsedMemoryPercentageWindows); err != nil {
		return err
	}

	if err := validate.MinimumInt("usedMemoryPercentageWindows", "body", int64(*m.UsedMemoryPercentageWindows), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("usedMemoryPercentageWindows", "body", int64(*m.UsedMemoryPercentageWindows), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HighMemoryThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HighMemoryThresholds) UnmarshalBinary(b []byte) error {
	var res HighMemoryThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
