// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceTimingSettings Settings for resource timings capture.
// swagger:model ResourceTimingSettings
type ResourceTimingSettings struct {

	// Timing for JavaScript files and images on non-W3C supported browsers enabled/disabled.
	// Required: true
	NonW3cResourceTimings *bool `json:"nonW3cResourceTimings"`

	// Instrumentation delay for monitoring resource and image resource impact in browsers that don't offer W3C resource timings.
	//
	// Valid values range from 0 to 9999.
	//
	// Only effective if **nonW3cResourceTimings** is enabled.
	// Required: true
	// Maximum: 9999
	// Minimum: 0
	NonW3cResourceTimingsInstrumentationDelay *int32 `json:"nonW3cResourceTimingsInstrumentationDelay"`

	// Defines how detailed resource timings are captured.
	//
	// Only effective if **w3cResourceTimings** or **nonW3cResourceTimings** is enabled.
	// Required: true
	// Enum: [CAPTURE_ALL_SUMMARIES CAPTURE_FULL_DETAILS CAPTURE_LIMITED_SUMMARIES]
	ResourceTimingCaptureType *string `json:"resourceTimingCaptureType"`

	// Limits the number of domains for which W3C resource timings are captured.
	//
	// Only effective if **resourceTimingCaptureType** is `CAPTURE_LIMITED_SUMMARIES`.
	// Required: true
	// Maximum: 50
	// Minimum: 0
	ResourceTimingsDomainLimit *int32 `json:"resourceTimingsDomainLimit"`

	// W3C resource timings for third party/CDN enabled/disabled.
	// Required: true
	W3cResourceTimings *bool `json:"w3cResourceTimings"`
}

// Validate validates this resource timing settings
func (m *ResourceTimingSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNonW3cResourceTimings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonW3cResourceTimingsInstrumentationDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTimingCaptureType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTimingsDomainLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateW3cResourceTimings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceTimingSettings) validateNonW3cResourceTimings(formats strfmt.Registry) error {

	if err := validate.Required("nonW3cResourceTimings", "body", m.NonW3cResourceTimings); err != nil {
		return err
	}

	return nil
}

func (m *ResourceTimingSettings) validateNonW3cResourceTimingsInstrumentationDelay(formats strfmt.Registry) error {

	if err := validate.Required("nonW3cResourceTimingsInstrumentationDelay", "body", m.NonW3cResourceTimingsInstrumentationDelay); err != nil {
		return err
	}

	if err := validate.MinimumInt("nonW3cResourceTimingsInstrumentationDelay", "body", int64(*m.NonW3cResourceTimingsInstrumentationDelay), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("nonW3cResourceTimingsInstrumentationDelay", "body", int64(*m.NonW3cResourceTimingsInstrumentationDelay), 9999, false); err != nil {
		return err
	}

	return nil
}

var resourceTimingSettingsTypeResourceTimingCaptureTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CAPTURE_ALL_SUMMARIES","CAPTURE_FULL_DETAILS","CAPTURE_LIMITED_SUMMARIES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTimingSettingsTypeResourceTimingCaptureTypePropEnum = append(resourceTimingSettingsTypeResourceTimingCaptureTypePropEnum, v)
	}
}

const (

	// ResourceTimingSettingsResourceTimingCaptureTypeCAPTUREALLSUMMARIES captures enum value "CAPTURE_ALL_SUMMARIES"
	ResourceTimingSettingsResourceTimingCaptureTypeCAPTUREALLSUMMARIES string = "CAPTURE_ALL_SUMMARIES"

	// ResourceTimingSettingsResourceTimingCaptureTypeCAPTUREFULLDETAILS captures enum value "CAPTURE_FULL_DETAILS"
	ResourceTimingSettingsResourceTimingCaptureTypeCAPTUREFULLDETAILS string = "CAPTURE_FULL_DETAILS"

	// ResourceTimingSettingsResourceTimingCaptureTypeCAPTURELIMITEDSUMMARIES captures enum value "CAPTURE_LIMITED_SUMMARIES"
	ResourceTimingSettingsResourceTimingCaptureTypeCAPTURELIMITEDSUMMARIES string = "CAPTURE_LIMITED_SUMMARIES"
)

// prop value enum
func (m *ResourceTimingSettings) validateResourceTimingCaptureTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceTimingSettingsTypeResourceTimingCaptureTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceTimingSettings) validateResourceTimingCaptureType(formats strfmt.Registry) error {

	if err := validate.Required("resourceTimingCaptureType", "body", m.ResourceTimingCaptureType); err != nil {
		return err
	}

	// value enum
	if err := m.validateResourceTimingCaptureTypeEnum("resourceTimingCaptureType", "body", *m.ResourceTimingCaptureType); err != nil {
		return err
	}

	return nil
}

func (m *ResourceTimingSettings) validateResourceTimingsDomainLimit(formats strfmt.Registry) error {

	if err := validate.Required("resourceTimingsDomainLimit", "body", m.ResourceTimingsDomainLimit); err != nil {
		return err
	}

	if err := validate.MinimumInt("resourceTimingsDomainLimit", "body", int64(*m.ResourceTimingsDomainLimit), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("resourceTimingsDomainLimit", "body", int64(*m.ResourceTimingsDomainLimit), 50, false); err != nil {
		return err
	}

	return nil
}

func (m *ResourceTimingSettings) validateW3cResourceTimings(formats strfmt.Registry) error {

	if err := validate.Required("w3cResourceTimings", "body", m.W3cResourceTimings); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceTimingSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceTimingSettings) UnmarshalBinary(b []byte) error {
	var res ResourceTimingSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
