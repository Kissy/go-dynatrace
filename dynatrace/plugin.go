// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plugin General configuration of a plugin.
// swagger:model Plugin
type Plugin struct {

	// The ID of the plugin, for example `custom.remote.python.demo`.
	ID string `json:"id,omitempty"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// The metric group of the plugin. All the metrics, captured by the plugin are children of this group.
	MetricGroup string `json:"metricGroup,omitempty"`

	// The name of the plugin, displayed in Dynatrace.
	Name string `json:"name,omitempty"`

	// A list of plugin properties.
	Properties []*PluginProperty `json:"properties"`

	// The type of the plugin. It indicates the runtime environment of the plugin (for example, ActiveGate).
	// Enum: [ActiveGate JMX OneAgent PMI]
	Type string `json:"type,omitempty"`

	// The version of the plugin, displayed in Dynatrace.
	Version string `json:"version,omitempty"`
}

// Validate validates this plugin
func (m *Plugin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plugin) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Plugin) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var pluginTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActiveGate","JMX","OneAgent","PMI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginTypeTypePropEnum = append(pluginTypeTypePropEnum, v)
	}
}

const (

	// PluginTypeActiveGate captures enum value "ActiveGate"
	PluginTypeActiveGate string = "ActiveGate"

	// PluginTypeJMX captures enum value "JMX"
	PluginTypeJMX string = "JMX"

	// PluginTypeOneAgent captures enum value "OneAgent"
	PluginTypeOneAgent string = "OneAgent"

	// PluginTypePMI captures enum value "PMI"
	PluginTypePMI string = "PMI"
)

// prop value enum
func (m *Plugin) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pluginTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Plugin) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Plugin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plugin) UnmarshalBinary(b []byte) error {
	var res Plugin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
