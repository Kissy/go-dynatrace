// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationID The contribution to the service ID calculation from the detected application ID.
//
//  You have two mutually exclusive options:
// * Override the detected value with a specified static value. Specify the new value in the **valueOverride** field.
// * Dynamically transform the detected value. Specify the transformation parameters in the **transformations** field.
// swagger:model ApplicationId
type ApplicationID struct {
	transformationsField []TransformationBase

	// The value to be used instead of the detected value.
	ValueOverride string `json:"valueOverride,omitempty"`
}

// Transformations gets the transformations of this base type
func (m *ApplicationID) Transformations() []TransformationBase {
	return m.transformationsField
}

// SetTransformations sets the transformations of this base type
func (m *ApplicationID) SetTransformations(val []TransformationBase) {
	m.transformationsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ApplicationID) UnmarshalJSON(raw []byte) error {
	var data struct {
		Transformations json.RawMessage `json:"transformations"`

		ValueOverride string `json:"valueOverride,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propTransformations []TransformationBase
	if string(data.Transformations) != "null" {
		transformations, err := UnmarshalTransformationBaseSlice(bytes.NewBuffer(data.Transformations), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propTransformations = transformations
	}

	var result ApplicationID

	// transformations
	result.transformationsField = propTransformations

	// valueOverride
	result.ValueOverride = data.ValueOverride

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ApplicationID) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		ValueOverride string `json:"valueOverride,omitempty"`
	}{

		ValueOverride: m.ValueOverride,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Transformations []TransformationBase `json:"transformations"`
	}{

		Transformations: m.transformationsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this application Id
func (m *ApplicationID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransformations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationID) validateTransformations(formats strfmt.Registry) error {

	if swag.IsZero(m.Transformations()) { // not required
		return nil
	}

	iTransformationsSize := int64(len(m.Transformations()))

	if err := validate.MinItems("transformations", "body", iTransformationsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("transformations", "body", iTransformationsSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.Transformations()); i++ {

		if err := m.transformationsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transformations" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationID) UnmarshalBinary(b []byte) error {
	var res ApplicationID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
