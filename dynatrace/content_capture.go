// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentCapture Settings for content capture.
// swagger:model ContentCapture
type ContentCapture struct {

	// JavaScript errors monitoring enabled/disabled.
	// Required: true
	JavaScriptErrors *bool `json:"javaScriptErrors"`

	// Settings for resource timings capture.
	// Required: true
	ResourceTimingSettings *ResourceTimingSettings `json:"resourceTimingSettings"`

	// Settings for timed action capture.
	// Required: true
	TimeoutSettings *TimeoutSettings `json:"timeoutSettings"`

	// Visually complete and Speed index support enabled/disabled.
	// Required: true
	VisuallyCompleteAndSpeedIndex *bool `json:"visuallyCompleteAndSpeedIndex"`
}

// Validate validates this content capture
func (m *ContentCapture) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJavaScriptErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTimingSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeoutSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisuallyCompleteAndSpeedIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentCapture) validateJavaScriptErrors(formats strfmt.Registry) error {

	if err := validate.Required("javaScriptErrors", "body", m.JavaScriptErrors); err != nil {
		return err
	}

	return nil
}

func (m *ContentCapture) validateResourceTimingSettings(formats strfmt.Registry) error {

	if err := validate.Required("resourceTimingSettings", "body", m.ResourceTimingSettings); err != nil {
		return err
	}

	if m.ResourceTimingSettings != nil {
		if err := m.ResourceTimingSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceTimingSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ContentCapture) validateTimeoutSettings(formats strfmt.Registry) error {

	if err := validate.Required("timeoutSettings", "body", m.TimeoutSettings); err != nil {
		return err
	}

	if m.TimeoutSettings != nil {
		if err := m.TimeoutSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeoutSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ContentCapture) validateVisuallyCompleteAndSpeedIndex(formats strfmt.Registry) error {

	if err := validate.Required("visuallyCompleteAndSpeedIndex", "body", m.VisuallyCompleteAndSpeedIndex); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentCapture) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentCapture) UnmarshalBinary(b []byte) error {
	var res ContentCapture
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
