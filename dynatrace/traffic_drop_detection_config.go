// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficDropDetectionConfig The configuration of traffic drops detection.
// swagger:model TrafficDropDetectionConfig
type TrafficDropDetectionConfig struct {

	// The detection is enabled (`true`) or disabled (`false`).
	// Required: true
	Enabled *bool `json:"enabled"`

	// Alert if the observed traffic is less than *X* % of the expected value.
	// Maximum: 100
	// Minimum: 0
	TrafficDropPercent *int32 `json:"trafficDropPercent,omitempty"`
}

// Validate validates this traffic drop detection config
func (m *TrafficDropDetectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficDropPercent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficDropDetectionConfig) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *TrafficDropDetectionConfig) validateTrafficDropPercent(formats strfmt.Registry) error {

	if swag.IsZero(m.TrafficDropPercent) { // not required
		return nil
	}

	if err := validate.MinimumInt("trafficDropPercent", "body", int64(*m.TrafficDropPercent), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("trafficDropPercent", "body", int64(*m.TrafficDropPercent), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficDropDetectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficDropDetectionConfig) UnmarshalBinary(b []byte) error {
	var res TrafficDropDetectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
