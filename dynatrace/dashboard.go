// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dashboard Configuration of a dashboard.
// swagger:model Dashboard
type Dashboard struct {

	// Parameters of the dashboard.
	// Required: true
	DashboardMetadata *DashboardMetadata `json:"dashboardMetadata"`

	// The ID of the dashboard.
	ID string `json:"id,omitempty"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	tilesField []Tile
}

// Tiles gets the tiles of this base type
func (m *Dashboard) Tiles() []Tile {
	return m.tilesField
}

// SetTiles sets the tiles of this base type
func (m *Dashboard) SetTiles(val []Tile) {
	m.tilesField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Dashboard) UnmarshalJSON(raw []byte) error {
	var data struct {
		DashboardMetadata *DashboardMetadata `json:"dashboardMetadata"`

		ID string `json:"id,omitempty"`

		Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

		Tiles json.RawMessage `json:"tiles"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propTiles, err := UnmarshalTileSlice(bytes.NewBuffer(data.Tiles), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result Dashboard

	// dashboardMetadata
	result.DashboardMetadata = data.DashboardMetadata

	// id
	result.ID = data.ID

	// metadata
	result.Metadata = data.Metadata

	// tiles
	result.tilesField = propTiles

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Dashboard) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		DashboardMetadata *DashboardMetadata `json:"dashboardMetadata"`

		ID string `json:"id,omitempty"`

		Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	}{

		DashboardMetadata: m.DashboardMetadata,

		ID: m.ID,

		Metadata: m.Metadata,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Tiles []Tile `json:"tiles"`
	}{

		Tiles: m.tilesField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this dashboard
func (m *Dashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboardMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) validateDashboardMetadata(formats strfmt.Registry) error {

	if err := validate.Required("dashboardMetadata", "body", m.DashboardMetadata); err != nil {
		return err
	}

	if m.DashboardMetadata != nil {
		if err := m.DashboardMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateTiles(formats strfmt.Registry) error {

	if err := validate.Required("tiles", "body", m.Tiles()); err != nil {
		return err
	}

	for i := 0; i < len(m.Tiles()); i++ {

		if err := m.tilesField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tiles" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dashboard) UnmarshalBinary(b []byte) error {
	var res Dashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
