// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DimensionDefinition Parameters of a definition of a calculated service metric.
// swagger:model DimensionDefinition
type DimensionDefinition struct {

	// The dimension value pattern.
	//
	//  You can define custom placeholders in the **placeholders** field and use them here.
	// Required: true
	// Max Length: 400
	// Min Length: 0
	Dimension *string `json:"dimension"`

	// The name of the dimension.
	// Required: true
	// Max Length: 200
	// Min Length: 0
	Name *string `json:"name"`

	// The list of custom placeholders to be used in a dimension value pattern.
	Placeholders []*Placeholder `json:"placeholders"`

	// The number of top values to be calculated.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	TopX *int32 `json:"topX"`

	// The aggregation of the dimension.
	// Required: true
	// Enum: [AVERAGE COUNT MAX MIN OF_INTEREST_RATIO OTHER_RATIO SINGLE_VALUE SUM]
	TopXAggregation *string `json:"topXAggregation"`

	// How to calculate the **topX** values.
	// Required: true
	// Enum: [ASCENDING DESCENDING]
	TopXDirection *string `json:"topXDirection"`
}

// Validate validates this dimension definition
func (m *DimensionDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlaceholders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopXAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopXDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DimensionDefinition) validateDimension(formats strfmt.Registry) error {

	if err := validate.Required("dimension", "body", m.Dimension); err != nil {
		return err
	}

	if err := validate.MinLength("dimension", "body", string(*m.Dimension), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dimension", "body", string(*m.Dimension), 400); err != nil {
		return err
	}

	return nil
}

func (m *DimensionDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 200); err != nil {
		return err
	}

	return nil
}

func (m *DimensionDefinition) validatePlaceholders(formats strfmt.Registry) error {

	if swag.IsZero(m.Placeholders) { // not required
		return nil
	}

	for i := 0; i < len(m.Placeholders); i++ {
		if swag.IsZero(m.Placeholders[i]) { // not required
			continue
		}

		if m.Placeholders[i] != nil {
			if err := m.Placeholders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("placeholders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DimensionDefinition) validateTopX(formats strfmt.Registry) error {

	if err := validate.Required("topX", "body", m.TopX); err != nil {
		return err
	}

	if err := validate.MinimumInt("topX", "body", int64(*m.TopX), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("topX", "body", int64(*m.TopX), 100, false); err != nil {
		return err
	}

	return nil
}

var dimensionDefinitionTypeTopXAggregationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVERAGE","COUNT","MAX","MIN","OF_INTEREST_RATIO","OTHER_RATIO","SINGLE_VALUE","SUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dimensionDefinitionTypeTopXAggregationPropEnum = append(dimensionDefinitionTypeTopXAggregationPropEnum, v)
	}
}

const (

	// DimensionDefinitionTopXAggregationAVERAGE captures enum value "AVERAGE"
	DimensionDefinitionTopXAggregationAVERAGE string = "AVERAGE"

	// DimensionDefinitionTopXAggregationCOUNT captures enum value "COUNT"
	DimensionDefinitionTopXAggregationCOUNT string = "COUNT"

	// DimensionDefinitionTopXAggregationMAX captures enum value "MAX"
	DimensionDefinitionTopXAggregationMAX string = "MAX"

	// DimensionDefinitionTopXAggregationMIN captures enum value "MIN"
	DimensionDefinitionTopXAggregationMIN string = "MIN"

	// DimensionDefinitionTopXAggregationOFINTERESTRATIO captures enum value "OF_INTEREST_RATIO"
	DimensionDefinitionTopXAggregationOFINTERESTRATIO string = "OF_INTEREST_RATIO"

	// DimensionDefinitionTopXAggregationOTHERRATIO captures enum value "OTHER_RATIO"
	DimensionDefinitionTopXAggregationOTHERRATIO string = "OTHER_RATIO"

	// DimensionDefinitionTopXAggregationSINGLEVALUE captures enum value "SINGLE_VALUE"
	DimensionDefinitionTopXAggregationSINGLEVALUE string = "SINGLE_VALUE"

	// DimensionDefinitionTopXAggregationSUM captures enum value "SUM"
	DimensionDefinitionTopXAggregationSUM string = "SUM"
)

// prop value enum
func (m *DimensionDefinition) validateTopXAggregationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dimensionDefinitionTypeTopXAggregationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DimensionDefinition) validateTopXAggregation(formats strfmt.Registry) error {

	if err := validate.Required("topXAggregation", "body", m.TopXAggregation); err != nil {
		return err
	}

	// value enum
	if err := m.validateTopXAggregationEnum("topXAggregation", "body", *m.TopXAggregation); err != nil {
		return err
	}

	return nil
}

var dimensionDefinitionTypeTopXDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASCENDING","DESCENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dimensionDefinitionTypeTopXDirectionPropEnum = append(dimensionDefinitionTypeTopXDirectionPropEnum, v)
	}
}

const (

	// DimensionDefinitionTopXDirectionASCENDING captures enum value "ASCENDING"
	DimensionDefinitionTopXDirectionASCENDING string = "ASCENDING"

	// DimensionDefinitionTopXDirectionDESCENDING captures enum value "DESCENDING"
	DimensionDefinitionTopXDirectionDESCENDING string = "DESCENDING"
)

// prop value enum
func (m *DimensionDefinition) validateTopXDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dimensionDefinitionTypeTopXDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DimensionDefinition) validateTopXDirection(formats strfmt.Registry) error {

	if err := validate.Required("topXDirection", "body", m.TopXDirection); err != nil {
		return err
	}

	// value enum
	if err := m.validateTopXDirectionEnum("topXDirection", "body", *m.TopXDirection); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DimensionDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DimensionDefinition) UnmarshalBinary(b []byte) error {
	var res DimensionDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
