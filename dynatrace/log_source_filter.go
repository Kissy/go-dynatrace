// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogSourceFilter Configuration of the log filter for a custom log metric.
//
// If several criteria are specified, the AND logic applies.
// swagger:model LogSourceFilter
type LogSourceFilter struct {

	// A list of hosts, where the log can originate from. Specify Dynatrace entity IDs here.
	//
	// If several hosts are specified, the OR logic applies.
	HostFilters []string `json:"hostFilters"`

	// A list of operating system types, where the log can originate from.
	//
	// If set, **only OS logs** are included in the result.
	//
	// If several OS are specified, the OR logic applies.
	//
	// This field is mutually exclusive with the **sourceEntities** field.
	// Max Items: 1
	// Min Items: 0
	OsTypes []string `json:"osTypes"`

	// A list of filtering criteria for log path.
	//
	// If several criteria are specified, the OR logic applies.
	PathDefinitions []*PathDefinition `json:"pathDefinitions"`

	// A list of Dynatrace entities, where the log can originate from. Specify Dynatrace entity IDs here.
	//
	//  Allowed types of entities are `PROCESS_GROUP` and `PROCESS_GROUP_INSTANCE`. You can't mix entity types.
	//
	// If several entities are specified, the OR logic applies.
	//
	// This field is mutually exclusive with the **osTypes** field.
	SourceEntities []string `json:"sourceEntities"`
}

// Validate validates this log source filter
func (m *LogSourceFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logSourceFilterOsTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AIX","DARWIN","HPUX","LINUX","SOLARIS","WINDOWS","ZOS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logSourceFilterOsTypesItemsEnum = append(logSourceFilterOsTypesItemsEnum, v)
	}
}

func (m *LogSourceFilter) validateOsTypesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logSourceFilterOsTypesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogSourceFilter) validateOsTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.OsTypes) { // not required
		return nil
	}

	iOsTypesSize := int64(len(m.OsTypes))

	if err := validate.MinItems("osTypes", "body", iOsTypesSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("osTypes", "body", iOsTypesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OsTypes); i++ {

		// value enum
		if err := m.validateOsTypesItemsEnum("osTypes"+"."+strconv.Itoa(i), "body", m.OsTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *LogSourceFilter) validatePathDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.PathDefinitions) { // not required
		return nil
	}

	for i := 0; i < len(m.PathDefinitions); i++ {
		if swag.IsZero(m.PathDefinitions[i]) { // not required
			continue
		}

		if m.PathDefinitions[i] != nil {
			if err := m.PathDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pathDefinitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogSourceFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogSourceFilter) UnmarshalBinary(b []byte) error {
	var res LogSourceFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
