// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Apdex Defines the Apdex settings of an application.
// swagger:model Apdex
type Apdex struct {

	// Consider JavaScript errors in Apdex calculations enabled/disabled
	// Required: true
	ConsiderJavaScriptErrors *bool `json:"considerJavaScriptErrors"`

	// Fallback threshold of an XHR action, in milliseconds, defining a tolerable user experience, when the configured KPM is not available.
	//
	//  Values between 100 and 240000 are allowed.
	// Maximum: 240000
	// Minimum: 100
	FrustratingFallbackThreshold int32 `json:"frustratingFallbackThreshold,omitempty"`

	// Maximal length of an action, in milliseconds, which is considered as tolerable user experience.
	//
	//  You can use values between 100 and 240000.
	// Maximum: 240000
	// Minimum: 100
	FrustratingThreshold int32 `json:"frustratingThreshold,omitempty"`

	// Fallback threshold of an XHR action, in milliseconds, defining a satisfied user experience, when the configured KPM is not available.
	//
	//  Values between 100 and 60000 are allowed.
	// Maximum: 60000
	// Minimum: 100
	ToleratedFallbackThreshold int32 `json:"toleratedFallbackThreshold,omitempty"`

	// Maximal length of an action, in milliseconds, which is considered as satisfied user experience.
	//
	//  You can use values between 100 and 60000.
	// Maximum: 60000
	// Minimum: 100
	ToleratedThreshold int32 `json:"toleratedThreshold,omitempty"`
}

// Validate validates this apdex
func (m *Apdex) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsiderJavaScriptErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrustratingFallbackThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrustratingThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToleratedFallbackThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToleratedThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Apdex) validateConsiderJavaScriptErrors(formats strfmt.Registry) error {

	if err := validate.Required("considerJavaScriptErrors", "body", m.ConsiderJavaScriptErrors); err != nil {
		return err
	}

	return nil
}

func (m *Apdex) validateFrustratingFallbackThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.FrustratingFallbackThreshold) { // not required
		return nil
	}

	if err := validate.MinimumInt("frustratingFallbackThreshold", "body", int64(m.FrustratingFallbackThreshold), 100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("frustratingFallbackThreshold", "body", int64(m.FrustratingFallbackThreshold), 240000, false); err != nil {
		return err
	}

	return nil
}

func (m *Apdex) validateFrustratingThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.FrustratingThreshold) { // not required
		return nil
	}

	if err := validate.MinimumInt("frustratingThreshold", "body", int64(m.FrustratingThreshold), 100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("frustratingThreshold", "body", int64(m.FrustratingThreshold), 240000, false); err != nil {
		return err
	}

	return nil
}

func (m *Apdex) validateToleratedFallbackThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.ToleratedFallbackThreshold) { // not required
		return nil
	}

	if err := validate.MinimumInt("toleratedFallbackThreshold", "body", int64(m.ToleratedFallbackThreshold), 100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("toleratedFallbackThreshold", "body", int64(m.ToleratedFallbackThreshold), 60000, false); err != nil {
		return err
	}

	return nil
}

func (m *Apdex) validateToleratedThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.ToleratedThreshold) { // not required
		return nil
	}

	if err := validate.MinimumInt("toleratedThreshold", "body", int64(m.ToleratedThreshold), 100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("toleratedThreshold", "body", int64(m.ToleratedThreshold), 60000, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Apdex) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Apdex) UnmarshalBinary(b []byte) error {
	var res Apdex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
