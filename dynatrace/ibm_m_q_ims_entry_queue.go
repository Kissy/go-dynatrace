// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IbmMQImsEntryQueue Ibm MQ queue which is an entrypoint to IMS.
// swagger:model IbmMQImsEntryQueue
type IbmMQImsEntryQueue struct {

	// The ID of the IMS entry queue.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The name of the queue manager.
	// Required: true
	// Max Length: 500
	// Min Length: 1
	QueueManagerName *string `json:"queueManagerName"`

	// The name of the queue.
	// Required: true
	// Max Length: 500
	// Min Length: 1
	QueueName *string `json:"queueName"`
}

// Validate validates this ibm m q ims entry queue
func (m *IbmMQImsEntryQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueManagerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbmMQImsEntryQueue) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IbmMQImsEntryQueue) validateQueueManagerName(formats strfmt.Registry) error {

	if err := validate.Required("queueManagerName", "body", m.QueueManagerName); err != nil {
		return err
	}

	if err := validate.MinLength("queueManagerName", "body", string(*m.QueueManagerName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("queueManagerName", "body", string(*m.QueueManagerName), 500); err != nil {
		return err
	}

	return nil
}

func (m *IbmMQImsEntryQueue) validateQueueName(formats strfmt.Registry) error {

	if err := validate.Required("queueName", "body", m.QueueName); err != nil {
		return err
	}

	if err := validate.MinLength("queueName", "body", string(*m.QueueName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("queueName", "body", string(*m.QueueName), 500); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbmMQImsEntryQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbmMQImsEntryQueue) UnmarshalBinary(b []byte) error {
	var res IbmMQImsEntryQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
