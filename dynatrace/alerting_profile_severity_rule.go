// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertingProfileSeverityRule A severity rule of the alerting profile.
//
//  A severity rule defines the level of severity that must be met before an alert is sent our for a detected problem. Additionally it restricts the alerting to certain monitored entities.
// swagger:model AlertingProfileSeverityRule
type AlertingProfileSeverityRule struct {

	// Send a notification if a problem remains open longer than *X* minutes.
	// Required: true
	// Maximum: 10000
	// Minimum: 0
	DelayInMinutes *int32 `json:"delayInMinutes"`

	// The severity level to trigger the alert.
	// Required: true
	// Enum: [AVAILABILITY CUSTOM_ALERT ERROR MONITORING_UNAVAILABLE PERFORMANCE RESOURCE_CONTENTION]
	SeverityLevel *string `json:"severityLevel"`

	// A list of tags, defining the applicable monitored entities.
	//
	//  If no tags specified, the alerting profile applies to all monitored entities.
	// Required: true
	TagFilter *AlertingProfileTagFilter `json:"tagFilter"`
}

// Validate validates this alerting profile severity rule
func (m *AlertingProfileSeverityRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelayInMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverityLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingProfileSeverityRule) validateDelayInMinutes(formats strfmt.Registry) error {

	if err := validate.Required("delayInMinutes", "body", m.DelayInMinutes); err != nil {
		return err
	}

	if err := validate.MinimumInt("delayInMinutes", "body", int64(*m.DelayInMinutes), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("delayInMinutes", "body", int64(*m.DelayInMinutes), 10000, false); err != nil {
		return err
	}

	return nil
}

var alertingProfileSeverityRuleTypeSeverityLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVAILABILITY","CUSTOM_ALERT","ERROR","MONITORING_UNAVAILABLE","PERFORMANCE","RESOURCE_CONTENTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertingProfileSeverityRuleTypeSeverityLevelPropEnum = append(alertingProfileSeverityRuleTypeSeverityLevelPropEnum, v)
	}
}

const (

	// AlertingProfileSeverityRuleSeverityLevelAVAILABILITY captures enum value "AVAILABILITY"
	AlertingProfileSeverityRuleSeverityLevelAVAILABILITY string = "AVAILABILITY"

	// AlertingProfileSeverityRuleSeverityLevelCUSTOMALERT captures enum value "CUSTOM_ALERT"
	AlertingProfileSeverityRuleSeverityLevelCUSTOMALERT string = "CUSTOM_ALERT"

	// AlertingProfileSeverityRuleSeverityLevelERROR captures enum value "ERROR"
	AlertingProfileSeverityRuleSeverityLevelERROR string = "ERROR"

	// AlertingProfileSeverityRuleSeverityLevelMONITORINGUNAVAILABLE captures enum value "MONITORING_UNAVAILABLE"
	AlertingProfileSeverityRuleSeverityLevelMONITORINGUNAVAILABLE string = "MONITORING_UNAVAILABLE"

	// AlertingProfileSeverityRuleSeverityLevelPERFORMANCE captures enum value "PERFORMANCE"
	AlertingProfileSeverityRuleSeverityLevelPERFORMANCE string = "PERFORMANCE"

	// AlertingProfileSeverityRuleSeverityLevelRESOURCECONTENTION captures enum value "RESOURCE_CONTENTION"
	AlertingProfileSeverityRuleSeverityLevelRESOURCECONTENTION string = "RESOURCE_CONTENTION"
)

// prop value enum
func (m *AlertingProfileSeverityRule) validateSeverityLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, alertingProfileSeverityRuleTypeSeverityLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AlertingProfileSeverityRule) validateSeverityLevel(formats strfmt.Registry) error {

	if err := validate.Required("severityLevel", "body", m.SeverityLevel); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeverityLevelEnum("severityLevel", "body", *m.SeverityLevel); err != nil {
		return err
	}

	return nil
}

func (m *AlertingProfileSeverityRule) validateTagFilter(formats strfmt.Registry) error {

	if err := validate.Required("tagFilter", "body", m.TagFilter); err != nil {
		return err
	}

	if m.TagFilter != nil {
		if err := m.TagFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tagFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertingProfileSeverityRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertingProfileSeverityRule) UnmarshalBinary(b []byte) error {
	var res AlertingProfileSeverityRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
