// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestAttribute request attribute
// swagger:model RequestAttribute
type RequestAttribute struct {

	// Aggregation type for the request values.
	// Required: true
	// Enum: [ALL_DISTINCT_VALUES AVERAGE COUNT_DISTINCT_VALUES COUNT_VALUES FIRST LAST MAXIMUM MINIMUM SUM]
	Aggregation *string `json:"aggregation"`

	// Confidential data flag. Set `true` to treat the captured data as confidential.
	// Required: true
	Confidential *bool `json:"confidential"`

	// The list of data sources.
	// Required: true
	// Max Items: 2000
	// Min Items: 1
	DataSources []*DataSource `json:"dataSources"`

	// The data type of the request attribute.
	// Required: true
	// Enum: [DOUBLE INTEGER STRING]
	DataType *string `json:"dataType"`

	// The request attribute is enabled (`true`) or disabled (`false`).
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the request attribute.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Metadata useful for debugging.
	// Read Only: true
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`

	// The name of the request attribute.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// String values transformation.
	//
	//  If the **dataType** is not `string`, set the `Original` here.
	// Required: true
	// Enum: [ORIGINAL TO_LOWER_CASE TO_UPPER_CASE]
	Normalization *string `json:"normalization"`

	// Personal data masking flag. Set `true` to skip masking.
	//
	//  Warning: This will potentially access personalized data.
	// Required: true
	SkipPersonalDataMasking *bool `json:"skipPersonalDataMasking"`
}

// Validate validates this request attribute
func (m *RequestAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfidential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNormalization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkipPersonalDataMasking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestAttributeTypeAggregationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL_DISTINCT_VALUES","AVERAGE","COUNT_DISTINCT_VALUES","COUNT_VALUES","FIRST","LAST","MAXIMUM","MINIMUM","SUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestAttributeTypeAggregationPropEnum = append(requestAttributeTypeAggregationPropEnum, v)
	}
}

const (

	// RequestAttributeAggregationALLDISTINCTVALUES captures enum value "ALL_DISTINCT_VALUES"
	RequestAttributeAggregationALLDISTINCTVALUES string = "ALL_DISTINCT_VALUES"

	// RequestAttributeAggregationAVERAGE captures enum value "AVERAGE"
	RequestAttributeAggregationAVERAGE string = "AVERAGE"

	// RequestAttributeAggregationCOUNTDISTINCTVALUES captures enum value "COUNT_DISTINCT_VALUES"
	RequestAttributeAggregationCOUNTDISTINCTVALUES string = "COUNT_DISTINCT_VALUES"

	// RequestAttributeAggregationCOUNTVALUES captures enum value "COUNT_VALUES"
	RequestAttributeAggregationCOUNTVALUES string = "COUNT_VALUES"

	// RequestAttributeAggregationFIRST captures enum value "FIRST"
	RequestAttributeAggregationFIRST string = "FIRST"

	// RequestAttributeAggregationLAST captures enum value "LAST"
	RequestAttributeAggregationLAST string = "LAST"

	// RequestAttributeAggregationMAXIMUM captures enum value "MAXIMUM"
	RequestAttributeAggregationMAXIMUM string = "MAXIMUM"

	// RequestAttributeAggregationMINIMUM captures enum value "MINIMUM"
	RequestAttributeAggregationMINIMUM string = "MINIMUM"

	// RequestAttributeAggregationSUM captures enum value "SUM"
	RequestAttributeAggregationSUM string = "SUM"
)

// prop value enum
func (m *RequestAttribute) validateAggregationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, requestAttributeTypeAggregationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RequestAttribute) validateAggregation(formats strfmt.Registry) error {

	if err := validate.Required("aggregation", "body", m.Aggregation); err != nil {
		return err
	}

	// value enum
	if err := m.validateAggregationEnum("aggregation", "body", *m.Aggregation); err != nil {
		return err
	}

	return nil
}

func (m *RequestAttribute) validateConfidential(formats strfmt.Registry) error {

	if err := validate.Required("confidential", "body", m.Confidential); err != nil {
		return err
	}

	return nil
}

func (m *RequestAttribute) validateDataSources(formats strfmt.Registry) error {

	if err := validate.Required("dataSources", "body", m.DataSources); err != nil {
		return err
	}

	iDataSourcesSize := int64(len(m.DataSources))

	if err := validate.MinItems("dataSources", "body", iDataSourcesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("dataSources", "body", iDataSourcesSize, 2000); err != nil {
		return err
	}

	for i := 0; i < len(m.DataSources); i++ {
		if swag.IsZero(m.DataSources[i]) { // not required
			continue
		}

		if m.DataSources[i] != nil {
			if err := m.DataSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var requestAttributeTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOUBLE","INTEGER","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestAttributeTypeDataTypePropEnum = append(requestAttributeTypeDataTypePropEnum, v)
	}
}

const (

	// RequestAttributeDataTypeDOUBLE captures enum value "DOUBLE"
	RequestAttributeDataTypeDOUBLE string = "DOUBLE"

	// RequestAttributeDataTypeINTEGER captures enum value "INTEGER"
	RequestAttributeDataTypeINTEGER string = "INTEGER"

	// RequestAttributeDataTypeSTRING captures enum value "STRING"
	RequestAttributeDataTypeSTRING string = "STRING"
)

// prop value enum
func (m *RequestAttribute) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, requestAttributeTypeDataTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RequestAttribute) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *RequestAttribute) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *RequestAttribute) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequestAttribute) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *RequestAttribute) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

var requestAttributeTypeNormalizationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ORIGINAL","TO_LOWER_CASE","TO_UPPER_CASE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestAttributeTypeNormalizationPropEnum = append(requestAttributeTypeNormalizationPropEnum, v)
	}
}

const (

	// RequestAttributeNormalizationORIGINAL captures enum value "ORIGINAL"
	RequestAttributeNormalizationORIGINAL string = "ORIGINAL"

	// RequestAttributeNormalizationTOLOWERCASE captures enum value "TO_LOWER_CASE"
	RequestAttributeNormalizationTOLOWERCASE string = "TO_LOWER_CASE"

	// RequestAttributeNormalizationTOUPPERCASE captures enum value "TO_UPPER_CASE"
	RequestAttributeNormalizationTOUPPERCASE string = "TO_UPPER_CASE"
)

// prop value enum
func (m *RequestAttribute) validateNormalizationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, requestAttributeTypeNormalizationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RequestAttribute) validateNormalization(formats strfmt.Registry) error {

	if err := validate.Required("normalization", "body", m.Normalization); err != nil {
		return err
	}

	// value enum
	if err := m.validateNormalizationEnum("normalization", "body", *m.Normalization); err != nil {
		return err
	}

	return nil
}

func (m *RequestAttribute) validateSkipPersonalDataMasking(formats strfmt.Registry) error {

	if err := validate.Required("skipPersonalDataMasking", "body", m.SkipPersonalDataMasking); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestAttribute) UnmarshalBinary(b []byte) error {
	var res RequestAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
