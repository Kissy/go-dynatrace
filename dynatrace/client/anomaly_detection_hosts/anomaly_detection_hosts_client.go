// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new anomaly detection hosts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for anomaly detection hosts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAnomalyDetectionHosts(params *GetAnomalyDetectionHostsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionHostsOK, error)

	UpdateAnomalyDetectionHosts(params *UpdateAnomalyDetectionHostsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionHostsNoContent, error)

	ValidateUpdateAnomalyDetectionHosts(params *ValidateUpdateAnomalyDetectionHostsParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionHostsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAnomalyDetectionHosts gets the configuration of anomaly detection for hosts
*/
func (a *Client) GetAnomalyDetectionHosts(params *GetAnomalyDetectionHostsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnomalyDetectionHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnomalyDetectionHosts",
		Method:             "GET",
		PathPattern:        "/anomalyDetection/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnomalyDetectionHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnomalyDetectionHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnomalyDetectionHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAnomalyDetectionHosts updates the configuration of anomaly detection for hosts
*/
func (a *Client) UpdateAnomalyDetectionHosts(params *UpdateAnomalyDetectionHostsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionHostsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAnomalyDetectionHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAnomalyDetectionHosts",
		Method:             "PUT",
		PathPattern:        "/anomalyDetection/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAnomalyDetectionHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAnomalyDetectionHostsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAnomalyDetectionHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateAnomalyDetectionHosts validates the configuration of anomaly detection for hosts for the p u t anomaly detection hosts request
*/
func (a *Client) ValidateUpdateAnomalyDetectionHosts(params *ValidateUpdateAnomalyDetectionHostsParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionHostsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateAnomalyDetectionHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateAnomalyDetectionHosts",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/hosts/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateAnomalyDetectionHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateAnomalyDetectionHostsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateAnomalyDetectionHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
