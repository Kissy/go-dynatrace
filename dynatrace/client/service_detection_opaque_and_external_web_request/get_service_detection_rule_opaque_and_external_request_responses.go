// Code generated by go-swagger; DO NOT EDIT.

package service_detection_opaque_and_external_web_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// GetServiceDetectionRuleOpaqueAndExternalRequestReader is a Reader for the GetServiceDetectionRuleOpaqueAndExternalRequest structure.
type GetServiceDetectionRuleOpaqueAndExternalRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceDetectionRuleOpaqueAndExternalRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceDetectionRuleOpaqueAndExternalRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetServiceDetectionRuleOpaqueAndExternalRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetServiceDetectionRuleOpaqueAndExternalRequestOK creates a GetServiceDetectionRuleOpaqueAndExternalRequestOK with default headers values
func NewGetServiceDetectionRuleOpaqueAndExternalRequestOK() *GetServiceDetectionRuleOpaqueAndExternalRequestOK {
	return &GetServiceDetectionRuleOpaqueAndExternalRequestOK{}
}

/*GetServiceDetectionRuleOpaqueAndExternalRequestOK handles this case with default header values.

Success. The response contains properties of the specified rule.
*/
type GetServiceDetectionRuleOpaqueAndExternalRequestOK struct {
	Payload *dynatrace.OpaqueAndExternalWebRequestRule
}

func (o *GetServiceDetectionRuleOpaqueAndExternalRequestOK) Error() string {
	return fmt.Sprintf("[GET /service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}][%d] getServiceDetectionRuleOpaqueAndExternalRequestOK  %+v", 200, o.Payload)
}

func (o *GetServiceDetectionRuleOpaqueAndExternalRequestOK) GetPayload() *dynatrace.OpaqueAndExternalWebRequestRule {
	return o.Payload
}

func (o *GetServiceDetectionRuleOpaqueAndExternalRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.OpaqueAndExternalWebRequestRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceDetectionRuleOpaqueAndExternalRequestNotFound creates a GetServiceDetectionRuleOpaqueAndExternalRequestNotFound with default headers values
func NewGetServiceDetectionRuleOpaqueAndExternalRequestNotFound() *GetServiceDetectionRuleOpaqueAndExternalRequestNotFound {
	return &GetServiceDetectionRuleOpaqueAndExternalRequestNotFound{}
}

/*GetServiceDetectionRuleOpaqueAndExternalRequestNotFound handles this case with default header values.

Failed. The rule with the specified ID doesn't exist.
*/
type GetServiceDetectionRuleOpaqueAndExternalRequestNotFound struct {
}

func (o *GetServiceDetectionRuleOpaqueAndExternalRequestNotFound) Error() string {
	return fmt.Sprintf("[GET /service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}][%d] getServiceDetectionRuleOpaqueAndExternalRequestNotFound ", 404)
}

func (o *GetServiceDetectionRuleOpaqueAndExternalRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
