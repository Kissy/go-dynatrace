// Code generated by go-swagger; DO NOT EDIT.

package service_detection_opaque_and_external_web_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams creates a new ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams object
// with the default values initialized.
func NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams() *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	var ()
	return &ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParamsWithTimeout creates a new ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParamsWithTimeout(timeout time.Duration) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	var ()
	return &ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams{

		timeout: timeout,
	}
}

// NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParamsWithContext creates a new ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams object
// with the default values initialized, and the ability to set a context for a request
func NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParamsWithContext(ctx context.Context) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	var ()
	return &ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams{

		Context: ctx,
	}
}

// NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParamsWithHTTPClient creates a new ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParamsWithHTTPClient(client *http.Client) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	var ()
	return &ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams{
		HTTPClient: client,
	}
}

/*ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams contains all the parameters to send to the API endpoint
for the validate update service detection rule opaque and external request operation typically these are written to a http.Request
*/
type ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams struct {

	/*Body*/
	Body *dynatrace.OpaqueAndExternalWebRequestRule
	/*ID
	  The ID of the service detection rule to be validated.

	*/
	ID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) WithTimeout(timeout time.Duration) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) WithContext(ctx context.Context) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) WithHTTPClient(client *http.Client) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) WithBody(body *dynatrace.OpaqueAndExternalWebRequestRule) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) SetBody(body *dynatrace.OpaqueAndExternalWebRequestRule) {
	o.Body = body
}

// WithID adds the id to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) WithID(id strfmt.UUID) *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the validate update service detection rule opaque and external request params
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
