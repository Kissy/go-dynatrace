// Code generated by go-swagger; DO NOT EDIT.

package service_detection_opaque_and_external_web_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// CreateServiceDetectionRuleOpaqueAndExternalRequestReader is a Reader for the CreateServiceDetectionRuleOpaqueAndExternalRequest structure.
type CreateServiceDetectionRuleOpaqueAndExternalRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateServiceDetectionRuleOpaqueAndExternalRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateServiceDetectionRuleOpaqueAndExternalRequestCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateServiceDetectionRuleOpaqueAndExternalRequestCreated creates a CreateServiceDetectionRuleOpaqueAndExternalRequestCreated with default headers values
func NewCreateServiceDetectionRuleOpaqueAndExternalRequestCreated() *CreateServiceDetectionRuleOpaqueAndExternalRequestCreated {
	return &CreateServiceDetectionRuleOpaqueAndExternalRequestCreated{}
}

/*CreateServiceDetectionRuleOpaqueAndExternalRequestCreated handles this case with default header values.

Success. The new service detection rule has been created. The response contains short representation of the rule, including the ID.
*/
type CreateServiceDetectionRuleOpaqueAndExternalRequestCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *CreateServiceDetectionRuleOpaqueAndExternalRequestCreated) Error() string {
	return fmt.Sprintf("[POST /service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST][%d] createServiceDetectionRuleOpaqueAndExternalRequestCreated  %+v", 201, o.Payload)
}

func (o *CreateServiceDetectionRuleOpaqueAndExternalRequestCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *CreateServiceDetectionRuleOpaqueAndExternalRequestCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest creates a CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest with default headers values
func NewCreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest() *CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest {
	return &CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest{}
}

/*CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest) Error() string {
	return fmt.Sprintf("[POST /service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST][%d] createServiceDetectionRuleOpaqueAndExternalRequestBadRequest  %+v", 400, o.Payload)
}

func (o *CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *CreateServiceDetectionRuleOpaqueAndExternalRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
