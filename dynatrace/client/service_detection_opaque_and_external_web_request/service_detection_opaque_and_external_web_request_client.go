// Code generated by go-swagger; DO NOT EDIT.

package service_detection_opaque_and_external_web_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service detection opaque and external web request API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service detection opaque and external web request API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServiceDetectionRuleOpaqueAndExternalRequest(params *CreateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceDetectionRuleOpaqueAndExternalRequestCreated, error)

	DeleteServiceDetectionRuleOpaqueAndExternalRequest(params *DeleteServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceDetectionRuleOpaqueAndExternalRequestNoContent, error)

	GetServiceDetectionRuleOpaqueAndExternalRequest(params *GetServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleOpaqueAndExternalRequestOK, error)

	GetServiceDetectionRuleOpaqueAndExternalRequests(params *GetServiceDetectionRuleOpaqueAndExternalRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleOpaqueAndExternalRequestsOK, error)

	UpdateServiceDetectionRuleOpaqueAndExternalRequest(params *UpdateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleOpaqueAndExternalRequestCreated, *UpdateServiceDetectionRuleOpaqueAndExternalRequestNoContent, error)

	UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrder(params *UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrderNoContent, error)

	ValidateCreateServiceDetectionRuleOpaqueAndExternalRequest(params *ValidateCreateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateServiceDetectionRuleOpaqueAndExternalRequestNoContent, error)

	ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequest(params *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateServiceDetectionRuleOpaqueAndExternalRequest creates a new service detection rule pipe maturity e a r l y a d o p t e r

  The body must not provide an ID as it will be automatically assigned.
*/
func (a *Client) CreateServiceDetectionRuleOpaqueAndExternalRequest(params *CreateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceDetectionRuleOpaqueAndExternalRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceDetectionRuleOpaqueAndExternalRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServiceDetectionRuleOpaqueAndExternalRequest",
		Method:             "POST",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceDetectionRuleOpaqueAndExternalRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceDetectionRuleOpaqueAndExternalRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createServiceDetectionRuleOpaqueAndExternalRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServiceDetectionRuleOpaqueAndExternalRequest deletes the specified service detection rule pipe maturity e a r l y a d o p t e r
*/
func (a *Client) DeleteServiceDetectionRuleOpaqueAndExternalRequest(params *DeleteServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceDetectionRuleOpaqueAndExternalRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceDetectionRuleOpaqueAndExternalRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceDetectionRuleOpaqueAndExternalRequest",
		Method:             "DELETE",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceDetectionRuleOpaqueAndExternalRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceDetectionRuleOpaqueAndExternalRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceDetectionRuleOpaqueAndExternalRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceDetectionRuleOpaqueAndExternalRequest shows the properties of the specified service detection rule pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetServiceDetectionRuleOpaqueAndExternalRequest(params *GetServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleOpaqueAndExternalRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceDetectionRuleOpaqueAndExternalRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceDetectionRuleOpaqueAndExternalRequest",
		Method:             "GET",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceDetectionRuleOpaqueAndExternalRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceDetectionRuleOpaqueAndExternalRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceDetectionRuleOpaqueAndExternalRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceDetectionRuleOpaqueAndExternalRequests lists all full web service detection rules pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetServiceDetectionRuleOpaqueAndExternalRequests(params *GetServiceDetectionRuleOpaqueAndExternalRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleOpaqueAndExternalRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceDetectionRuleOpaqueAndExternalRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceDetectionRuleOpaqueAndExternalRequests",
		Method:             "GET",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceDetectionRuleOpaqueAndExternalRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceDetectionRuleOpaqueAndExternalRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceDetectionRuleOpaqueAndExternalRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceDetectionRuleOpaqueAndExternalRequest updates an existing service detection rule pipe maturity e a r l y a d o p t e r

  If the rule with the specified ID doesn't exist, a new rule will be created and appended to the end of the rule list.

 The request keeps an existing order of rules, unless the **order** parameter is set.
*/
func (a *Client) UpdateServiceDetectionRuleOpaqueAndExternalRequest(params *UpdateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleOpaqueAndExternalRequestCreated, *UpdateServiceDetectionRuleOpaqueAndExternalRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceDetectionRuleOpaqueAndExternalRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceDetectionRuleOpaqueAndExternalRequest",
		Method:             "PUT",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceDetectionRuleOpaqueAndExternalRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateServiceDetectionRuleOpaqueAndExternalRequestCreated:
		return value, nil, nil
	case *UpdateServiceDetectionRuleOpaqueAndExternalRequestNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for service_detection_opaque_and_external_web_request: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrder reorders the service detection rules of the specified type pipe maturity e a r l y a d o p t e r

  The request reorders the rules of the specified type according to the order of the IDs in the body of the request.

 Rules that are omitted in the body of the request will retain their relative order but will be placed *after* all those present in the request.
*/
func (a *Client) UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrder(params *UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceDetectionRuleOpaqueAndExternalRequestsOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceDetectionRuleOpaqueAndExternalRequestsOrder",
		Method:             "PUT",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceDetectionRuleOpaqueAndExternalRequestsOrderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServiceDetectionRuleOpaqueAndExternalRequestsOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateServiceDetectionRuleOpaqueAndExternalRequest validates the payload for the p o s t rule based service detection o p a q u e a n d e x t e r n a l w e b r e q u e s t request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateCreateServiceDetectionRuleOpaqueAndExternalRequest(params *ValidateCreateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateServiceDetectionRuleOpaqueAndExternalRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateServiceDetectionRuleOpaqueAndExternalRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateServiceDetectionRuleOpaqueAndExternalRequest",
		Method:             "POST",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateServiceDetectionRuleOpaqueAndExternalRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateServiceDetectionRuleOpaqueAndExternalRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateServiceDetectionRuleOpaqueAndExternalRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequest validates the payload for the p u t rule based service detection o p a q u e a n d e x t e r n a l w e b r e q u e s t id request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequest(params *ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateServiceDetectionRuleOpaqueAndExternalRequest",
		Method:             "POST",
		PathPattern:        "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateServiceDetectionRuleOpaqueAndExternalRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateServiceDetectionRuleOpaqueAndExternalRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
