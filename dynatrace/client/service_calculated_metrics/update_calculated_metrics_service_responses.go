// Code generated by go-swagger; DO NOT EDIT.

package service_calculated_metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateCalculatedMetricsServiceReader is a Reader for the UpdateCalculatedMetricsService structure.
type UpdateCalculatedMetricsServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCalculatedMetricsServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateCalculatedMetricsServiceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateCalculatedMetricsServiceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCalculatedMetricsServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCalculatedMetricsServiceCreated creates a UpdateCalculatedMetricsServiceCreated with default headers values
func NewUpdateCalculatedMetricsServiceCreated() *UpdateCalculatedMetricsServiceCreated {
	return &UpdateCalculatedMetricsServiceCreated{}
}

/*UpdateCalculatedMetricsServiceCreated handles this case with default header values.

Success. The new calculated service metric has been created. Response contains the key of the new metric.
*/
type UpdateCalculatedMetricsServiceCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateCalculatedMetricsServiceCreated) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/service/{metricKey}][%d] updateCalculatedMetricsServiceCreated  %+v", 201, o.Payload)
}

func (o *UpdateCalculatedMetricsServiceCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateCalculatedMetricsServiceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCalculatedMetricsServiceNoContent creates a UpdateCalculatedMetricsServiceNoContent with default headers values
func NewUpdateCalculatedMetricsServiceNoContent() *UpdateCalculatedMetricsServiceNoContent {
	return &UpdateCalculatedMetricsServiceNoContent{}
}

/*UpdateCalculatedMetricsServiceNoContent handles this case with default header values.

Success. The calculated service metric has been updated. Response doesn't have a body.
*/
type UpdateCalculatedMetricsServiceNoContent struct {
}

func (o *UpdateCalculatedMetricsServiceNoContent) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/service/{metricKey}][%d] updateCalculatedMetricsServiceNoContent ", 204)
}

func (o *UpdateCalculatedMetricsServiceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCalculatedMetricsServiceBadRequest creates a UpdateCalculatedMetricsServiceBadRequest with default headers values
func NewUpdateCalculatedMetricsServiceBadRequest() *UpdateCalculatedMetricsServiceBadRequest {
	return &UpdateCalculatedMetricsServiceBadRequest{}
}

/*UpdateCalculatedMetricsServiceBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateCalculatedMetricsServiceBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateCalculatedMetricsServiceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/service/{metricKey}][%d] updateCalculatedMetricsServiceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCalculatedMetricsServiceBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateCalculatedMetricsServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
