// Code generated by go-swagger; DO NOT EDIT.

package log_monitoring_metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new log monitoring metrics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for log monitoring metrics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCalculatedMetricsLog(params *DeleteCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCalculatedMetricsLogNoContent, error)

	GetCalculatedMetricsLog(params *GetCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsLogOK, error)

	GetCalculatedMetricsLogs(params *GetCalculatedMetricsLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsLogsOK, error)

	UpdateCalculatedMetricsLog(params *UpdateCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCalculatedMetricsLogCreated, *UpdateCalculatedMetricsLogNoContent, error)

	ValidateCalculatedMetricsLog(params *ValidateCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCalculatedMetricsLogNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCalculatedMetricsLog deletes the specified custom log metric definition pipe maturity e a r l y a d o p t e r
*/
func (a *Client) DeleteCalculatedMetricsLog(params *DeleteCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCalculatedMetricsLogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCalculatedMetricsLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCalculatedMetricsLog",
		Method:             "DELETE",
		PathPattern:        "/calculatedMetrics/log/{metricKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCalculatedMetricsLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCalculatedMetricsLogNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCalculatedMetricsLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCalculatedMetricsLog gets the definition of the specified custom log metric pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetCalculatedMetricsLog(params *GetCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCalculatedMetricsLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCalculatedMetricsLog",
		Method:             "GET",
		PathPattern:        "/calculatedMetrics/log/{metricKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCalculatedMetricsLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCalculatedMetricsLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCalculatedMetricsLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCalculatedMetricsLogs lists all custom log metrics configured in your environment pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetCalculatedMetricsLogs(params *GetCalculatedMetricsLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCalculatedMetricsLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCalculatedMetricsLogs",
		Method:             "GET",
		PathPattern:        "/calculatedMetrics/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCalculatedMetricsLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCalculatedMetricsLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCalculatedMetricsLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCalculatedMetricsLog creates a new custom log metric pipe maturity e a r l y a d o p t e r

  If the metric definition with the specified key already exists, it is updated.
*/
func (a *Client) UpdateCalculatedMetricsLog(params *UpdateCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCalculatedMetricsLogCreated, *UpdateCalculatedMetricsLogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCalculatedMetricsLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCalculatedMetricsLog",
		Method:             "PUT",
		PathPattern:        "/calculatedMetrics/log/{metricKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCalculatedMetricsLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCalculatedMetricsLogCreated:
		return value, nil, nil
	case *UpdateCalculatedMetricsLogNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for log_monitoring_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCalculatedMetricsLog validates the payload for the p u t calculated metrics log metric key request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateCalculatedMetricsLog(params *ValidateCalculatedMetricsLogParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCalculatedMetricsLogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCalculatedMetricsLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCalculatedMetricsLog",
		Method:             "POST",
		PathPattern:        "/calculatedMetrics/log/{metricKey}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCalculatedMetricsLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCalculatedMetricsLogNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCalculatedMetricsLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
