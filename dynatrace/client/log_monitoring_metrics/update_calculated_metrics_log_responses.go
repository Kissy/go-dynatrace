// Code generated by go-swagger; DO NOT EDIT.

package log_monitoring_metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateCalculatedMetricsLogReader is a Reader for the UpdateCalculatedMetricsLog structure.
type UpdateCalculatedMetricsLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCalculatedMetricsLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateCalculatedMetricsLogCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateCalculatedMetricsLogNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCalculatedMetricsLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCalculatedMetricsLogCreated creates a UpdateCalculatedMetricsLogCreated with default headers values
func NewUpdateCalculatedMetricsLogCreated() *UpdateCalculatedMetricsLogCreated {
	return &UpdateCalculatedMetricsLogCreated{}
}

/*UpdateCalculatedMetricsLogCreated handles this case with default header values.

Success. The new metric definition has been created. The response body contains the key and the name of the new metric.
*/
type UpdateCalculatedMetricsLogCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateCalculatedMetricsLogCreated) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/log/{metricKey}][%d] updateCalculatedMetricsLogCreated  %+v", 201, o.Payload)
}

func (o *UpdateCalculatedMetricsLogCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateCalculatedMetricsLogCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCalculatedMetricsLogNoContent creates a UpdateCalculatedMetricsLogNoContent with default headers values
func NewUpdateCalculatedMetricsLogNoContent() *UpdateCalculatedMetricsLogNoContent {
	return &UpdateCalculatedMetricsLogNoContent{}
}

/*UpdateCalculatedMetricsLogNoContent handles this case with default header values.

Success. The metric definition has been updated. Response doesn't have a body.
*/
type UpdateCalculatedMetricsLogNoContent struct {
}

func (o *UpdateCalculatedMetricsLogNoContent) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/log/{metricKey}][%d] updateCalculatedMetricsLogNoContent ", 204)
}

func (o *UpdateCalculatedMetricsLogNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCalculatedMetricsLogBadRequest creates a UpdateCalculatedMetricsLogBadRequest with default headers values
func NewUpdateCalculatedMetricsLogBadRequest() *UpdateCalculatedMetricsLogBadRequest {
	return &UpdateCalculatedMetricsLogBadRequest{}
}

/*UpdateCalculatedMetricsLogBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateCalculatedMetricsLogBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateCalculatedMetricsLogBadRequest) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/log/{metricKey}][%d] updateCalculatedMetricsLogBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCalculatedMetricsLogBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateCalculatedMetricsLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
