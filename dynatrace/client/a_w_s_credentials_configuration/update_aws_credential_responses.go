// Code generated by go-swagger; DO NOT EDIT.

package a_w_s_credentials_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateAwsCredentialReader is a Reader for the UpdateAwsCredential structure.
type UpdateAwsCredentialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAwsCredentialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateAwsCredentialCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateAwsCredentialNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAwsCredentialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAwsCredentialCreated creates a UpdateAwsCredentialCreated with default headers values
func NewUpdateAwsCredentialCreated() *UpdateAwsCredentialCreated {
	return &UpdateAwsCredentialCreated{}
}

/*UpdateAwsCredentialCreated handles this case with default header values.

Success. The new AWS credentials configuration has been created. The response body contains the ID of the configuration.

 Check the connection status for these credentials after 10 minutes with the `GET /aws/credentials/{id}` request.
*/
type UpdateAwsCredentialCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateAwsCredentialCreated) Error() string {
	return fmt.Sprintf("[PUT /aws/credentials/{id}][%d] updateAwsCredentialCreated  %+v", 201, o.Payload)
}

func (o *UpdateAwsCredentialCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateAwsCredentialCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAwsCredentialNoContent creates a UpdateAwsCredentialNoContent with default headers values
func NewUpdateAwsCredentialNoContent() *UpdateAwsCredentialNoContent {
	return &UpdateAwsCredentialNoContent{}
}

/*UpdateAwsCredentialNoContent handles this case with default header values.

Success. The AWS credentials configuration has been updated. Response doesn't have a body.

 Check the connection status for these credentials after 10 minutes with the `GET /aws/credentials/{id}` request.
*/
type UpdateAwsCredentialNoContent struct {
}

func (o *UpdateAwsCredentialNoContent) Error() string {
	return fmt.Sprintf("[PUT /aws/credentials/{id}][%d] updateAwsCredentialNoContent ", 204)
}

func (o *UpdateAwsCredentialNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAwsCredentialBadRequest creates a UpdateAwsCredentialBadRequest with default headers values
func NewUpdateAwsCredentialBadRequest() *UpdateAwsCredentialBadRequest {
	return &UpdateAwsCredentialBadRequest{}
}

/*UpdateAwsCredentialBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateAwsCredentialBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateAwsCredentialBadRequest) Error() string {
	return fmt.Sprintf("[PUT /aws/credentials/{id}][%d] updateAwsCredentialBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAwsCredentialBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateAwsCredentialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
