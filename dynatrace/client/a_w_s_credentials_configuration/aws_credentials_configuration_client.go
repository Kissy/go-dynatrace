// Code generated by go-swagger; DO NOT EDIT.

package a_w_s_credentials_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new a w s credentials configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for a w s credentials configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAwsCredential(params *CreateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAwsCredentialCreated, error)

	DeleteAwsCredential(params *DeleteAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAwsCredentialNoContent, error)

	GetAwsCredential(params *GetAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetAwsCredentialOK, error)

	GetAwsCredentials(params *GetAwsCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAwsCredentialsOK, error)

	GetAwsIamExternalID(params *GetAwsIamExternalIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAwsIamExternalIDOK, error)

	UpdateAwsCredential(params *UpdateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAwsCredentialCreated, *UpdateAwsCredentialNoContent, error)

	ValidateCreateAwsCredential(params *ValidateCreateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAwsCredentialNoContent, error)

	ValidateUpdateAwsCredential(params *ValidateUpdateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAwsCredentialNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAwsCredential creates a new a w s credentials configuration

  The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
*/
func (a *Client) CreateAwsCredential(params *CreateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAwsCredentialCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAwsCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAwsCredential",
		Method:             "POST",
		PathPattern:        "/aws/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAwsCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAwsCredentialCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAwsCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAwsCredential deletes the specified a w s credentials configuration
*/
func (a *Client) DeleteAwsCredential(params *DeleteAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAwsCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAwsCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAwsCredential",
		Method:             "DELETE",
		PathPattern:        "/aws/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAwsCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAwsCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAwsCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAwsCredential gets the configuration of the specified a w s credentials
*/
func (a *Client) GetAwsCredential(params *GetAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetAwsCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCredential",
		Method:             "GET",
		PathPattern:        "/aws/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAwsCredentials lists all available a w s credentials configurations
*/
func (a *Client) GetAwsCredentials(params *GetAwsCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAwsCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCredentials",
		Method:             "GET",
		PathPattern:        "/aws/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAwsIamExternalID gets the external ID token for setting an i a m role

  You'll need it for the role-based AWS authentication.
*/
func (a *Client) GetAwsIamExternalID(params *GetAwsIamExternalIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAwsIamExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsIamExternalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsIamExternalId",
		Method:             "GET",
		PathPattern:        "/aws/iamExternalId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsIamExternalIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsIamExternalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsIamExternalId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAwsCredential updates an existing a w s credentials configuration
*/
func (a *Client) UpdateAwsCredential(params *UpdateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAwsCredentialCreated, *UpdateAwsCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAwsCredential",
		Method:             "PUT",
		PathPattern:        "/aws/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAwsCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAwsCredentialCreated:
		return value, nil, nil
	case *UpdateAwsCredentialNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_w_s_credentials_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateAwsCredential validates the payload for the p o s t aws credentials request
*/
func (a *Client) ValidateCreateAwsCredential(params *ValidateCreateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAwsCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateAwsCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateAwsCredential",
		Method:             "POST",
		PathPattern:        "/aws/credentials/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateAwsCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateAwsCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateAwsCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateAwsCredential validates the payload for the p u t aws credentials id request
*/
func (a *Client) ValidateUpdateAwsCredential(params *ValidateUpdateAwsCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAwsCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateAwsCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateAwsCredential",
		Method:             "POST",
		PathPattern:        "/aws/credentials/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateAwsCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateAwsCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateAwsCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
