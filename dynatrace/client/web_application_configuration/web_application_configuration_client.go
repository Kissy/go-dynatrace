// Code generated by go-swagger; DO NOT EDIT.

package web_application_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new web application configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for web application configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateApplicationsWeb(params *CreateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*CreateApplicationsWebCreated, error)

	DeleteApplicationsWeb(params *DeleteApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteApplicationsWebNoContent, error)

	GetApplicationsWeb(params *GetApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebOK, error)

	GetApplicationsWebDataPrivacy(params *GetApplicationsWebDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDataPrivacyOK, error)

	GetApplicationsWebDataPrivacyList(params *GetApplicationsWebDataPrivacyListParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDataPrivacyListOK, error)

	GetApplicationsWebDefault(params *GetApplicationsWebDefaultParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDefaultOK, error)

	GetApplicationsWebDefaultDataPrivacy(params *GetApplicationsWebDefaultDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDefaultDataPrivacyOK, error)

	GetApplicationsWebs(params *GetApplicationsWebsParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebsOK, error)

	UpdateApplicationsWeb(params *UpdateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebCreated, *UpdateApplicationsWebNoContent, error)

	UpdateApplicationsWebDataPrivacy(params *UpdateApplicationsWebDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebDataPrivacyNoContent, error)

	UpdateApplicationsWebDefault(params *UpdateApplicationsWebDefaultParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebDefaultNoContent, error)

	UpdateApplicationsWebDefaultDataPrivacy(params *UpdateApplicationsWebDefaultDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebDefaultDataPrivacyNoContent, error)

	ValidateCreateApplicationsWeb(params *ValidateCreateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateApplicationsWebNoContent, error)

	ValidateCreateApplicationsWebDefault(params *ValidateCreateApplicationsWebDefaultParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateApplicationsWebDefaultNoContent, error)

	ValidateUpdateApplicationsDataPrivacy(params *ValidateUpdateApplicationsDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateApplicationsDataPrivacyNoContent, error)

	ValidateUpdateApplicationsWeb(params *ValidateUpdateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateApplicationsWebNoContent, error)

	ValidateUpdateApplicationsWebDefaultDataPrivacy(params *ValidateUpdateApplicationsWebDefaultDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateApplicationsWebDefaultDataPrivacyNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateApplicationsWeb creates a new web application

  The body must not provide an ID as that will be automatically assigned by Dynatrace server.
*/
func (a *Client) CreateApplicationsWeb(params *CreateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*CreateApplicationsWebCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationsWebParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApplicationsWeb",
		Method:             "POST",
		PathPattern:        "/applications/web",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateApplicationsWebReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateApplicationsWebCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApplicationsWeb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteApplicationsWeb deletes the specified web application
*/
func (a *Client) DeleteApplicationsWeb(params *DeleteApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteApplicationsWebNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationsWebParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApplicationsWeb",
		Method:             "DELETE",
		PathPattern:        "/applications/web/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteApplicationsWebReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplicationsWebNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApplicationsWeb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationsWeb gets the configuration of the specified web application
*/
func (a *Client) GetApplicationsWeb(params *GetApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsWebParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationsWeb",
		Method:             "GET",
		PathPattern:        "/applications/web/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsWebReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsWebOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationsWeb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationsWebDataPrivacy gets the data privacy settings of the specified web application
*/
func (a *Client) GetApplicationsWebDataPrivacy(params *GetApplicationsWebDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDataPrivacyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsWebDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationsWebDataPrivacy",
		Method:             "GET",
		PathPattern:        "/applications/web/{id}/dataPrivacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsWebDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsWebDataPrivacyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationsWebDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationsWebDataPrivacyList lists data privacy settings of all web applications
*/
func (a *Client) GetApplicationsWebDataPrivacyList(params *GetApplicationsWebDataPrivacyListParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDataPrivacyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsWebDataPrivacyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationsWebDataPrivacyList",
		Method:             "GET",
		PathPattern:        "/applications/web/dataPrivacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsWebDataPrivacyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsWebDataPrivacyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationsWebDataPrivacyList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationsWebDefault gets the configuration of the default web application

  Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.

After you configure your own applications, all the traffic, which doesn't fit to any of your applications, goes to the default one.
*/
func (a *Client) GetApplicationsWebDefault(params *GetApplicationsWebDefaultParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsWebDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationsWebDefault",
		Method:             "GET",
		PathPattern:        "/applications/web/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsWebDefaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsWebDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationsWebDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationsWebDefaultDataPrivacy gets the data privacy settings of the default web application

  Default application is pre-configured in your Dynatrace environment. By default all the traffic goes to this application.

After you configure your own applications, all the traffic, which doesn't fit to any of your applications, goes to the default one.
*/
func (a *Client) GetApplicationsWebDefaultDataPrivacy(params *GetApplicationsWebDefaultDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebDefaultDataPrivacyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsWebDefaultDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationsWebDefaultDataPrivacy",
		Method:             "GET",
		PathPattern:        "/applications/web/default/dataPrivacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsWebDefaultDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsWebDefaultDataPrivacyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationsWebDefaultDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationsWebs lists all existing web applications
*/
func (a *Client) GetApplicationsWebs(params *GetApplicationsWebsParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsWebsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsWebsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationsWebs",
		Method:             "GET",
		PathPattern:        "/applications/web",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsWebsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsWebsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationsWebs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateApplicationsWeb updates the configuration of the specified web application or creates a new one

  If the application with the specified ID does not exist, a new application will be created.
*/
func (a *Client) UpdateApplicationsWeb(params *UpdateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebCreated, *UpdateApplicationsWebNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationsWebParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateApplicationsWeb",
		Method:             "PUT",
		PathPattern:        "/applications/web/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationsWebReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateApplicationsWebCreated:
		return value, nil, nil
	case *UpdateApplicationsWebNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for web_application_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateApplicationsWebDataPrivacy updates the data privacy settings of the specified web application
*/
func (a *Client) UpdateApplicationsWebDataPrivacy(params *UpdateApplicationsWebDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebDataPrivacyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationsWebDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateApplicationsWebDataPrivacy",
		Method:             "PUT",
		PathPattern:        "/applications/web/{id}/dataPrivacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationsWebDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApplicationsWebDataPrivacyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApplicationsWebDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateApplicationsWebDefault updates the configuration of the default web application

  Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.

After you configure your own applications, all the traffic, which doesn't fit to any of your applications, goes to the default one.
*/
func (a *Client) UpdateApplicationsWebDefault(params *UpdateApplicationsWebDefaultParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebDefaultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationsWebDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateApplicationsWebDefault",
		Method:             "PUT",
		PathPattern:        "/applications/web/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationsWebDefaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApplicationsWebDefaultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApplicationsWebDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateApplicationsWebDefaultDataPrivacy updates the data privacy settings of the default web application

  Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.

After you configure your own applications, all the traffic, which doesn't fit to any of your applications, goes to the default one.
*/
func (a *Client) UpdateApplicationsWebDefaultDataPrivacy(params *UpdateApplicationsWebDefaultDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApplicationsWebDefaultDataPrivacyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationsWebDefaultDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateApplicationsWebDefaultDataPrivacy",
		Method:             "PUT",
		PathPattern:        "/applications/web/default/dataPrivacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationsWebDefaultDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApplicationsWebDefaultDataPrivacyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateApplicationsWebDefaultDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateApplicationsWeb validates the configuration of the web application for the p o s t applications web request
*/
func (a *Client) ValidateCreateApplicationsWeb(params *ValidateCreateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateApplicationsWebNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateApplicationsWebParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateApplicationsWeb",
		Method:             "POST",
		PathPattern:        "/applications/web/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateApplicationsWebReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateApplicationsWebNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateApplicationsWeb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateApplicationsWebDefault validates the configuration of the default web application for the p u t applications web default request
*/
func (a *Client) ValidateCreateApplicationsWebDefault(params *ValidateCreateApplicationsWebDefaultParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateApplicationsWebDefaultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateApplicationsWebDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateApplicationsWebDefault",
		Method:             "POST",
		PathPattern:        "/applications/web/default/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateApplicationsWebDefaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateApplicationsWebDefaultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateApplicationsWebDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateApplicationsDataPrivacy validates data privacy settings for the p u t applications web id data privacy request
*/
func (a *Client) ValidateUpdateApplicationsDataPrivacy(params *ValidateUpdateApplicationsDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateApplicationsDataPrivacyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateApplicationsDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateApplicationsDataPrivacy",
		Method:             "POST",
		PathPattern:        "/applications/web/{id}/dataPrivacy/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateApplicationsDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateApplicationsDataPrivacyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateApplicationsDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateApplicationsWeb validates the configuration of the web application for the p u t applications web id request
*/
func (a *Client) ValidateUpdateApplicationsWeb(params *ValidateUpdateApplicationsWebParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateApplicationsWebNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateApplicationsWebParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateApplicationsWeb",
		Method:             "POST",
		PathPattern:        "/applications/web/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateApplicationsWebReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateApplicationsWebNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateApplicationsWeb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateApplicationsWebDefaultDataPrivacy validates data privacy settings of the default web application for the p u t applications web default data privacy request
*/
func (a *Client) ValidateUpdateApplicationsWebDefaultDataPrivacy(params *ValidateUpdateApplicationsWebDefaultDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateApplicationsWebDefaultDataPrivacyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateApplicationsWebDefaultDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateApplicationsWebDefaultDataPrivacy",
		Method:             "POST",
		PathPattern:        "/applications/web/default/dataPrivacy/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateApplicationsWebDefaultDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateApplicationsWebDefaultDataPrivacyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateApplicationsWebDefaultDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
