// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_metric_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateAnomalyDetectionMetricEventReader is a Reader for the UpdateAnomalyDetectionMetricEvent structure.
type UpdateAnomalyDetectionMetricEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAnomalyDetectionMetricEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateAnomalyDetectionMetricEventCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateAnomalyDetectionMetricEventNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAnomalyDetectionMetricEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAnomalyDetectionMetricEventCreated creates a UpdateAnomalyDetectionMetricEventCreated with default headers values
func NewUpdateAnomalyDetectionMetricEventCreated() *UpdateAnomalyDetectionMetricEventCreated {
	return &UpdateAnomalyDetectionMetricEventCreated{}
}

/*UpdateAnomalyDetectionMetricEventCreated handles this case with default header values.

Success. The new metric event has been created. The response contains the ID of the newly created metric event
*/
type UpdateAnomalyDetectionMetricEventCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateAnomalyDetectionMetricEventCreated) Error() string {
	return fmt.Sprintf("[PUT /anomalyDetection/metricEvents/{id}][%d] updateAnomalyDetectionMetricEventCreated  %+v", 201, o.Payload)
}

func (o *UpdateAnomalyDetectionMetricEventCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateAnomalyDetectionMetricEventCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAnomalyDetectionMetricEventNoContent creates a UpdateAnomalyDetectionMetricEventNoContent with default headers values
func NewUpdateAnomalyDetectionMetricEventNoContent() *UpdateAnomalyDetectionMetricEventNoContent {
	return &UpdateAnomalyDetectionMetricEventNoContent{}
}

/*UpdateAnomalyDetectionMetricEventNoContent handles this case with default header values.

Success. The metric event has been updated. The response is empty.
*/
type UpdateAnomalyDetectionMetricEventNoContent struct {
}

func (o *UpdateAnomalyDetectionMetricEventNoContent) Error() string {
	return fmt.Sprintf("[PUT /anomalyDetection/metricEvents/{id}][%d] updateAnomalyDetectionMetricEventNoContent ", 204)
}

func (o *UpdateAnomalyDetectionMetricEventNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAnomalyDetectionMetricEventBadRequest creates a UpdateAnomalyDetectionMetricEventBadRequest with default headers values
func NewUpdateAnomalyDetectionMetricEventBadRequest() *UpdateAnomalyDetectionMetricEventBadRequest {
	return &UpdateAnomalyDetectionMetricEventBadRequest{}
}

/*UpdateAnomalyDetectionMetricEventBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateAnomalyDetectionMetricEventBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateAnomalyDetectionMetricEventBadRequest) Error() string {
	return fmt.Sprintf("[PUT /anomalyDetection/metricEvents/{id}][%d] updateAnomalyDetectionMetricEventBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAnomalyDetectionMetricEventBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateAnomalyDetectionMetricEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
