// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_metric_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new anomaly detection metric events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for anomaly detection metric events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAnomalyDetectionMetricEvent(params *CreateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAnomalyDetectionMetricEventCreated, error)

	DeleteAnomalyDetectionMetricEvent(params *DeleteAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAnomalyDetectionMetricEventNoContent, error)

	GetAnomalyDetectionMetricEvent(params *GetAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionMetricEventOK, error)

	GetAnomalyDetectionMetricEvents(params *GetAnomalyDetectionMetricEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionMetricEventsOK, error)

	UpdateAnomalyDetectionMetricEvent(params *UpdateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionMetricEventCreated, *UpdateAnomalyDetectionMetricEventNoContent, error)

	ValidateCreateAnomalyDetectionMetricEvent(params *ValidateCreateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAnomalyDetectionMetricEventNoContent, error)

	ValidateUpdateAnomalyDetectionMetricEvent(params *ValidateUpdateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionMetricEventNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAnomalyDetectionMetricEvent creates a new metric event pipe maturity e a r l y a d o p t e r

  The response contains the ID of the newly created metric event.
*/
func (a *Client) CreateAnomalyDetectionMetricEvent(params *CreateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAnomalyDetectionMetricEventCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAnomalyDetectionMetricEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAnomalyDetectionMetricEvent",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/metricEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAnomalyDetectionMetricEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAnomalyDetectionMetricEventCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAnomalyDetectionMetricEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAnomalyDetectionMetricEvent deletes the specified metric event pipe maturity e a r l y a d o p t e r

  You can't delete events created by plugins.
*/
func (a *Client) DeleteAnomalyDetectionMetricEvent(params *DeleteAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAnomalyDetectionMetricEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAnomalyDetectionMetricEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAnomalyDetectionMetricEvent",
		Method:             "DELETE",
		PathPattern:        "/anomalyDetection/metricEvents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAnomalyDetectionMetricEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAnomalyDetectionMetricEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAnomalyDetectionMetricEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAnomalyDetectionMetricEvent gets the properties of the specified metric event pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetAnomalyDetectionMetricEvent(params *GetAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionMetricEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnomalyDetectionMetricEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnomalyDetectionMetricEvent",
		Method:             "GET",
		PathPattern:        "/anomalyDetection/metricEvents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnomalyDetectionMetricEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnomalyDetectionMetricEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnomalyDetectionMetricEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAnomalyDetectionMetricEvents lists all configured metric events pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetAnomalyDetectionMetricEvents(params *GetAnomalyDetectionMetricEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionMetricEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnomalyDetectionMetricEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnomalyDetectionMetricEvents",
		Method:             "GET",
		PathPattern:        "/anomalyDetection/metricEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnomalyDetectionMetricEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnomalyDetectionMetricEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnomalyDetectionMetricEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAnomalyDetectionMetricEvent updates an existing metric event or creates a new one pipe maturity e a r l y a d o p t e r

  If the metric event with the specified ID does not exist, a new metric event will be created.

 You can't update the **type** of the metric event.
*/
func (a *Client) UpdateAnomalyDetectionMetricEvent(params *UpdateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionMetricEventCreated, *UpdateAnomalyDetectionMetricEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAnomalyDetectionMetricEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAnomalyDetectionMetricEvent",
		Method:             "PUT",
		PathPattern:        "/anomalyDetection/metricEvents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAnomalyDetectionMetricEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAnomalyDetectionMetricEventCreated:
		return value, nil, nil
	case *UpdateAnomalyDetectionMetricEventNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for anomaly_detection_metric_events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateAnomalyDetectionMetricEvent validates the payload for the p o s t anomaly detection metric events request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateCreateAnomalyDetectionMetricEvent(params *ValidateCreateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAnomalyDetectionMetricEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateAnomalyDetectionMetricEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateAnomalyDetectionMetricEvent",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/metricEvents/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateAnomalyDetectionMetricEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateAnomalyDetectionMetricEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateAnomalyDetectionMetricEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateAnomalyDetectionMetricEvent validates the payload for the p u t anomaly detection metric events id request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateUpdateAnomalyDetectionMetricEvent(params *ValidateUpdateAnomalyDetectionMetricEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionMetricEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateAnomalyDetectionMetricEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateAnomalyDetectionMetricEvent",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/metricEvents/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateAnomalyDetectionMetricEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateAnomalyDetectionMetricEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateAnomalyDetectionMetricEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
