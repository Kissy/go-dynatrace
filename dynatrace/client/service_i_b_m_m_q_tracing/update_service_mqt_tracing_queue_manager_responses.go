// Code generated by go-swagger; DO NOT EDIT.

package service_i_b_m_m_q_tracing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateServiceMqtTracingQueueManagerReader is a Reader for the UpdateServiceMqtTracingQueueManager structure.
type UpdateServiceMqtTracingQueueManagerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceMqtTracingQueueManagerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateServiceMqtTracingQueueManagerCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateServiceMqtTracingQueueManagerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceMqtTracingQueueManagerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateServiceMqtTracingQueueManagerCreated creates a UpdateServiceMqtTracingQueueManagerCreated with default headers values
func NewUpdateServiceMqtTracingQueueManagerCreated() *UpdateServiceMqtTracingQueueManagerCreated {
	return &UpdateServiceMqtTracingQueueManagerCreated{}
}

/*UpdateServiceMqtTracingQueueManagerCreated handles this case with default header values.

Success. The new queue manager has been created. Response contains the name of the queue manager.
*/
type UpdateServiceMqtTracingQueueManagerCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateServiceMqtTracingQueueManagerCreated) Error() string {
	return fmt.Sprintf("[PUT /service/ibmMQTracing/queueManager/{name}][%d] updateServiceMqtTracingQueueManagerCreated  %+v", 201, o.Payload)
}

func (o *UpdateServiceMqtTracingQueueManagerCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateServiceMqtTracingQueueManagerCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceMqtTracingQueueManagerNoContent creates a UpdateServiceMqtTracingQueueManagerNoContent with default headers values
func NewUpdateServiceMqtTracingQueueManagerNoContent() *UpdateServiceMqtTracingQueueManagerNoContent {
	return &UpdateServiceMqtTracingQueueManagerNoContent{}
}

/*UpdateServiceMqtTracingQueueManagerNoContent handles this case with default header values.

Success. The queue manager has been updated. Response doesn't have a body.
*/
type UpdateServiceMqtTracingQueueManagerNoContent struct {
}

func (o *UpdateServiceMqtTracingQueueManagerNoContent) Error() string {
	return fmt.Sprintf("[PUT /service/ibmMQTracing/queueManager/{name}][%d] updateServiceMqtTracingQueueManagerNoContent ", 204)
}

func (o *UpdateServiceMqtTracingQueueManagerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceMqtTracingQueueManagerBadRequest creates a UpdateServiceMqtTracingQueueManagerBadRequest with default headers values
func NewUpdateServiceMqtTracingQueueManagerBadRequest() *UpdateServiceMqtTracingQueueManagerBadRequest {
	return &UpdateServiceMqtTracingQueueManagerBadRequest{}
}

/*UpdateServiceMqtTracingQueueManagerBadRequest handles this case with default header values.

Failed. The input is invalid. See the response body for details.
*/
type UpdateServiceMqtTracingQueueManagerBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateServiceMqtTracingQueueManagerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /service/ibmMQTracing/queueManager/{name}][%d] updateServiceMqtTracingQueueManagerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceMqtTracingQueueManagerBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateServiceMqtTracingQueueManagerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
