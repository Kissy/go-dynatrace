// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new anomaly detection services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for anomaly detection services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAnomalyDetectionServices(params *GetAnomalyDetectionServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionServicesOK, error)

	UpdateAnomalyDetectionServices(params *UpdateAnomalyDetectionServicesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionServicesNoContent, error)

	ValidateUpdateAnomalyDetectionServices(params *ValidateUpdateAnomalyDetectionServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionServicesNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAnomalyDetectionServices gets the service anomaly detection configuration
*/
func (a *Client) GetAnomalyDetectionServices(params *GetAnomalyDetectionServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnomalyDetectionServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnomalyDetectionServices",
		Method:             "GET",
		PathPattern:        "/anomalyDetection/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnomalyDetectionServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnomalyDetectionServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnomalyDetectionServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAnomalyDetectionServices updates the service anomaly detection configuration
*/
func (a *Client) UpdateAnomalyDetectionServices(params *UpdateAnomalyDetectionServicesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionServicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAnomalyDetectionServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAnomalyDetectionServices",
		Method:             "PUT",
		PathPattern:        "/anomalyDetection/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAnomalyDetectionServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAnomalyDetectionServicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAnomalyDetectionServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateAnomalyDetectionServices validates the payload for the p u t anomaly detection services request
*/
func (a *Client) ValidateUpdateAnomalyDetectionServices(params *ValidateUpdateAnomalyDetectionServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionServicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateAnomalyDetectionServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateAnomalyDetectionServices",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/services/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateAnomalyDetectionServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateAnomalyDetectionServicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateAnomalyDetectionServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
