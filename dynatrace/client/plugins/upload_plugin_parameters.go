// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// NewUploadPluginParams creates a new UploadPluginParams object
// with the default values initialized.
func NewUploadPluginParams() *UploadPluginParams {
	var (
		overrideAlertsDefault = bool(false)
	)
	return &UploadPluginParams{
		OverrideAlerts: &overrideAlertsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadPluginParamsWithTimeout creates a new UploadPluginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadPluginParamsWithTimeout(timeout time.Duration) *UploadPluginParams {
	var (
		overrideAlertsDefault = bool(false)
	)
	return &UploadPluginParams{
		OverrideAlerts: &overrideAlertsDefault,

		timeout: timeout,
	}
}

// NewUploadPluginParamsWithContext creates a new UploadPluginParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadPluginParamsWithContext(ctx context.Context) *UploadPluginParams {
	var (
		overrideAlertsDefault = bool(false)
	)
	return &UploadPluginParams{
		OverrideAlerts: &overrideAlertsDefault,

		Context: ctx,
	}
}

// NewUploadPluginParamsWithHTTPClient creates a new UploadPluginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadPluginParamsWithHTTPClient(client *http.Client) *UploadPluginParams {
	var (
		overrideAlertsDefault = bool(false)
	)
	return &UploadPluginParams{
		OverrideAlerts: &overrideAlertsDefault,
		HTTPClient:     client,
	}
}

/*UploadPluginParams contains all the parameters to send to the API endpoint
for the upload plugin operation typically these are written to a http.Request
*/
type UploadPluginParams struct {

	/*Body
	  Plugin ZIP file to be uploaded.

	 File name must match the **name** field in the `plugin.json` file.

	For example, for the plugin whose **name** is `custom.remote.python.demo`, the name of the plugin file must be `custom.remote.python.demo.zip`.

	*/
	Body dynatrace.InputStream
	/*OverrideAlerts
	  Use plugin-defined thresholds for alerts (`true`) or user-defined thresholds (`false`).

	 Plugin-defined thresholds are stored in the `plugin.json` file.

	If not set, user-defined thresholds are used.

	*/
	OverrideAlerts *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload plugin params
func (o *UploadPluginParams) WithTimeout(timeout time.Duration) *UploadPluginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload plugin params
func (o *UploadPluginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload plugin params
func (o *UploadPluginParams) WithContext(ctx context.Context) *UploadPluginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload plugin params
func (o *UploadPluginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload plugin params
func (o *UploadPluginParams) WithHTTPClient(client *http.Client) *UploadPluginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload plugin params
func (o *UploadPluginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the upload plugin params
func (o *UploadPluginParams) WithBody(body dynatrace.InputStream) *UploadPluginParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the upload plugin params
func (o *UploadPluginParams) SetBody(body dynatrace.InputStream) {
	o.Body = body
}

// WithOverrideAlerts adds the overrideAlerts to the upload plugin params
func (o *UploadPluginParams) WithOverrideAlerts(overrideAlerts *bool) *UploadPluginParams {
	o.SetOverrideAlerts(overrideAlerts)
	return o
}

// SetOverrideAlerts adds the overrideAlerts to the upload plugin params
func (o *UploadPluginParams) SetOverrideAlerts(overrideAlerts *bool) {
	o.OverrideAlerts = overrideAlerts
}

// WriteToRequest writes these params to a swagger request
func (o *UploadPluginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.OverrideAlerts != nil {

		// query param overrideAlerts
		var qrOverrideAlerts bool
		if o.OverrideAlerts != nil {
			qrOverrideAlerts = *o.OverrideAlerts
		}
		qOverrideAlerts := swag.FormatBool(qrOverrideAlerts)
		if qOverrideAlerts != "" {
			if err := r.SetQueryParam("overrideAlerts", qOverrideAlerts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
