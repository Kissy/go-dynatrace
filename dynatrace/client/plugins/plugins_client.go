// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new plugins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePluginEndpoint(params *CreatePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePluginEndpointCreated, error)

	DeletePluginBinary(params *DeletePluginBinaryParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePluginBinaryNoContent, error)

	DeletePluginEndpoint(params *DeletePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePluginEndpointNoContent, error)

	GetActiveGatePlugins(params *GetActiveGatePluginsParams, authInfo runtime.ClientAuthInfoWriter) (*GetActiveGatePluginsOK, error)

	GetPlugin(params *GetPluginParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginOK, error)

	GetPluginBinary(params *GetPluginBinaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginBinaryOK, error)

	GetPluginEndpoint(params *GetPluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginEndpointOK, error)

	GetPluginEndpoints(params *GetPluginEndpointsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginEndpointsOK, error)

	GetPluginStates(params *GetPluginStatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginStatesOK, error)

	GetPlugins(params *GetPluginsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginsOK, error)

	UpdatePluginEndpoint(params *UpdatePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePluginEndpointNoContent, error)

	UploadPlugin(params *UploadPluginParams, authInfo runtime.ClientAuthInfoWriter) (*UploadPluginCreated, error)

	ValidateCreatePluginEndpoint(params *ValidateCreatePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreatePluginEndpointNoContent, error)

	ValidateUploadPlugin(params *ValidateUploadPluginParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUploadPluginNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePluginEndpoint creates a new endpoint for the specified active gate plugin

  The body must not provide an ID of the endpoint, as IDs are automatically assigned.
*/
func (a *Client) CreatePluginEndpoint(params *CreatePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePluginEndpointCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePluginEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPluginEndpoint",
		Method:             "POST",
		PathPattern:        "/plugins/{id}/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePluginEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePluginEndpointCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPluginEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePluginBinary deletes the z IP file of the specified plugin

  Deletion of the plugin file uninstalls the plugin, making it unavailable for use.
*/
func (a *Client) DeletePluginBinary(params *DeletePluginBinaryParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePluginBinaryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePluginBinaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePluginBinary",
		Method:             "DELETE",
		PathPattern:        "/plugins/{id}/binary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePluginBinaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePluginBinaryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePluginBinary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePluginEndpoint deletes an existing endpoint of the active gate plugin
*/
func (a *Client) DeletePluginEndpoint(params *DeletePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePluginEndpointNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePluginEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePluginEndpoint",
		Method:             "DELETE",
		PathPattern:        "/plugins/{id}/endpoints/{endpointId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePluginEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePluginEndpointNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePluginEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActiveGatePlugins lists available active gate plugin modules
*/
func (a *Client) GetActiveGatePlugins(params *GetActiveGatePluginsParams, authInfo runtime.ClientAuthInfoWriter) (*GetActiveGatePluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveGatePluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActiveGatePlugins",
		Method:             "GET",
		PathPattern:        "/plugins/activeGatePluginModules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActiveGatePluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActiveGatePluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActiveGatePlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlugin lists the properties of the specified plugin
*/
func (a *Client) GetPlugin(params *GetPluginParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugin",
		Method:             "GET",
		PathPattern:        "/plugins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginBinary downloads the z IP file of the specified plugin
*/
func (a *Client) GetPluginBinary(params *GetPluginBinaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginBinaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginBinaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginBinary",
		Method:             "GET",
		PathPattern:        "/plugins/{id}/binary",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPluginBinaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginBinaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginBinary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginEndpoint gets parameters of the specified endpoint of the active gate plugin
*/
func (a *Client) GetPluginEndpoint(params *GetPluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginEndpoint",
		Method:             "GET",
		PathPattern:        "/plugins/{id}/endpoints/{endpointId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPluginEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginEndpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginEndpoints lists endpoints of the specified active gate plugin
*/
func (a *Client) GetPluginEndpoints(params *GetPluginEndpointsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginEndpoints",
		Method:             "GET",
		PathPattern:        "/plugins/{id}/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPluginEndpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginStates lists the states of the specified plugin
*/
func (a *Client) GetPluginStates(params *GetPluginStatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginStatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginStates",
		Method:             "GET",
		PathPattern:        "/plugins/{id}/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPluginStatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginStates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlugins lists all uploaded plugins
*/
func (a *Client) GetPlugins(params *GetPluginsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugins",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePluginEndpoint updates an existing endpoint of the active gate plugin
*/
func (a *Client) UpdatePluginEndpoint(params *UpdatePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePluginEndpointNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePluginEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePluginEndpoint",
		Method:             "PUT",
		PathPattern:        "/plugins/{id}/endpoints/{endpointId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePluginEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePluginEndpointNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePluginEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadPlugin uploads a z IP plugin file
*/
func (a *Client) UploadPlugin(params *UploadPluginParams, authInfo runtime.ClientAuthInfoWriter) (*UploadPluginCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadPlugin",
		Method:             "POST",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadPluginCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreatePluginEndpoint validates the payload for the p o s t plugins id endpoints request
*/
func (a *Client) ValidateCreatePluginEndpoint(params *ValidateCreatePluginEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreatePluginEndpointNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreatePluginEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreatePluginEndpoint",
		Method:             "POST",
		PathPattern:        "/plugins/{id}/endpoints/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreatePluginEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreatePluginEndpointNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreatePluginEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUploadPlugin validates a z IP plugin file for p o s t plugins request
*/
func (a *Client) ValidateUploadPlugin(params *ValidateUploadPluginParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUploadPluginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUploadPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUploadPlugin",
		Method:             "POST",
		PathPattern:        "/plugins/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUploadPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUploadPluginNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUploadPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
