// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// NewValidateUploadPluginParams creates a new ValidateUploadPluginParams object
// with the default values initialized.
func NewValidateUploadPluginParams() *ValidateUploadPluginParams {
	var (
		jSONOnlyDefault = bool(false)
	)
	return &ValidateUploadPluginParams{
		JSONOnly: &jSONOnlyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewValidateUploadPluginParamsWithTimeout creates a new ValidateUploadPluginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewValidateUploadPluginParamsWithTimeout(timeout time.Duration) *ValidateUploadPluginParams {
	var (
		jSONOnlyDefault = bool(false)
	)
	return &ValidateUploadPluginParams{
		JSONOnly: &jSONOnlyDefault,

		timeout: timeout,
	}
}

// NewValidateUploadPluginParamsWithContext creates a new ValidateUploadPluginParams object
// with the default values initialized, and the ability to set a context for a request
func NewValidateUploadPluginParamsWithContext(ctx context.Context) *ValidateUploadPluginParams {
	var (
		jsonOnlyDefault = bool(false)
	)
	return &ValidateUploadPluginParams{
		JSONOnly: &jsonOnlyDefault,

		Context: ctx,
	}
}

// NewValidateUploadPluginParamsWithHTTPClient creates a new ValidateUploadPluginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewValidateUploadPluginParamsWithHTTPClient(client *http.Client) *ValidateUploadPluginParams {
	var (
		jsonOnlyDefault = bool(false)
	)
	return &ValidateUploadPluginParams{
		JSONOnly:   &jsonOnlyDefault,
		HTTPClient: client,
	}
}

/*ValidateUploadPluginParams contains all the parameters to send to the API endpoint
for the validate upload plugin operation typically these are written to a http.Request
*/
type ValidateUploadPluginParams struct {

	/*Body
	 The ZIP plugin file to be uploaded.

	The file name must match the ID of the plugin. Example: `custom.remote.python.demo.zip`

	*/
	Body dynatrace.InputStream
	/*JSONOnly
	 Validate only the `plugin.json` file (`true`) or the entire plugin structure (`false`).

	If not set, the entire plugin is validated.

	*/
	JSONOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the validate upload plugin params
func (o *ValidateUploadPluginParams) WithTimeout(timeout time.Duration) *ValidateUploadPluginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the validate upload plugin params
func (o *ValidateUploadPluginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the validate upload plugin params
func (o *ValidateUploadPluginParams) WithContext(ctx context.Context) *ValidateUploadPluginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the validate upload plugin params
func (o *ValidateUploadPluginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the validate upload plugin params
func (o *ValidateUploadPluginParams) WithHTTPClient(client *http.Client) *ValidateUploadPluginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the validate upload plugin params
func (o *ValidateUploadPluginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the validate upload plugin params
func (o *ValidateUploadPluginParams) WithBody(body dynatrace.InputStream) *ValidateUploadPluginParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the validate upload plugin params
func (o *ValidateUploadPluginParams) SetBody(body dynatrace.InputStream) {
	o.Body = body
}

// WithJSONOnly adds the jSONOnly to the validate upload plugin params
func (o *ValidateUploadPluginParams) WithJSONOnly(jSONOnly *bool) *ValidateUploadPluginParams {
	o.SetJSONOnly(jSONOnly)
	return o
}

// SetJSONOnly adds the jsonOnly to the validate upload plugin params
func (o *ValidateUploadPluginParams) SetJSONOnly(jSONOnly *bool) {
	o.JSONOnly = jSONOnly
}

// WriteToRequest writes these params to a swagger request
func (o *ValidateUploadPluginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.JSONOnly != nil {

		// query param jsonOnly
		var qrJSONOnly bool
		if o.JSONOnly != nil {
			qrJSONOnly = *o.JSONOnly
		}
		qJSONOnly := swag.FormatBool(qrJSONOnly)
		if qJSONOnly != "" {
			if err := r.SetQueryParam("jsonOnly", qJSONOnly); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
