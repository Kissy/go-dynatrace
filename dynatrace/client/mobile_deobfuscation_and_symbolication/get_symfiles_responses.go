// Code generated by go-swagger; DO NOT EDIT.

package mobile_deobfuscation_and_symbolication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// GetSymfilesReader is a Reader for the GetSymfiles structure.
type GetSymfilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSymfilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSymfilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSymfilesOK creates a GetSymfilesOK with default headers values
func NewGetSymfilesOK() *GetSymfilesOK {
	return &GetSymfilesOK{}
}

/*GetSymfilesOK handles this case with default header values.

successful operation
*/
type GetSymfilesOK struct {
	Payload *dynatrace.SymbolFileList
}

func (o *GetSymfilesOK) Error() string {
	return fmt.Sprintf("[GET /symfiles][%d] getSymfilesOK  %+v", 200, o.Payload)
}

func (o *GetSymfilesOK) GetPayload() *dynatrace.SymbolFileList {
	return o.Payload
}

func (o *GetSymfilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.SymbolFileList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
