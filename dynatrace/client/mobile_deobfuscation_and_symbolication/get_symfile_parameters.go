// Code generated by go-swagger; DO NOT EDIT.

package mobile_deobfuscation_and_symbolication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSymfileParams creates a new GetSymfileParams object
// with the default values initialized.
func NewGetSymfileParams() *GetSymfileParams {
	var ()
	return &GetSymfileParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSymfileParamsWithTimeout creates a new GetSymfileParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSymfileParamsWithTimeout(timeout time.Duration) *GetSymfileParams {
	var ()
	return &GetSymfileParams{

		timeout: timeout,
	}
}

// NewGetSymfileParamsWithContext creates a new GetSymfileParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSymfileParamsWithContext(ctx context.Context) *GetSymfileParams {
	var ()
	return &GetSymfileParams{

		Context: ctx,
	}
}

// NewGetSymfileParamsWithHTTPClient creates a new GetSymfileParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSymfileParamsWithHTTPClient(client *http.Client) *GetSymfileParams {
	var ()
	return &GetSymfileParams{
		HTTPClient: client,
	}
}

/*GetSymfileParams contains all the parameters to send to the API endpoint
for the get symfile operation typically these are written to a http.Request
*/
type GetSymfileParams struct {

	/*ApplicationID
	  The application id used in Dynatrace for the mobile application to be queried

	*/
	ApplicationID strfmt.UUID
	/*Os
	  The operating system for which the file should be displayed.

	*/
	Os string
	/*PackageName
	  The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app to be queried

	*/
	PackageName string
	/*VersionCode
	  The version code (Android) / CFBundleVersion (iOS) of the file to be retrieved

	*/
	VersionCode string
	/*VersionName
	  The version name (Android) / CFBundleShortVersionString (iOS) of the file to be retrieved

	*/
	VersionName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get symfile params
func (o *GetSymfileParams) WithTimeout(timeout time.Duration) *GetSymfileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get symfile params
func (o *GetSymfileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get symfile params
func (o *GetSymfileParams) WithContext(ctx context.Context) *GetSymfileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get symfile params
func (o *GetSymfileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get symfile params
func (o *GetSymfileParams) WithHTTPClient(client *http.Client) *GetSymfileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get symfile params
func (o *GetSymfileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get symfile params
func (o *GetSymfileParams) WithApplicationID(applicationID strfmt.UUID) *GetSymfileParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get symfile params
func (o *GetSymfileParams) SetApplicationID(applicationID strfmt.UUID) {
	o.ApplicationID = applicationID
}

// WithOs adds the os to the get symfile params
func (o *GetSymfileParams) WithOs(os string) *GetSymfileParams {
	o.SetOs(os)
	return o
}

// SetOs adds the os to the get symfile params
func (o *GetSymfileParams) SetOs(os string) {
	o.Os = os
}

// WithPackageName adds the packageName to the get symfile params
func (o *GetSymfileParams) WithPackageName(packageName string) *GetSymfileParams {
	o.SetPackageName(packageName)
	return o
}

// SetPackageName adds the packageName to the get symfile params
func (o *GetSymfileParams) SetPackageName(packageName string) {
	o.PackageName = packageName
}

// WithVersionCode adds the versionCode to the get symfile params
func (o *GetSymfileParams) WithVersionCode(versionCode string) *GetSymfileParams {
	o.SetVersionCode(versionCode)
	return o
}

// SetVersionCode adds the versionCode to the get symfile params
func (o *GetSymfileParams) SetVersionCode(versionCode string) {
	o.VersionCode = versionCode
}

// WithVersionName adds the versionName to the get symfile params
func (o *GetSymfileParams) WithVersionName(versionName string) *GetSymfileParams {
	o.SetVersionName(versionName)
	return o
}

// SetVersionName adds the versionName to the get symfile params
func (o *GetSymfileParams) SetVersionName(versionName string) {
	o.VersionName = versionName
}

// WriteToRequest writes these params to a swagger request
func (o *GetSymfileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param applicationId
	if err := r.SetPathParam("applicationId", o.ApplicationID.String()); err != nil {
		return err
	}

	// path param os
	if err := r.SetPathParam("os", o.Os); err != nil {
		return err
	}

	// path param packageName
	if err := r.SetPathParam("packageName", o.PackageName); err != nil {
		return err
	}

	// path param versionCode
	if err := r.SetPathParam("versionCode", o.VersionCode); err != nil {
		return err
	}

	// path param versionName
	if err := r.SetPathParam("versionName", o.VersionName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
