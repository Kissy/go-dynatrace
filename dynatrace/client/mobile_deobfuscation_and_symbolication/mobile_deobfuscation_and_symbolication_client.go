// Code generated by go-swagger; DO NOT EDIT.

package mobile_deobfuscation_and_symbolication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mobile deobfuscation and symbolication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mobile deobfuscation and symbolication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteApplicationSymfiles(params *DeleteApplicationSymfilesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteApplicationSymfilesNoContent, error)

	DeleteSymfile(params *DeleteSymfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSymfileNoContent, error)

	GetApplicationSymfiles(params *GetApplicationSymfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationSymfilesOK, error)

	GetSymfile(params *GetSymfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfileOK, error)

	GetSymfileInfo(params *GetSymfileInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfileInfoOK, error)

	GetSymfileIosSupportedVersion(params *GetSymfileIosSupportedVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfileIosSupportedVersionOK, error)

	GetSymfiles(params *GetSymfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfilesOK, error)

	UpdateSymfile(params *UpdateSymfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSymfileNoContent, error)

	UpdateSymfilePinning(params *UpdateSymfilePinningParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSymfilePinningNoContent, error)

	ValidateUpdateSymfilePinning(params *ValidateUpdateSymfilePinningParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateSymfilePinningNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteApplicationSymfiles deletes all symbolication file belonging to the dynatrace app specified
*/
func (a *Client) DeleteApplicationSymfiles(params *DeleteApplicationSymfilesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteApplicationSymfilesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationSymfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApplicationSymfiles",
		Method:             "DELETE",
		PathPattern:        "/symfiles/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteApplicationSymfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplicationSymfilesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApplicationSymfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSymfile deletes the symbolication file belonging to the given application os and version
*/
func (a *Client) DeleteSymfile(params *DeleteSymfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSymfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSymfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSymfile",
		Method:             "DELETE",
		PathPattern:        "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSymfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSymfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSymfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationSymfiles lists the metadata of all symbolication files pro guard files for android or d s y m files for i o s apps for one single mobile application from the symbol file store of this tenant
*/
func (a *Client) GetApplicationSymfiles(params *GetApplicationSymfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationSymfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationSymfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationSymfiles",
		Method:             "GET",
		PathPattern:        "/symfiles/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationSymfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationSymfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationSymfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSymfile gets the metadata of the symbolication file belonging to the specified app version there always can exist only one file per os and version
*/
func (a *Client) GetSymfile(params *GetSymfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSymfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSymfile",
		Method:             "GET",
		PathPattern:        "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSymfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSymfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSymfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSymfileInfo retrieves information about used empty diskspace number of stored files
*/
func (a *Client) GetSymfileInfo(params *GetSymfileInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfileInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSymfileInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSymfileInfo",
		Method:             "GET",
		PathPattern:        "/symfiles/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSymfileInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSymfileInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSymfileInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSymfileIosSupportedVersion returns the supported file format version for i o s symbol files
*/
func (a *Client) GetSymfileIosSupportedVersion(params *GetSymfileIosSupportedVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfileIosSupportedVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSymfileIosSupportedVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSymfileIosSupportedVersion",
		Method:             "GET",
		PathPattern:        "/symfiles/ios/supportedversion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSymfileIosSupportedVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSymfileIosSupportedVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSymfileIosSupportedVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSymfiles lists the metadata of all symbolication files pro guard files for android or d s y m files for i o s apps from the symbol file store
*/
func (a *Client) GetSymfiles(params *GetSymfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSymfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSymfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSymfiles",
		Method:             "GET",
		PathPattern:        "/symfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSymfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSymfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSymfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSymfile uploads a symbolication file either a pro guard file for android or a zip file containing all the i o s d s y m files
*/
func (a *Client) UpdateSymfile(params *UpdateSymfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSymfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSymfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSymfile",
		Method:             "PUT",
		PathPattern:        "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-compressed", "application/x-zip-compressed", "application/zip", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSymfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSymfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSymfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSymfilePinning pins or unpin all symbolication files of a app version a pinned file will not be deleted automtically when running out of space
*/
func (a *Client) UpdateSymfilePinning(params *UpdateSymfilePinningParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSymfilePinningNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSymfilePinningParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSymfilePinning",
		Method:             "PUT",
		PathPattern:        "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}/pinning",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSymfilePinningReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSymfilePinningNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSymfilePinning: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateSymfilePinning validates updates of existing request attribute for the p u t application Id package name os version name pinning request
*/
func (a *Client) ValidateUpdateSymfilePinning(params *ValidateUpdateSymfilePinningParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateSymfilePinningNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateSymfilePinningParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateSymfilePinning",
		Method:             "PUT",
		PathPattern:        "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}/pinning/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateSymfilePinningReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateSymfilePinningNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateSymfilePinning: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
