// Code generated by go-swagger; DO NOT EDIT.

package mobile_deobfuscation_and_symbolication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// NewUpdateSymfileParams creates a new UpdateSymfileParams object
// with the default values initialized.
func NewUpdateSymfileParams() *UpdateSymfileParams {
	var ()
	return &UpdateSymfileParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSymfileParamsWithTimeout creates a new UpdateSymfileParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSymfileParamsWithTimeout(timeout time.Duration) *UpdateSymfileParams {
	var ()
	return &UpdateSymfileParams{

		timeout: timeout,
	}
}

// NewUpdateSymfileParamsWithContext creates a new UpdateSymfileParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSymfileParamsWithContext(ctx context.Context) *UpdateSymfileParams {
	var ()
	return &UpdateSymfileParams{

		Context: ctx,
	}
}

// NewUpdateSymfileParamsWithHTTPClient creates a new UpdateSymfileParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSymfileParamsWithHTTPClient(client *http.Client) *UpdateSymfileParams {
	var ()
	return &UpdateSymfileParams{
		HTTPClient: client,
	}
}

/*UpdateSymfileParams contains all the parameters to send to the API endpoint
for the update symfile operation typically these are written to a http.Request
*/
type UpdateSymfileParams struct {

	/*ApplicationID
	  The application id used in Dynatrace of the app this file belongs to

	*/
	ApplicationID strfmt.UUID
	/*Body
	  The file to be uploaded. A progurad file (*.txt) for Android or the zip file produced by the DTXDSSClient provided with the OneAgent for iOS.

	*/
	Body dynatrace.InputStream
	/*ContentType*/
	ContentType *string
	/*Os
	  The operating system the file belongs to

	*/
	Os string
	/*PackageName
	  The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the uploaded file

	*/
	PackageName string
	/*VersionCode
	  The version code (Android) / CFBundleVersion (iOS) the file belongs to

	*/
	VersionCode string
	/*VersionName
	  The version name (Android) / CFBundleShortVersionString (iOS) the file belongs to

	*/
	VersionName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update symfile params
func (o *UpdateSymfileParams) WithTimeout(timeout time.Duration) *UpdateSymfileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update symfile params
func (o *UpdateSymfileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update symfile params
func (o *UpdateSymfileParams) WithContext(ctx context.Context) *UpdateSymfileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update symfile params
func (o *UpdateSymfileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update symfile params
func (o *UpdateSymfileParams) WithHTTPClient(client *http.Client) *UpdateSymfileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update symfile params
func (o *UpdateSymfileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the update symfile params
func (o *UpdateSymfileParams) WithApplicationID(applicationID strfmt.UUID) *UpdateSymfileParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the update symfile params
func (o *UpdateSymfileParams) SetApplicationID(applicationID strfmt.UUID) {
	o.ApplicationID = applicationID
}

// WithBody adds the body to the update symfile params
func (o *UpdateSymfileParams) WithBody(body dynatrace.InputStream) *UpdateSymfileParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update symfile params
func (o *UpdateSymfileParams) SetBody(body dynatrace.InputStream) {
	o.Body = body
}

// WithContentType adds the contentType to the update symfile params
func (o *UpdateSymfileParams) WithContentType(contentType *string) *UpdateSymfileParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the update symfile params
func (o *UpdateSymfileParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithOs adds the os to the update symfile params
func (o *UpdateSymfileParams) WithOs(os string) *UpdateSymfileParams {
	o.SetOs(os)
	return o
}

// SetOs adds the os to the update symfile params
func (o *UpdateSymfileParams) SetOs(os string) {
	o.Os = os
}

// WithPackageName adds the packageName to the update symfile params
func (o *UpdateSymfileParams) WithPackageName(packageName string) *UpdateSymfileParams {
	o.SetPackageName(packageName)
	return o
}

// SetPackageName adds the packageName to the update symfile params
func (o *UpdateSymfileParams) SetPackageName(packageName string) {
	o.PackageName = packageName
}

// WithVersionCode adds the versionCode to the update symfile params
func (o *UpdateSymfileParams) WithVersionCode(versionCode string) *UpdateSymfileParams {
	o.SetVersionCode(versionCode)
	return o
}

// SetVersionCode adds the versionCode to the update symfile params
func (o *UpdateSymfileParams) SetVersionCode(versionCode string) {
	o.VersionCode = versionCode
}

// WithVersionName adds the versionName to the update symfile params
func (o *UpdateSymfileParams) WithVersionName(versionName string) *UpdateSymfileParams {
	o.SetVersionName(versionName)
	return o
}

// SetVersionName adds the versionName to the update symfile params
func (o *UpdateSymfileParams) SetVersionName(versionName string) {
	o.VersionName = versionName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSymfileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param applicationId
	if err := r.SetPathParam("applicationId", o.ApplicationID.String()); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.ContentType != nil {

		// header param content-type
		if err := r.SetHeaderParam("content-type", *o.ContentType); err != nil {
			return err
		}

	}

	// path param os
	if err := r.SetPathParam("os", o.Os); err != nil {
		return err
	}

	// path param packageName
	if err := r.SetPathParam("packageName", o.PackageName); err != nil {
		return err
	}

	// path param versionCode
	if err := r.SetPathParam("versionCode", o.VersionCode); err != nil {
		return err
	}

	// path param versionName
	if err := r.SetPathParam("versionName", o.VersionName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
