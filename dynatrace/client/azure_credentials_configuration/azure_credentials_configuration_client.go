// Code generated by go-swagger; DO NOT EDIT.

package azure_credentials_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new azure credentials configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for azure credentials configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAzureCredential(params *CreateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAzureCredentialCreated, error)

	DeleteAzureCredential(params *DeleteAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAzureCredentialNoContent, error)

	GetAzureCredential(params *GetAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureCredentialOK, error)

	GetAzureCredentials(params *GetAzureCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureCredentialsOK, error)

	UpdateAzureCredential(params *UpdateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAzureCredentialCreated, *UpdateAzureCredentialNoContent, error)

	ValidateCreateAzureCredential(params *ValidateCreateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAzureCredentialNoContent, error)

	ValidateUpdateAzureCredential(params *ValidateUpdateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAzureCredentialNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAzureCredential creates a new azure credentials configuration

  The body must not provide an ID as it will be automatically assigned by the Dynatrace server.
*/
func (a *Client) CreateAzureCredential(params *CreateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAzureCredentialCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureCredential",
		Method:             "POST",
		PathPattern:        "/azure/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureCredentialCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAzureCredential deletes the specified azure credentials configuration
*/
func (a *Client) DeleteAzureCredential(params *DeleteAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAzureCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAzureCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAzureCredential",
		Method:             "DELETE",
		PathPattern:        "/azure/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAzureCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAzureCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAzureCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureCredential gets the configuration of the specified azure credentials
*/
func (a *Client) GetAzureCredential(params *GetAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCredential",
		Method:             "GET",
		PathPattern:        "/azure/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureCredentials lists all available azure credentials configurations
*/
func (a *Client) GetAzureCredentials(params *GetAzureCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCredentials",
		Method:             "GET",
		PathPattern:        "/azure/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAzureCredential updates an existing azure credentials configuration

  You can't change the application(client)Id or tenant(directory)Id of the Azure configuration - you need to create new credentials for that.

If a configuration with the specified ID doesn't exist, a new configuration is created.
*/
func (a *Client) UpdateAzureCredential(params *UpdateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAzureCredentialCreated, *UpdateAzureCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAzureCredential",
		Method:             "PUT",
		PathPattern:        "/azure/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAzureCredentialCreated:
		return value, nil, nil
	case *UpdateAzureCredentialNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for azure_credentials_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateAzureCredential validates the payload for the p o s t azure credentials request
*/
func (a *Client) ValidateCreateAzureCredential(params *ValidateCreateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAzureCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateAzureCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateAzureCredential",
		Method:             "POST",
		PathPattern:        "/azure/credentials/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateAzureCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateAzureCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateAzureCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateAzureCredential validates the payload for the p u t azure credentials id request
*/
func (a *Client) ValidateUpdateAzureCredential(params *ValidateUpdateAzureCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAzureCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateAzureCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateAzureCredential",
		Method:             "POST",
		PathPattern:        "/azure/credentials/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateAzureCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateAzureCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateAzureCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
