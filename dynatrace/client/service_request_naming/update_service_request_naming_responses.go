// Code generated by go-swagger; DO NOT EDIT.

package service_request_naming

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateServiceRequestNamingReader is a Reader for the UpdateServiceRequestNaming structure.
type UpdateServiceRequestNamingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceRequestNamingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateServiceRequestNamingCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateServiceRequestNamingNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceRequestNamingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateServiceRequestNamingCreated creates a UpdateServiceRequestNamingCreated with default headers values
func NewUpdateServiceRequestNamingCreated() *UpdateServiceRequestNamingCreated {
	return &UpdateServiceRequestNamingCreated{}
}

/*UpdateServiceRequestNamingCreated handles this case with default header values.

Success. Request naming rule has been created. Response contains the new request naming rule's ID and name.
*/
type UpdateServiceRequestNamingCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateServiceRequestNamingCreated) Error() string {
	return fmt.Sprintf("[PUT /service/requestNaming/{id}][%d] updateServiceRequestNamingCreated  %+v", 201, o.Payload)
}

func (o *UpdateServiceRequestNamingCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateServiceRequestNamingCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceRequestNamingNoContent creates a UpdateServiceRequestNamingNoContent with default headers values
func NewUpdateServiceRequestNamingNoContent() *UpdateServiceRequestNamingNoContent {
	return &UpdateServiceRequestNamingNoContent{}
}

/*UpdateServiceRequestNamingNoContent handles this case with default header values.

Success. Request naming rule has been updated. Response doesn't have a body.
*/
type UpdateServiceRequestNamingNoContent struct {
}

func (o *UpdateServiceRequestNamingNoContent) Error() string {
	return fmt.Sprintf("[PUT /service/requestNaming/{id}][%d] updateServiceRequestNamingNoContent ", 204)
}

func (o *UpdateServiceRequestNamingNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceRequestNamingBadRequest creates a UpdateServiceRequestNamingBadRequest with default headers values
func NewUpdateServiceRequestNamingBadRequest() *UpdateServiceRequestNamingBadRequest {
	return &UpdateServiceRequestNamingBadRequest{}
}

/*UpdateServiceRequestNamingBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateServiceRequestNamingBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateServiceRequestNamingBadRequest) Error() string {
	return fmt.Sprintf("[PUT /service/requestNaming/{id}][%d] updateServiceRequestNamingBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceRequestNamingBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateServiceRequestNamingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
