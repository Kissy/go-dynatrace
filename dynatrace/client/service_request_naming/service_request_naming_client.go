// Code generated by go-swagger; DO NOT EDIT.

package service_request_naming

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service request naming API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service request naming API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServiceRequestNaming(params *CreateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceRequestNamingCreated, error)

	DeleteServiceRequestNaming(params *DeleteServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceRequestNamingNoContent, error)

	GetServiceRequestNaming(params *GetServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceRequestNamingOK, error)

	GetServiceRequestNamings(params *GetServiceRequestNamingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceRequestNamingsOK, error)

	GetServiceResourceNamings(params *GetServiceResourceNamingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceResourceNamingsOK, error)

	UpdateServiceRequestNaming(params *UpdateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceRequestNamingCreated, *UpdateServiceRequestNamingNoContent, error)

	UpdateServiceRequestNamingOrder(params *UpdateServiceRequestNamingOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceRequestNamingOrderNoContent, error)

	UpdateServiceResourceNaming(params *UpdateServiceResourceNamingParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceResourceNamingNoContent, error)

	ValidateCreateServiceRequestNaming(params *ValidateCreateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateServiceRequestNamingNoContent, error)

	ValidateUpdateServiceRequestNaming(params *ValidateUpdateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceRequestNamingNoContent, error)

	ValidateUpdateServiceResourceNaming(params *ValidateUpdateServiceResourceNamingParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceResourceNamingNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateServiceRequestNaming creates a new request naming rule

  The new rule goes to the end of the rules list and will be the last to evaluate. Existing rules remain unaffected.
*/
func (a *Client) CreateServiceRequestNaming(params *CreateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceRequestNamingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceRequestNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServiceRequestNaming",
		Method:             "POST",
		PathPattern:        "/service/requestNaming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceRequestNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceRequestNamingCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createServiceRequestNaming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServiceRequestNaming deletes the specified request naming rule
*/
func (a *Client) DeleteServiceRequestNaming(params *DeleteServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceRequestNamingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceRequestNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceRequestNaming",
		Method:             "DELETE",
		PathPattern:        "/service/requestNaming/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceRequestNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceRequestNamingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceRequestNaming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceRequestNaming gets the parameters of the specified request naming rule
*/
func (a *Client) GetServiceRequestNaming(params *GetServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceRequestNamingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceRequestNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceRequestNaming",
		Method:             "GET",
		PathPattern:        "/service/requestNaming/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceRequestNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceRequestNamingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceRequestNaming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceRequestNamings lists all request naming rules along with their parameters
*/
func (a *Client) GetServiceRequestNamings(params *GetServiceRequestNamingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceRequestNamingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceRequestNamingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceRequestNamings",
		Method:             "GET",
		PathPattern:        "/service/requestNaming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceRequestNamingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceRequestNamingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceRequestNamings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceResourceNamings lists the global service resource requests

  Lists all extensions which currently are renamed to e.g., `Image`
*/
func (a *Client) GetServiceResourceNamings(params *GetServiceResourceNamingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceResourceNamingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceResourceNamingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceResourceNamings",
		Method:             "GET",
		PathPattern:        "/service/resourceNaming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceResourceNamingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceResourceNamingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceResourceNamings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceRequestNaming updates the specified request naming rule

  If the rule with the specified ID doesn't exist, a new rule will be created at the end of the rules list and will be the last to evaluate.
*/
func (a *Client) UpdateServiceRequestNaming(params *UpdateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceRequestNamingCreated, *UpdateServiceRequestNamingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceRequestNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceRequestNaming",
		Method:             "PUT",
		PathPattern:        "/service/requestNaming/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceRequestNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateServiceRequestNamingCreated:
		return value, nil, nil
	case *UpdateServiceRequestNamingNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for service_request_naming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceRequestNamingOrder reorders the request namings

  This request reorders the request namings according to the given list of IDs. Request namings not present in the body of the request will retain their relative ordering but will be ordered *after* all those present in the request.
*/
func (a *Client) UpdateServiceRequestNamingOrder(params *UpdateServiceRequestNamingOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceRequestNamingOrderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceRequestNamingOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceRequestNamingOrder",
		Method:             "PUT",
		PathPattern:        "/service/requestNaming/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceRequestNamingOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceRequestNamingOrderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServiceRequestNamingOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceResourceNaming updates the global service resource requests

  Update all extensions which are renamed to `Image` or `Binary`
*/
func (a *Client) UpdateServiceResourceNaming(params *UpdateServiceResourceNamingParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceResourceNamingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceResourceNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceResourceNaming",
		Method:             "PUT",
		PathPattern:        "/service/resourceNaming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceResourceNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceResourceNamingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServiceResourceNaming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateServiceRequestNaming validates the new request naming rule for the p o s t request naming request
*/
func (a *Client) ValidateCreateServiceRequestNaming(params *ValidateCreateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateServiceRequestNamingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateServiceRequestNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateServiceRequestNaming",
		Method:             "POST",
		PathPattern:        "/service/requestNaming/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateServiceRequestNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateServiceRequestNamingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateServiceRequestNaming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateServiceRequestNaming validates the new request naming for the p u t request naming id request

  If the rule with the specified ID doesn't exist, a new rule will be created at the end of the rules list and will be the last to evaluate.
*/
func (a *Client) ValidateUpdateServiceRequestNaming(params *ValidateUpdateServiceRequestNamingParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceRequestNamingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateServiceRequestNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateServiceRequestNaming",
		Method:             "POST",
		PathPattern:        "/service/requestNaming/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateServiceRequestNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateServiceRequestNamingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateServiceRequestNaming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateServiceResourceNaming validates new resource requests settings for the p u t service resource request request
*/
func (a *Client) ValidateUpdateServiceResourceNaming(params *ValidateUpdateServiceResourceNamingParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceResourceNamingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateServiceResourceNamingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateServiceResourceNaming",
		Method:             "POST",
		PathPattern:        "/service/resourceNaming/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateServiceResourceNamingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateServiceResourceNamingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateServiceResourceNaming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
