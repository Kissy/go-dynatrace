// Code generated by go-swagger; DO NOT EDIT.

package service_detection_full_web_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service detection full web request API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service detection full web request API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServiceDetectionRuleFullRequest(params *CreateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceDetectionRuleFullRequestCreated, error)

	DeleteServiceDetectionRuleFullRequest(params *DeleteServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceDetectionRuleFullRequestNoContent, error)

	GetServiceDetectionRuleFullRequest(params *GetServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleFullRequestOK, error)

	GetServiceDetectionRuleFullRequests(params *GetServiceDetectionRuleFullRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleFullRequestsOK, error)

	UpdateServiceDetectionRuleFullRequest(params *UpdateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleFullRequestCreated, *UpdateServiceDetectionRuleFullRequestNoContent, error)

	UpdateServiceDetectionRuleFullRequestOrder(params *UpdateServiceDetectionRuleFullRequestOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleFullRequestOrderNoContent, error)

	ValidateCreateServiceDetectionRuleFullRequest(params *ValidateCreateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateServiceDetectionRuleFullRequestNoContent, error)

	ValidateUpdateServiceDetectionRuleFullRequest(params *ValidateUpdateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceDetectionRuleFullRequestNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateServiceDetectionRuleFullRequest creates a new service detection rule pipe maturity e a r l y a d o p t e r

  The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
*/
func (a *Client) CreateServiceDetectionRuleFullRequest(params *CreateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceDetectionRuleFullRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceDetectionRuleFullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServiceDetectionRuleFullRequest",
		Method:             "POST",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceDetectionRuleFullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceDetectionRuleFullRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createServiceDetectionRuleFullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServiceDetectionRuleFullRequest deletes the specified service detection rule pipe maturity e a r l y a d o p t e r
*/
func (a *Client) DeleteServiceDetectionRuleFullRequest(params *DeleteServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceDetectionRuleFullRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceDetectionRuleFullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceDetectionRuleFullRequest",
		Method:             "DELETE",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceDetectionRuleFullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceDetectionRuleFullRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceDetectionRuleFullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceDetectionRuleFullRequest gets the properties of the specified service detection rule pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetServiceDetectionRuleFullRequest(params *GetServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleFullRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceDetectionRuleFullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceDetectionRuleFullRequest",
		Method:             "GET",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceDetectionRuleFullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceDetectionRuleFullRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceDetectionRuleFullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceDetectionRuleFullRequests lists all full web service detection rules pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetServiceDetectionRuleFullRequests(params *GetServiceDetectionRuleFullRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetectionRuleFullRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceDetectionRuleFullRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceDetectionRuleFullRequests",
		Method:             "GET",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceDetectionRuleFullRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceDetectionRuleFullRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceDetectionRuleFullRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceDetectionRuleFullRequest updates an existing service detection rule pipe maturity e a r l y a d o p t e r

  If a rule with the specified ID doesn't exist, a new rule is created and appended to the end of the rule list.

 The request keeps the existing order of rules, unless the **order** parameter is set.
*/
func (a *Client) UpdateServiceDetectionRuleFullRequest(params *UpdateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleFullRequestCreated, *UpdateServiceDetectionRuleFullRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceDetectionRuleFullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceDetectionRuleFullRequest",
		Method:             "PUT",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceDetectionRuleFullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateServiceDetectionRuleFullRequestCreated:
		return value, nil, nil
	case *UpdateServiceDetectionRuleFullRequestNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for service_detection_full_web_request: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceDetectionRuleFullRequestOrder reorders the service detection rules of the specified type pipe maturity e a r l y a d o p t e r

  The request reorders the rules of the specified type according to the order of the IDs in the body of the request.

 Rules that are omitted in the body of the request will retain their relative order but will be placed *after* all those present in the request.
*/
func (a *Client) UpdateServiceDetectionRuleFullRequestOrder(params *UpdateServiceDetectionRuleFullRequestOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceDetectionRuleFullRequestOrderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceDetectionRuleFullRequestOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceDetectionRuleFullRequestOrder",
		Method:             "PUT",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceDetectionRuleFullRequestOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceDetectionRuleFullRequestOrderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServiceDetectionRuleFullRequestOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateServiceDetectionRuleFullRequest validates the payload for the p o s t rule based service detection f u l l w e b r e q u e s t request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateCreateServiceDetectionRuleFullRequest(params *ValidateCreateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateServiceDetectionRuleFullRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateServiceDetectionRuleFullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateServiceDetectionRuleFullRequest",
		Method:             "POST",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateServiceDetectionRuleFullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateServiceDetectionRuleFullRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateServiceDetectionRuleFullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateServiceDetectionRuleFullRequest validates the payload for the p u t service detection rules f u l l w e b r e q u e s t id request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateUpdateServiceDetectionRuleFullRequest(params *ValidateUpdateServiceDetectionRuleFullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateServiceDetectionRuleFullRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateServiceDetectionRuleFullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateServiceDetectionRuleFullRequest",
		Method:             "POST",
		PathPattern:        "/service/detectionRules/FULL_WEB_REQUEST/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateServiceDetectionRuleFullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateServiceDetectionRuleFullRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateServiceDetectionRuleFullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
