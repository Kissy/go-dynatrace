// Code generated by go-swagger; DO NOT EDIT.

package management_zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateManagementZoneReader is a Reader for the UpdateManagementZone structure.
type UpdateManagementZoneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateManagementZoneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateManagementZoneCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateManagementZoneNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateManagementZoneBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateManagementZoneCreated creates a UpdateManagementZoneCreated with default headers values
func NewUpdateManagementZoneCreated() *UpdateManagementZoneCreated {
	return &UpdateManagementZoneCreated{}
}

/*UpdateManagementZoneCreated handles this case with default header values.

Success. The management zone with the specified ID has been created. The ID of the new configuration is returned.
*/
type UpdateManagementZoneCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateManagementZoneCreated) Error() string {
	return fmt.Sprintf("[PUT /managementZones/{id}][%d] updateManagementZoneCreated  %+v", 201, o.Payload)
}

func (o *UpdateManagementZoneCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateManagementZoneCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateManagementZoneNoContent creates a UpdateManagementZoneNoContent with default headers values
func NewUpdateManagementZoneNoContent() *UpdateManagementZoneNoContent {
	return &UpdateManagementZoneNoContent{}
}

/*UpdateManagementZoneNoContent handles this case with default header values.

Success. The management zone has been updated. Response doesn't have a body.
*/
type UpdateManagementZoneNoContent struct {
}

func (o *UpdateManagementZoneNoContent) Error() string {
	return fmt.Sprintf("[PUT /managementZones/{id}][%d] updateManagementZoneNoContent ", 204)
}

func (o *UpdateManagementZoneNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateManagementZoneBadRequest creates a UpdateManagementZoneBadRequest with default headers values
func NewUpdateManagementZoneBadRequest() *UpdateManagementZoneBadRequest {
	return &UpdateManagementZoneBadRequest{}
}

/*UpdateManagementZoneBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateManagementZoneBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateManagementZoneBadRequest) Error() string {
	return fmt.Sprintf("[PUT /managementZones/{id}][%d] updateManagementZoneBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateManagementZoneBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateManagementZoneBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
