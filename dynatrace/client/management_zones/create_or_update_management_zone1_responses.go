// Code generated by go-swagger; DO NOT EDIT.

package management_zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// CreateOrUpdateManagementZone1Reader is a Reader for the CreateOrUpdateManagementZone1 structure.
type CreateOrUpdateManagementZone1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrUpdateManagementZone1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateOrUpdateManagementZone1Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewCreateOrUpdateManagementZone1NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateOrUpdateManagementZone1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateOrUpdateManagementZone1Created creates a CreateOrUpdateManagementZone1Created with default headers values
func NewCreateOrUpdateManagementZone1Created() *CreateOrUpdateManagementZone1Created {
	return &CreateOrUpdateManagementZone1Created{}
}

/*CreateOrUpdateManagementZone1Created handles this case with default header values.

Success. The management zone with the specified ID has been created. The ID of the new configuration is returned.
*/
type CreateOrUpdateManagementZone1Created struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *CreateOrUpdateManagementZone1Created) Error() string {
	return fmt.Sprintf("[PUT /managementZones/{id}][%d] createOrUpdateManagementZone1Created  %+v", 201, o.Payload)
}

func (o *CreateOrUpdateManagementZone1Created) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *CreateOrUpdateManagementZone1Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrUpdateManagementZone1NoContent creates a CreateOrUpdateManagementZone1NoContent with default headers values
func NewCreateOrUpdateManagementZone1NoContent() *CreateOrUpdateManagementZone1NoContent {
	return &CreateOrUpdateManagementZone1NoContent{}
}

/*CreateOrUpdateManagementZone1NoContent handles this case with default header values.

Success. The management zone has been updated. Response doesn't have a body.
*/
type CreateOrUpdateManagementZone1NoContent struct {
}

func (o *CreateOrUpdateManagementZone1NoContent) Error() string {
	return fmt.Sprintf("[PUT /managementZones/{id}][%d] createOrUpdateManagementZone1NoContent ", 204)
}

func (o *CreateOrUpdateManagementZone1NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateOrUpdateManagementZone1BadRequest creates a CreateOrUpdateManagementZone1BadRequest with default headers values
func NewCreateOrUpdateManagementZone1BadRequest() *CreateOrUpdateManagementZone1BadRequest {
	return &CreateOrUpdateManagementZone1BadRequest{}
}

/*CreateOrUpdateManagementZone1BadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type CreateOrUpdateManagementZone1BadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *CreateOrUpdateManagementZone1BadRequest) Error() string {
	return fmt.Sprintf("[PUT /managementZones/{id}][%d] createOrUpdateManagementZone1BadRequest  %+v", 400, o.Payload)
}

func (o *CreateOrUpdateManagementZone1BadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *CreateOrUpdateManagementZone1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
