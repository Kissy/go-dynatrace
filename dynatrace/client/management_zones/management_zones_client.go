// Code generated by go-swagger; DO NOT EDIT.

package management_zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new management zones API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for management zones API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateManagementZone(params *CreateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*CreateManagementZoneCreated, error)

	DeleteManagementZone(params *DeleteManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteManagementZoneNoContent, error)

	GetManagementZone(params *GetManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*GetManagementZoneOK, error)

	GetManagementZones(params *GetManagementZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetManagementZonesOK, error)

	UpdateManagementZone(params *UpdateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateManagementZoneCreated, *UpdateManagementZoneNoContent, error)

	ValidateCreateManagementZone(params *ValidateCreateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateManagementZoneNoContent, error)

	ValidateUpdateManagementZone(params *ValidateUpdateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateManagementZoneNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateManagementZone creates a new management zone

  The body must not provide an ID as IDs are automatically assigned.
*/
func (a *Client) CreateManagementZone(params *CreateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*CreateManagementZoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateManagementZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createManagementZone",
		Method:             "POST",
		PathPattern:        "/managementZones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateManagementZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateManagementZoneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createManagementZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteManagementZone deletes the specified management zone
*/
func (a *Client) DeleteManagementZone(params *DeleteManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteManagementZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteManagementZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteManagementZone",
		Method:             "DELETE",
		PathPattern:        "/managementZones/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteManagementZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteManagementZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteManagementZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetManagementZone lists the parameters of the specified management zone
*/
func (a *Client) GetManagementZone(params *GetManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*GetManagementZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManagementZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getManagementZone",
		Method:             "GET",
		PathPattern:        "/managementZones/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetManagementZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManagementZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getManagementZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetManagementZones lists all configured management zones
*/
func (a *Client) GetManagementZones(params *GetManagementZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetManagementZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManagementZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getManagementZones",
		Method:             "GET",
		PathPattern:        "/managementZones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetManagementZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManagementZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getManagementZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateManagementZone updates the specified management zone or creates it
*/
func (a *Client) UpdateManagementZone(params *UpdateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateManagementZoneCreated, *UpdateManagementZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateManagementZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateManagementZone",
		Method:             "PUT",
		PathPattern:        "/managementZones/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateManagementZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateManagementZoneCreated:
		return value, nil, nil
	case *UpdateManagementZoneNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for management_zones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateManagementZone validates a new management zone for the p o s t management zones request
*/
func (a *Client) ValidateCreateManagementZone(params *ValidateCreateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateManagementZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateManagementZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateManagementZone",
		Method:             "POST",
		PathPattern:        "/managementZones/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateManagementZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateManagementZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateManagementZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateManagementZone validates updates of existing management zone for the p u t management zones id request
*/
func (a *Client) ValidateUpdateManagementZone(params *ValidateUpdateManagementZoneParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateManagementZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateManagementZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateManagementZone",
		Method:             "POST",
		PathPattern:        "/managementZones/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateManagementZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateManagementZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateManagementZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
