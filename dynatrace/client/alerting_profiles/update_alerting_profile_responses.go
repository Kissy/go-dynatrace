// Code generated by go-swagger; DO NOT EDIT.

package alerting_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateAlertingProfileReader is a Reader for the UpdateAlertingProfile structure.
type UpdateAlertingProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAlertingProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateAlertingProfileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateAlertingProfileNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAlertingProfileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAlertingProfileCreated creates a UpdateAlertingProfileCreated with default headers values
func NewUpdateAlertingProfileCreated() *UpdateAlertingProfileCreated {
	return &UpdateAlertingProfileCreated{}
}

/*UpdateAlertingProfileCreated handles this case with default header values.

Success. The new alerting profile has been created. The response contains the ID of the new alerting profile.
*/
type UpdateAlertingProfileCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateAlertingProfileCreated) Error() string {
	return fmt.Sprintf("[PUT /alertingProfiles/{id}][%d] updateAlertingProfileCreated  %+v", 201, o.Payload)
}

func (o *UpdateAlertingProfileCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateAlertingProfileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertingProfileNoContent creates a UpdateAlertingProfileNoContent with default headers values
func NewUpdateAlertingProfileNoContent() *UpdateAlertingProfileNoContent {
	return &UpdateAlertingProfileNoContent{}
}

/*UpdateAlertingProfileNoContent handles this case with default header values.

Success. The alerting profile has been updated. Response doesn't have a body.
*/
type UpdateAlertingProfileNoContent struct {
}

func (o *UpdateAlertingProfileNoContent) Error() string {
	return fmt.Sprintf("[PUT /alertingProfiles/{id}][%d] updateAlertingProfileNoContent ", 204)
}

func (o *UpdateAlertingProfileNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAlertingProfileBadRequest creates a UpdateAlertingProfileBadRequest with default headers values
func NewUpdateAlertingProfileBadRequest() *UpdateAlertingProfileBadRequest {
	return &UpdateAlertingProfileBadRequest{}
}

/*UpdateAlertingProfileBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateAlertingProfileBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateAlertingProfileBadRequest) Error() string {
	return fmt.Sprintf("[PUT /alertingProfiles/{id}][%d] updateAlertingProfileBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAlertingProfileBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateAlertingProfileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
