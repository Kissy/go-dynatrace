// Code generated by go-swagger; DO NOT EDIT.

package service_custom_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateServiceCustomServiceReader is a Reader for the UpdateServiceCustomService structure.
type UpdateServiceCustomServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceCustomServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateServiceCustomServiceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateServiceCustomServiceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceCustomServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateServiceCustomServiceCreated creates a UpdateServiceCustomServiceCreated with default headers values
func NewUpdateServiceCustomServiceCreated() *UpdateServiceCustomServiceCreated {
	return &UpdateServiceCustomServiceCreated{}
}

/*UpdateServiceCustomServiceCreated handles this case with default header values.

Success. Custom service has been created. Response contains the new service's ID and name.
*/
type UpdateServiceCustomServiceCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateServiceCustomServiceCreated) Error() string {
	return fmt.Sprintf("[PUT /service/customServices/{technology}/{id}][%d] updateServiceCustomServiceCreated  %+v", 201, o.Payload)
}

func (o *UpdateServiceCustomServiceCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateServiceCustomServiceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceCustomServiceNoContent creates a UpdateServiceCustomServiceNoContent with default headers values
func NewUpdateServiceCustomServiceNoContent() *UpdateServiceCustomServiceNoContent {
	return &UpdateServiceCustomServiceNoContent{}
}

/*UpdateServiceCustomServiceNoContent handles this case with default header values.

Success. Custom service has been updated. Response doesn't have a body.
*/
type UpdateServiceCustomServiceNoContent struct {
}

func (o *UpdateServiceCustomServiceNoContent) Error() string {
	return fmt.Sprintf("[PUT /service/customServices/{technology}/{id}][%d] updateServiceCustomServiceNoContent ", 204)
}

func (o *UpdateServiceCustomServiceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceCustomServiceBadRequest creates a UpdateServiceCustomServiceBadRequest with default headers values
func NewUpdateServiceCustomServiceBadRequest() *UpdateServiceCustomServiceBadRequest {
	return &UpdateServiceCustomServiceBadRequest{}
}

/*UpdateServiceCustomServiceBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateServiceCustomServiceBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateServiceCustomServiceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /service/customServices/{technology}/{id}][%d] updateServiceCustomServiceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceCustomServiceBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateServiceCustomServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
