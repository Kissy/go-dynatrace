// Code generated by go-swagger; DO NOT EDIT.

package service_custom_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetServiceCustomServicesParams creates a new GetServiceCustomServicesParams object
// with the default values initialized.
func NewGetServiceCustomServicesParams() *GetServiceCustomServicesParams {
	var ()
	return &GetServiceCustomServicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetServiceCustomServicesParamsWithTimeout creates a new GetServiceCustomServicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetServiceCustomServicesParamsWithTimeout(timeout time.Duration) *GetServiceCustomServicesParams {
	var ()
	return &GetServiceCustomServicesParams{

		timeout: timeout,
	}
}

// NewGetServiceCustomServicesParamsWithContext creates a new GetServiceCustomServicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetServiceCustomServicesParamsWithContext(ctx context.Context) *GetServiceCustomServicesParams {
	var ()
	return &GetServiceCustomServicesParams{

		Context: ctx,
	}
}

// NewGetServiceCustomServicesParamsWithHTTPClient creates a new GetServiceCustomServicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetServiceCustomServicesParamsWithHTTPClient(client *http.Client) *GetServiceCustomServicesParams {
	var ()
	return &GetServiceCustomServicesParams{
		HTTPClient: client,
	}
}

/*GetServiceCustomServicesParams contains all the parameters to send to the API endpoint
for the get service custom services operation typically these are written to a http.Request
*/
type GetServiceCustomServicesParams struct {

	/*Technology
	  Technology of the required custom services.

	*/
	Technology string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get service custom services params
func (o *GetServiceCustomServicesParams) WithTimeout(timeout time.Duration) *GetServiceCustomServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get service custom services params
func (o *GetServiceCustomServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get service custom services params
func (o *GetServiceCustomServicesParams) WithContext(ctx context.Context) *GetServiceCustomServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get service custom services params
func (o *GetServiceCustomServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get service custom services params
func (o *GetServiceCustomServicesParams) WithHTTPClient(client *http.Client) *GetServiceCustomServicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get service custom services params
func (o *GetServiceCustomServicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTechnology adds the technology to the get service custom services params
func (o *GetServiceCustomServicesParams) WithTechnology(technology string) *GetServiceCustomServicesParams {
	o.SetTechnology(technology)
	return o
}

// SetTechnology adds the technology to the get service custom services params
func (o *GetServiceCustomServicesParams) SetTechnology(technology string) {
	o.Technology = technology
}

// WriteToRequest writes these params to a swagger request
func (o *GetServiceCustomServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param technology
	if err := r.SetPathParam("technology", o.Technology); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
