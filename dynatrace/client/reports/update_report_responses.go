// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateReportReader is a Reader for the UpdateReport structure.
type UpdateReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateReportCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateReportNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateReportCreated creates a UpdateReportCreated with default headers values
func NewUpdateReportCreated() *UpdateReportCreated {
	return &UpdateReportCreated{}
}

/*UpdateReportCreated handles this case with default header values.

Success. The new report has been created. The response contains the ID of the new report.
*/
type UpdateReportCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateReportCreated) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportCreated  %+v", 201, o.Payload)
}

func (o *UpdateReportCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateReportCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportNoContent creates a UpdateReportNoContent with default headers values
func NewUpdateReportNoContent() *UpdateReportNoContent {
	return &UpdateReportNoContent{}
}

/*UpdateReportNoContent handles this case with default header values.

Success. The report has been updated. Response doesn't have a body
*/
type UpdateReportNoContent struct {
}

func (o *UpdateReportNoContent) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportNoContent ", 204)
}

func (o *UpdateReportNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateReportBadRequest creates a UpdateReportBadRequest with default headers values
func NewUpdateReportBadRequest() *UpdateReportBadRequest {
	return &UpdateReportBadRequest{}
}

/*UpdateReportBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateReportBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateReportBadRequest) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateReportBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
