// Code generated by go-swagger; DO NOT EDIT.

package data_privacy_and_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data privacy and security API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data privacy and security API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDataPrivacy(params *GetDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetDataPrivacyOK, error)

	UpdateDataPrivacy(params *UpdateDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDataPrivacyNoContent, error)

	ValidateUpdateDataPrivacy(params *ValidateUpdateDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateDataPrivacyNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDataPrivacy lists the global data privacy and security settings
*/
func (a *Client) GetDataPrivacy(params *GetDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetDataPrivacyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataPrivacy",
		Method:             "GET",
		PathPattern:        "/dataPrivacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataPrivacyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDataPrivacy updates the global data privacy and security settings

  This request updates global settings, affecting all your applications. To update application-specific data privacy settings, use the `PUT /applications/web/{id}/dataPrivacy` request.
*/
func (a *Client) UpdateDataPrivacy(params *UpdateDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDataPrivacyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDataPrivacy",
		Method:             "PUT",
		PathPattern:        "/dataPrivacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataPrivacyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateDataPrivacy validates new data privacy and security settings for the p u t data privacy request
*/
func (a *Client) ValidateUpdateDataPrivacy(params *ValidateUpdateDataPrivacyParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateDataPrivacyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateDataPrivacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateDataPrivacy",
		Method:             "POST",
		PathPattern:        "/dataPrivacy/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateDataPrivacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateDataPrivacyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateDataPrivacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
