// Code generated by go-swagger; DO NOT EDIT.

package r_u_m_metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new r u m metrics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for r u m metrics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCalculatedMetricsRum(params *CreateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCalculatedMetricsRumCreated, error)

	DeleteCalculatedMetricsRum(params *DeleteCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCalculatedMetricsRumNoContent, error)

	GetCalculatedMetricsRum(params *GetCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsRumOK, error)

	GetCalculatedMetricsRums(params *GetCalculatedMetricsRumsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsRumsOK, error)

	UpdateCalculatedMetricsRum(params *UpdateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCalculatedMetricsRumCreated, *UpdateCalculatedMetricsRumNoContent, error)

	ValidateCreateCalculatedMetricsRum(params *ValidateCreateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateCalculatedMetricsRumNoContent, error)

	ValidateUpdateCalculatedMetricsRum(params *ValidateUpdateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateCalculatedMetricsRumNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCalculatedMetricsRum stores the provided calculated r u m metric configuration pipe maturity e a r l y a d o p t e r
*/
func (a *Client) CreateCalculatedMetricsRum(params *CreateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCalculatedMetricsRumCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCalculatedMetricsRumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCalculatedMetricsRum",
		Method:             "POST",
		PathPattern:        "/calculatedMetrics/rum",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCalculatedMetricsRumReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCalculatedMetricsRumCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCalculatedMetricsRum: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCalculatedMetricsRum deletes the calculated r u m metric configuration with the given id pipe maturity e a r l y a d o p t e r
*/
func (a *Client) DeleteCalculatedMetricsRum(params *DeleteCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCalculatedMetricsRumNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCalculatedMetricsRumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCalculatedMetricsRum",
		Method:             "DELETE",
		PathPattern:        "/calculatedMetrics/rum/{metricKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCalculatedMetricsRumReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCalculatedMetricsRumNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCalculatedMetricsRum: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCalculatedMetricsRum gets the definition of the specified calculated r u m metric pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetCalculatedMetricsRum(params *GetCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsRumOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCalculatedMetricsRumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCalculatedMetricsRum",
		Method:             "GET",
		PathPattern:        "/calculatedMetrics/rum/{metricKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCalculatedMetricsRumReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCalculatedMetricsRumOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCalculatedMetricsRum: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCalculatedMetricsRums lists all calculated r u m metric configurations pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetCalculatedMetricsRums(params *GetCalculatedMetricsRumsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCalculatedMetricsRumsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCalculatedMetricsRumsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCalculatedMetricsRums",
		Method:             "GET",
		PathPattern:        "/calculatedMetrics/rum",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCalculatedMetricsRumsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCalculatedMetricsRumsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCalculatedMetricsRums: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCalculatedMetricsRum updates the specified calculated r u m metric pipe maturity e a r l y a d o p t e r
*/
func (a *Client) UpdateCalculatedMetricsRum(params *UpdateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCalculatedMetricsRumCreated, *UpdateCalculatedMetricsRumNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCalculatedMetricsRumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCalculatedMetricsRum",
		Method:             "PUT",
		PathPattern:        "/calculatedMetrics/rum/{metricKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCalculatedMetricsRumReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCalculatedMetricsRumCreated:
		return value, nil, nil
	case *UpdateCalculatedMetricsRumNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for r_u_m_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateCalculatedMetricsRum validates the payload for the p o s t calculated metrics rum request pipe maturity e a r l y a d o p t e r

  The body must not provide an ID.
*/
func (a *Client) ValidateCreateCalculatedMetricsRum(params *ValidateCreateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateCalculatedMetricsRumNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateCalculatedMetricsRumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateCalculatedMetricsRum",
		Method:             "POST",
		PathPattern:        "/calculatedMetrics/rum/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateCalculatedMetricsRumReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateCalculatedMetricsRumNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateCalculatedMetricsRum: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateCalculatedMetricsRum validates the payload for the p u t calculated metrics rum metric key request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateUpdateCalculatedMetricsRum(params *ValidateUpdateCalculatedMetricsRumParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateCalculatedMetricsRumNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateCalculatedMetricsRumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateCalculatedMetricsRum",
		Method:             "POST",
		PathPattern:        "/calculatedMetrics/rum/{metricKey}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateCalculatedMetricsRumReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateCalculatedMetricsRumNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateCalculatedMetricsRum: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
