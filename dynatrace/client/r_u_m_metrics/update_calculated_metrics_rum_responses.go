// Code generated by go-swagger; DO NOT EDIT.

package r_u_m_metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateCalculatedMetricsRumReader is a Reader for the UpdateCalculatedMetricsRum structure.
type UpdateCalculatedMetricsRumReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCalculatedMetricsRumReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateCalculatedMetricsRumCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateCalculatedMetricsRumNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCalculatedMetricsRumBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCalculatedMetricsRumCreated creates a UpdateCalculatedMetricsRumCreated with default headers values
func NewUpdateCalculatedMetricsRumCreated() *UpdateCalculatedMetricsRumCreated {
	return &UpdateCalculatedMetricsRumCreated{}
}

/*UpdateCalculatedMetricsRumCreated handles this case with default header values.

Success. Calculated RUM metric has been updated. Response doesn't have a body.
*/
type UpdateCalculatedMetricsRumCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateCalculatedMetricsRumCreated) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/rum/{metricKey}][%d] updateCalculatedMetricsRumCreated  %+v", 201, o.Payload)
}

func (o *UpdateCalculatedMetricsRumCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateCalculatedMetricsRumCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCalculatedMetricsRumNoContent creates a UpdateCalculatedMetricsRumNoContent with default headers values
func NewUpdateCalculatedMetricsRumNoContent() *UpdateCalculatedMetricsRumNoContent {
	return &UpdateCalculatedMetricsRumNoContent{}
}

/*UpdateCalculatedMetricsRumNoContent handles this case with default header values.

Success. Calculated RUM metric has been updated. Response doesn't have a body.
*/
type UpdateCalculatedMetricsRumNoContent struct {
}

func (o *UpdateCalculatedMetricsRumNoContent) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/rum/{metricKey}][%d] updateCalculatedMetricsRumNoContent ", 204)
}

func (o *UpdateCalculatedMetricsRumNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCalculatedMetricsRumBadRequest creates a UpdateCalculatedMetricsRumBadRequest with default headers values
func NewUpdateCalculatedMetricsRumBadRequest() *UpdateCalculatedMetricsRumBadRequest {
	return &UpdateCalculatedMetricsRumBadRequest{}
}

/*UpdateCalculatedMetricsRumBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateCalculatedMetricsRumBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateCalculatedMetricsRumBadRequest) Error() string {
	return fmt.Sprintf("[PUT /calculatedMetrics/rum/{metricKey}][%d] updateCalculatedMetricsRumBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCalculatedMetricsRumBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateCalculatedMetricsRumBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
