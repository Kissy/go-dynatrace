// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_database_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new anomaly detection database services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for anomaly detection database services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAnomalyDetectionDatabaseServices(params *GetAnomalyDetectionDatabaseServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionDatabaseServicesOK, error)

	UpdateAnomalyDetectionDatabaseServices(params *UpdateAnomalyDetectionDatabaseServicesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionDatabaseServicesNoContent, error)

	ValidateUpdateAnomalyDetectionDatabaseServices(params *ValidateUpdateAnomalyDetectionDatabaseServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionDatabaseServicesNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAnomalyDetectionDatabaseServices gets the configuration of anomaly detection for database services
*/
func (a *Client) GetAnomalyDetectionDatabaseServices(params *GetAnomalyDetectionDatabaseServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionDatabaseServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnomalyDetectionDatabaseServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnomalyDetectionDatabaseServices",
		Method:             "GET",
		PathPattern:        "/anomalyDetection/databaseServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnomalyDetectionDatabaseServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnomalyDetectionDatabaseServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnomalyDetectionDatabaseServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAnomalyDetectionDatabaseServices updates the configuration of anomaly detection for database services
*/
func (a *Client) UpdateAnomalyDetectionDatabaseServices(params *UpdateAnomalyDetectionDatabaseServicesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionDatabaseServicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAnomalyDetectionDatabaseServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAnomalyDetectionDatabaseServices",
		Method:             "PUT",
		PathPattern:        "/anomalyDetection/databaseServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAnomalyDetectionDatabaseServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAnomalyDetectionDatabaseServicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAnomalyDetectionDatabaseServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateAnomalyDetectionDatabaseServices validates the payload for the p u t anomaly detection database services request
*/
func (a *Client) ValidateUpdateAnomalyDetectionDatabaseServices(params *ValidateUpdateAnomalyDetectionDatabaseServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionDatabaseServicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateAnomalyDetectionDatabaseServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateAnomalyDetectionDatabaseServices",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/databaseServices/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateAnomalyDetectionDatabaseServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateAnomalyDetectionDatabaseServicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateAnomalyDetectionDatabaseServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
