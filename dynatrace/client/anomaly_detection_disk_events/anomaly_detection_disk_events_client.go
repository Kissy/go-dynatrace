// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_disk_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new anomaly detection disk events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for anomaly detection disk events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAnomalyDetectionDiskEvent(params *CreateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAnomalyDetectionDiskEventCreated, error)

	DeleteAnomalyDetectionDiskEvent(params *DeleteAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAnomalyDetectionDiskEventNoContent, error)

	GetAnomalyDetectionDiskEvent(params *GetAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionDiskEventOK, error)

	GetAnomalyDetectionDiskEvents(params *GetAnomalyDetectionDiskEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionDiskEventsOK, error)

	UpdateAnomalyDetectionDiskEvent(params *UpdateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionDiskEventCreated, *UpdateAnomalyDetectionDiskEventNoContent, error)

	ValidateCreateAnomalyDetectionDiskEvent(params *ValidateCreateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAnomalyDetectionDiskEventNoContent, error)

	ValidateUpdateAnomalyDetectionDiskEvent(params *ValidateUpdateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionDiskEventNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAnomalyDetectionDiskEvent creates a new disk event rule pipe maturity e a r l y a d o p t e r

  The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
*/
func (a *Client) CreateAnomalyDetectionDiskEvent(params *CreateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAnomalyDetectionDiskEventCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAnomalyDetectionDiskEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAnomalyDetectionDiskEvent",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/diskEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAnomalyDetectionDiskEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAnomalyDetectionDiskEventCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAnomalyDetectionDiskEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAnomalyDetectionDiskEvent deletes the specified disk event rule pipe maturity e a r l y a d o p t e r
*/
func (a *Client) DeleteAnomalyDetectionDiskEvent(params *DeleteAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAnomalyDetectionDiskEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAnomalyDetectionDiskEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAnomalyDetectionDiskEvent",
		Method:             "DELETE",
		PathPattern:        "/anomalyDetection/diskEvents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAnomalyDetectionDiskEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAnomalyDetectionDiskEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAnomalyDetectionDiskEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAnomalyDetectionDiskEvent gets the properties of the specified disk event rule pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetAnomalyDetectionDiskEvent(params *GetAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionDiskEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnomalyDetectionDiskEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnomalyDetectionDiskEvent",
		Method:             "GET",
		PathPattern:        "/anomalyDetection/diskEvents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnomalyDetectionDiskEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnomalyDetectionDiskEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnomalyDetectionDiskEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAnomalyDetectionDiskEvents lists all existing disk event rules pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetAnomalyDetectionDiskEvents(params *GetAnomalyDetectionDiskEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnomalyDetectionDiskEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnomalyDetectionDiskEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnomalyDetectionDiskEvents",
		Method:             "GET",
		PathPattern:        "/anomalyDetection/diskEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnomalyDetectionDiskEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnomalyDetectionDiskEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnomalyDetectionDiskEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAnomalyDetectionDiskEvent updates or creates a disk event rule pipe maturity e a r l y a d o p t e r

  If a disk event rule with the specified ID does not exist, a new rule is created.
*/
func (a *Client) UpdateAnomalyDetectionDiskEvent(params *UpdateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAnomalyDetectionDiskEventCreated, *UpdateAnomalyDetectionDiskEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAnomalyDetectionDiskEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAnomalyDetectionDiskEvent",
		Method:             "PUT",
		PathPattern:        "/anomalyDetection/diskEvents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAnomalyDetectionDiskEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAnomalyDetectionDiskEventCreated:
		return value, nil, nil
	case *UpdateAnomalyDetectionDiskEventNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for anomaly_detection_disk_events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateAnomalyDetectionDiskEvent validates the payload for the p o s t anomaly detection disk events request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateCreateAnomalyDetectionDiskEvent(params *ValidateCreateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateAnomalyDetectionDiskEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateAnomalyDetectionDiskEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateAnomalyDetectionDiskEvent",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/diskEvents/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateAnomalyDetectionDiskEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateAnomalyDetectionDiskEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateAnomalyDetectionDiskEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateAnomalyDetectionDiskEvent validates the payload for the p u t anomaly detection disk events id request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateUpdateAnomalyDetectionDiskEvent(params *ValidateUpdateAnomalyDetectionDiskEventParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateAnomalyDetectionDiskEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateAnomalyDetectionDiskEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateAnomalyDetectionDiskEvent",
		Method:             "POST",
		PathPattern:        "/anomalyDetection/diskEvents/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateAnomalyDetectionDiskEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateAnomalyDetectionDiskEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateAnomalyDetectionDiskEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
