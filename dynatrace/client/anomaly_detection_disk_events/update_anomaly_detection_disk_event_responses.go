// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_disk_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateAnomalyDetectionDiskEventReader is a Reader for the UpdateAnomalyDetectionDiskEvent structure.
type UpdateAnomalyDetectionDiskEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAnomalyDetectionDiskEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateAnomalyDetectionDiskEventCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateAnomalyDetectionDiskEventNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAnomalyDetectionDiskEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAnomalyDetectionDiskEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAnomalyDetectionDiskEventCreated creates a UpdateAnomalyDetectionDiskEventCreated with default headers values
func NewUpdateAnomalyDetectionDiskEventCreated() *UpdateAnomalyDetectionDiskEventCreated {
	return &UpdateAnomalyDetectionDiskEventCreated{}
}

/*UpdateAnomalyDetectionDiskEventCreated handles this case with default header values.

Success. The new disk event rule has been created. The ID of the new disk event rule is returned.
*/
type UpdateAnomalyDetectionDiskEventCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateAnomalyDetectionDiskEventCreated) Error() string {
	return fmt.Sprintf("[PUT /anomalyDetection/diskEvents/{id}][%d] updateAnomalyDetectionDiskEventCreated  %+v", 201, o.Payload)
}

func (o *UpdateAnomalyDetectionDiskEventCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateAnomalyDetectionDiskEventCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAnomalyDetectionDiskEventNoContent creates a UpdateAnomalyDetectionDiskEventNoContent with default headers values
func NewUpdateAnomalyDetectionDiskEventNoContent() *UpdateAnomalyDetectionDiskEventNoContent {
	return &UpdateAnomalyDetectionDiskEventNoContent{}
}

/*UpdateAnomalyDetectionDiskEventNoContent handles this case with default header values.

Success. The disk event rule has been updated. Response doesn't have a body.
*/
type UpdateAnomalyDetectionDiskEventNoContent struct {
}

func (o *UpdateAnomalyDetectionDiskEventNoContent) Error() string {
	return fmt.Sprintf("[PUT /anomalyDetection/diskEvents/{id}][%d] updateAnomalyDetectionDiskEventNoContent ", 204)
}

func (o *UpdateAnomalyDetectionDiskEventNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAnomalyDetectionDiskEventBadRequest creates a UpdateAnomalyDetectionDiskEventBadRequest with default headers values
func NewUpdateAnomalyDetectionDiskEventBadRequest() *UpdateAnomalyDetectionDiskEventBadRequest {
	return &UpdateAnomalyDetectionDiskEventBadRequest{}
}

/*UpdateAnomalyDetectionDiskEventBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateAnomalyDetectionDiskEventBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateAnomalyDetectionDiskEventBadRequest) Error() string {
	return fmt.Sprintf("[PUT /anomalyDetection/diskEvents/{id}][%d] updateAnomalyDetectionDiskEventBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAnomalyDetectionDiskEventBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateAnomalyDetectionDiskEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAnomalyDetectionDiskEventForbidden creates a UpdateAnomalyDetectionDiskEventForbidden with default headers values
func NewUpdateAnomalyDetectionDiskEventForbidden() *UpdateAnomalyDetectionDiskEventForbidden {
	return &UpdateAnomalyDetectionDiskEventForbidden{}
}

/*UpdateAnomalyDetectionDiskEventForbidden handles this case with default header values.

Failed. The specified ID is reserved for internal use.
*/
type UpdateAnomalyDetectionDiskEventForbidden struct {
}

func (o *UpdateAnomalyDetectionDiskEventForbidden) Error() string {
	return fmt.Sprintf("[PUT /anomalyDetection/diskEvents/{id}][%d] updateAnomalyDetectionDiskEventForbidden ", 403)
}

func (o *UpdateAnomalyDetectionDiskEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
