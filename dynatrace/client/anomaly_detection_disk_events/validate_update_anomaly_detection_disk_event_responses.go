// Code generated by go-swagger; DO NOT EDIT.

package anomaly_detection_disk_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// ValidateUpdateAnomalyDetectionDiskEventReader is a Reader for the ValidateUpdateAnomalyDetectionDiskEvent structure.
type ValidateUpdateAnomalyDetectionDiskEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateUpdateAnomalyDetectionDiskEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewValidateUpdateAnomalyDetectionDiskEventNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateUpdateAnomalyDetectionDiskEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewValidateUpdateAnomalyDetectionDiskEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewValidateUpdateAnomalyDetectionDiskEventNoContent creates a ValidateUpdateAnomalyDetectionDiskEventNoContent with default headers values
func NewValidateUpdateAnomalyDetectionDiskEventNoContent() *ValidateUpdateAnomalyDetectionDiskEventNoContent {
	return &ValidateUpdateAnomalyDetectionDiskEventNoContent{}
}

/*ValidateUpdateAnomalyDetectionDiskEventNoContent handles this case with default header values.

Validated. The submitted disk event rule is valid. Response doesn't have a body.
*/
type ValidateUpdateAnomalyDetectionDiskEventNoContent struct {
}

func (o *ValidateUpdateAnomalyDetectionDiskEventNoContent) Error() string {
	return fmt.Sprintf("[POST /anomalyDetection/diskEvents/{id}/validator][%d] validateUpdateAnomalyDetectionDiskEventNoContent ", 204)
}

func (o *ValidateUpdateAnomalyDetectionDiskEventNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateUpdateAnomalyDetectionDiskEventBadRequest creates a ValidateUpdateAnomalyDetectionDiskEventBadRequest with default headers values
func NewValidateUpdateAnomalyDetectionDiskEventBadRequest() *ValidateUpdateAnomalyDetectionDiskEventBadRequest {
	return &ValidateUpdateAnomalyDetectionDiskEventBadRequest{}
}

/*ValidateUpdateAnomalyDetectionDiskEventBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type ValidateUpdateAnomalyDetectionDiskEventBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *ValidateUpdateAnomalyDetectionDiskEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /anomalyDetection/diskEvents/{id}/validator][%d] validateUpdateAnomalyDetectionDiskEventBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateUpdateAnomalyDetectionDiskEventBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *ValidateUpdateAnomalyDetectionDiskEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateUpdateAnomalyDetectionDiskEventForbidden creates a ValidateUpdateAnomalyDetectionDiskEventForbidden with default headers values
func NewValidateUpdateAnomalyDetectionDiskEventForbidden() *ValidateUpdateAnomalyDetectionDiskEventForbidden {
	return &ValidateUpdateAnomalyDetectionDiskEventForbidden{}
}

/*ValidateUpdateAnomalyDetectionDiskEventForbidden handles this case with default header values.

Failed. The specified ID is reserved for internal use.
*/
type ValidateUpdateAnomalyDetectionDiskEventForbidden struct {
}

func (o *ValidateUpdateAnomalyDetectionDiskEventForbidden) Error() string {
	return fmt.Sprintf("[POST /anomalyDetection/diskEvents/{id}/validator][%d] validateUpdateAnomalyDetectionDiskEventForbidden ", 403)
}

func (o *ValidateUpdateAnomalyDetectionDiskEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
