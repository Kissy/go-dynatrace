// Code generated by go-swagger; DO NOT EDIT.

package remote_environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new remote environments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for remote environments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRemoteEnvironment(params *CreateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRemoteEnvironmentCreated, error)

	DeleteRemoteEnvironment(params *DeleteRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRemoteEnvironmentNoContent, error)

	GetRemoteEnvironment(params *GetRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteEnvironmentOK, error)

	GetRemoteEnvironments(params *GetRemoteEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteEnvironmentsOK, error)

	UpdateRemoteEnvironment(params *UpdateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteEnvironmentCreated, *UpdateRemoteEnvironmentNoContent, error)

	ValidateCreateRemoteEnvironment(params *ValidateCreateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateRemoteEnvironmentNoContent, error)

	ValidateUpdateRemoteEnvironment(params *ValidateUpdateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateRemoteEnvironmentNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRemoteEnvironment creates a new remote environment configuration pipe maturity e a r l y a d o p t e r

  The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.

Be sure to prepare a token with the **Fetch data from a remote environment** (`RestRequestForwarding`) scope. You can create such a token via [Tokens API](https://www.dynatrace.com/support/help/shortlink/api-tokens-post-new).
*/
func (a *Client) CreateRemoteEnvironment(params *CreateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRemoteEnvironmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRemoteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRemoteEnvironment",
		Method:             "POST",
		PathPattern:        "/remoteEnvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRemoteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRemoteEnvironmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRemoteEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRemoteEnvironment deletes the specified remote environment configuration pipe maturity e a r l y a d o p t e r
*/
func (a *Client) DeleteRemoteEnvironment(params *DeleteRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRemoteEnvironmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRemoteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRemoteEnvironment",
		Method:             "DELETE",
		PathPattern:        "/remoteEnvironments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRemoteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRemoteEnvironmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRemoteEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRemoteEnvironment gets the properties of the specified remote environment configuration pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetRemoteEnvironment(params *GetRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRemoteEnvironment",
		Method:             "GET",
		PathPattern:        "/remoteEnvironments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRemoteEnvironments lists all remote environment configurations pipe maturity e a r l y a d o p t e r
*/
func (a *Client) GetRemoteEnvironments(params *GetRemoteEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRemoteEnvironments",
		Method:             "GET",
		PathPattern:        "/remoteEnvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteEnvironments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteEnvironment updates an existing remote environment configuration or creates a new one pipe maturity e a r l y a d o p t e r

  If a remote environment configuration with the specified ID doesn't exist, a new configuration is created.
*/
func (a *Client) UpdateRemoteEnvironment(params *UpdateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteEnvironmentCreated, *UpdateRemoteEnvironmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteEnvironment",
		Method:             "PUT",
		PathPattern:        "/remoteEnvironments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRemoteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateRemoteEnvironmentCreated:
		return value, nil, nil
	case *UpdateRemoteEnvironmentNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for remote_environments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateRemoteEnvironment validates the payload for the p o s t remote environments request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateCreateRemoteEnvironment(params *ValidateCreateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateRemoteEnvironmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateRemoteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateRemoteEnvironment",
		Method:             "POST",
		PathPattern:        "/remoteEnvironments/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateRemoteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateRemoteEnvironmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateRemoteEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateRemoteEnvironment validates the payload for the p u t remote environments id request pipe maturity e a r l y a d o p t e r
*/
func (a *Client) ValidateUpdateRemoteEnvironment(params *ValidateUpdateRemoteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateRemoteEnvironmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateRemoteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateRemoteEnvironment",
		Method:             "POST",
		PathPattern:        "/remoteEnvironments/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateRemoteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateRemoteEnvironmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateRemoteEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
