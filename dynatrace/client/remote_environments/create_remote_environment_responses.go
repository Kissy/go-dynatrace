// Code generated by go-swagger; DO NOT EDIT.

package remote_environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// CreateRemoteEnvironmentReader is a Reader for the CreateRemoteEnvironment structure.
type CreateRemoteEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRemoteEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRemoteEnvironmentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRemoteEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRemoteEnvironmentCreated creates a CreateRemoteEnvironmentCreated with default headers values
func NewCreateRemoteEnvironmentCreated() *CreateRemoteEnvironmentCreated {
	return &CreateRemoteEnvironmentCreated{}
}

/*CreateRemoteEnvironmentCreated handles this case with default header values.

Success. A new remote environment configuration has been created. The response contains the ID of the new configuration.
*/
type CreateRemoteEnvironmentCreated struct {
	Payload *dynatrace.RemoteEnvironmentConfigStubDto
}

func (o *CreateRemoteEnvironmentCreated) Error() string {
	return fmt.Sprintf("[POST /remoteEnvironments][%d] createRemoteEnvironmentCreated  %+v", 201, o.Payload)
}

func (o *CreateRemoteEnvironmentCreated) GetPayload() *dynatrace.RemoteEnvironmentConfigStubDto {
	return o.Payload
}

func (o *CreateRemoteEnvironmentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.RemoteEnvironmentConfigStubDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRemoteEnvironmentBadRequest creates a CreateRemoteEnvironmentBadRequest with default headers values
func NewCreateRemoteEnvironmentBadRequest() *CreateRemoteEnvironmentBadRequest {
	return &CreateRemoteEnvironmentBadRequest{}
}

/*CreateRemoteEnvironmentBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type CreateRemoteEnvironmentBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *CreateRemoteEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /remoteEnvironments][%d] createRemoteEnvironmentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRemoteEnvironmentBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *CreateRemoteEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
