// Code generated by go-swagger; DO NOT EDIT.

package remote_environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateRemoteEnvironmentReader is a Reader for the UpdateRemoteEnvironment structure.
type UpdateRemoteEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRemoteEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateRemoteEnvironmentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateRemoteEnvironmentNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRemoteEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRemoteEnvironmentCreated creates a UpdateRemoteEnvironmentCreated with default headers values
func NewUpdateRemoteEnvironmentCreated() *UpdateRemoteEnvironmentCreated {
	return &UpdateRemoteEnvironmentCreated{}
}

/*UpdateRemoteEnvironmentCreated handles this case with default header values.

Success. A new remote environment configuration has been created. The response contains the ID of the new configuration.
*/
type UpdateRemoteEnvironmentCreated struct {
	Payload *dynatrace.RemoteEnvironmentConfigStubDto
}

func (o *UpdateRemoteEnvironmentCreated) Error() string {
	return fmt.Sprintf("[PUT /remoteEnvironments/{id}][%d] updateRemoteEnvironmentCreated  %+v", 201, o.Payload)
}

func (o *UpdateRemoteEnvironmentCreated) GetPayload() *dynatrace.RemoteEnvironmentConfigStubDto {
	return o.Payload
}

func (o *UpdateRemoteEnvironmentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.RemoteEnvironmentConfigStubDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRemoteEnvironmentNoContent creates a UpdateRemoteEnvironmentNoContent with default headers values
func NewUpdateRemoteEnvironmentNoContent() *UpdateRemoteEnvironmentNoContent {
	return &UpdateRemoteEnvironmentNoContent{}
}

/*UpdateRemoteEnvironmentNoContent handles this case with default header values.

Success. The configuration has been updated. The response doesn't have a body.
*/
type UpdateRemoteEnvironmentNoContent struct {
}

func (o *UpdateRemoteEnvironmentNoContent) Error() string {
	return fmt.Sprintf("[PUT /remoteEnvironments/{id}][%d] updateRemoteEnvironmentNoContent ", 204)
}

func (o *UpdateRemoteEnvironmentNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRemoteEnvironmentBadRequest creates a UpdateRemoteEnvironmentBadRequest with default headers values
func NewUpdateRemoteEnvironmentBadRequest() *UpdateRemoteEnvironmentBadRequest {
	return &UpdateRemoteEnvironmentBadRequest{}
}

/*UpdateRemoteEnvironmentBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateRemoteEnvironmentBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateRemoteEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /remoteEnvironments/{id}][%d] updateRemoteEnvironmentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRemoteEnvironmentBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateRemoteEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
