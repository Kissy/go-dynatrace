// Code generated by go-swagger; DO NOT EDIT.

package automatically_applied_tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateAutoTagReader is a Reader for the UpdateAutoTag structure.
type UpdateAutoTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAutoTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateAutoTagCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateAutoTagNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAutoTagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAutoTagCreated creates a UpdateAutoTagCreated with default headers values
func NewUpdateAutoTagCreated() *UpdateAutoTagCreated {
	return &UpdateAutoTagCreated{}
}

/*UpdateAutoTagCreated handles this case with default header values.

Success. The new auto-tag has been created. The response body contains the ID of the new auto-tag.
*/
type UpdateAutoTagCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateAutoTagCreated) Error() string {
	return fmt.Sprintf("[PUT /autoTags/{id}][%d] updateAutoTagCreated  %+v", 201, o.Payload)
}

func (o *UpdateAutoTagCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateAutoTagCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAutoTagNoContent creates a UpdateAutoTagNoContent with default headers values
func NewUpdateAutoTagNoContent() *UpdateAutoTagNoContent {
	return &UpdateAutoTagNoContent{}
}

/*UpdateAutoTagNoContent handles this case with default header values.

Success. The auto-tag has been updated. Response doesn't have a body.
*/
type UpdateAutoTagNoContent struct {
}

func (o *UpdateAutoTagNoContent) Error() string {
	return fmt.Sprintf("[PUT /autoTags/{id}][%d] updateAutoTagNoContent ", 204)
}

func (o *UpdateAutoTagNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAutoTagBadRequest creates a UpdateAutoTagBadRequest with default headers values
func NewUpdateAutoTagBadRequest() *UpdateAutoTagBadRequest {
	return &UpdateAutoTagBadRequest{}
}

/*UpdateAutoTagBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateAutoTagBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateAutoTagBadRequest) Error() string {
	return fmt.Sprintf("[PUT /autoTags/{id}][%d] updateAutoTagBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAutoTagBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateAutoTagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
