// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_credentials_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateKubernetesCredentialReader is a Reader for the UpdateKubernetesCredential structure.
type UpdateKubernetesCredentialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateKubernetesCredentialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateKubernetesCredentialCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateKubernetesCredentialNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateKubernetesCredentialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateKubernetesCredentialCreated creates a UpdateKubernetesCredentialCreated with default headers values
func NewUpdateKubernetesCredentialCreated() *UpdateKubernetesCredentialCreated {
	return &UpdateKubernetesCredentialCreated{}
}

/*UpdateKubernetesCredentialCreated handles this case with default header values.

Success. The new Kubernetes credentials configuration has been created. The response body contains the ID of the configuration.
*/
type UpdateKubernetesCredentialCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateKubernetesCredentialCreated) Error() string {
	return fmt.Sprintf("[PUT /kubernetes/credentials/{id}][%d] updateKubernetesCredentialCreated  %+v", 201, o.Payload)
}

func (o *UpdateKubernetesCredentialCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateKubernetesCredentialCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKubernetesCredentialNoContent creates a UpdateKubernetesCredentialNoContent with default headers values
func NewUpdateKubernetesCredentialNoContent() *UpdateKubernetesCredentialNoContent {
	return &UpdateKubernetesCredentialNoContent{}
}

/*UpdateKubernetesCredentialNoContent handles this case with default header values.

Success. The Kubernetes credentials configuration has been updated. Response doesn't have a body.
*/
type UpdateKubernetesCredentialNoContent struct {
}

func (o *UpdateKubernetesCredentialNoContent) Error() string {
	return fmt.Sprintf("[PUT /kubernetes/credentials/{id}][%d] updateKubernetesCredentialNoContent ", 204)
}

func (o *UpdateKubernetesCredentialNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateKubernetesCredentialBadRequest creates a UpdateKubernetesCredentialBadRequest with default headers values
func NewUpdateKubernetesCredentialBadRequest() *UpdateKubernetesCredentialBadRequest {
	return &UpdateKubernetesCredentialBadRequest{}
}

/*UpdateKubernetesCredentialBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateKubernetesCredentialBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateKubernetesCredentialBadRequest) Error() string {
	return fmt.Sprintf("[PUT /kubernetes/credentials/{id}][%d] updateKubernetesCredentialBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateKubernetesCredentialBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateKubernetesCredentialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
