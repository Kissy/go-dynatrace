// Code generated by go-swagger; DO NOT EDIT.

package maintenance_windows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new maintenance windows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for maintenance windows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMaintenanceWindow(params *CreateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMaintenanceWindowCreated, error)

	DeleteMaintenanceWindow(params *DeleteMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMaintenanceWindowNoContent, error)

	GetMaintenanceWindow(params *GetMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaintenanceWindowOK, error)

	GetMaintenanceWindows(params *GetMaintenanceWindowsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaintenanceWindowsOK, error)

	UpdateMaintenanceWindow(params *UpdateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMaintenanceWindowCreated, *UpdateMaintenanceWindowNoContent, error)

	ValidateCreateMaintenanceWindow(params *ValidateCreateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateMaintenanceWindowNoContent, error)

	ValidateUpdateMaintenanceWindow(params *ValidateUpdateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateMaintenanceWindowNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMaintenanceWindow creates a new maintenance window

  The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
*/
func (a *Client) CreateMaintenanceWindow(params *CreateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMaintenanceWindowCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMaintenanceWindow",
		Method:             "POST",
		PathPattern:        "/maintenanceWindows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMaintenanceWindowCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMaintenanceWindow deletes the specified maintenance window
*/
func (a *Client) DeleteMaintenanceWindow(params *DeleteMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMaintenanceWindowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMaintenanceWindow",
		Method:             "DELETE",
		PathPattern:        "/maintenanceWindows/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMaintenanceWindowNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMaintenanceWindow gets the properties of the specified maintenance window
*/
func (a *Client) GetMaintenanceWindow(params *GetMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMaintenanceWindow",
		Method:             "GET",
		PathPattern:        "/maintenanceWindows/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMaintenanceWindowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMaintenanceWindows lists all available maintenance windows
*/
func (a *Client) GetMaintenanceWindows(params *GetMaintenanceWindowsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaintenanceWindowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMaintenanceWindows",
		Method:             "GET",
		PathPattern:        "/maintenanceWindows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMaintenanceWindowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMaintenanceWindowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMaintenanceWindows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMaintenanceWindow updates an existing maintenance window

  If a maintenance window with the specified ID doesn't exist, a new one is created.
*/
func (a *Client) UpdateMaintenanceWindow(params *UpdateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMaintenanceWindowCreated, *UpdateMaintenanceWindowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMaintenanceWindow",
		Method:             "PUT",
		PathPattern:        "/maintenanceWindows/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMaintenanceWindowCreated:
		return value, nil, nil
	case *UpdateMaintenanceWindowNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for maintenance_windows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCreateMaintenanceWindow validates the payload for the p o s t maintenancewindow request
*/
func (a *Client) ValidateCreateMaintenanceWindow(params *ValidateCreateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCreateMaintenanceWindowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCreateMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCreateMaintenanceWindow",
		Method:             "POST",
		PathPattern:        "/maintenanceWindows/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCreateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCreateMaintenanceWindowNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCreateMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUpdateMaintenanceWindow validates the payload for the p u t maintenancewindow id request
*/
func (a *Client) ValidateUpdateMaintenanceWindow(params *ValidateUpdateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUpdateMaintenanceWindowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUpdateMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateUpdateMaintenanceWindow",
		Method:             "POST",
		PathPattern:        "/maintenanceWindows/{id}/validator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUpdateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUpdateMaintenanceWindowNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUpdateMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
