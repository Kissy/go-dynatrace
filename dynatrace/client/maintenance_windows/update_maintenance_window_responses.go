// Code generated by go-swagger; DO NOT EDIT.

package maintenance_windows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateMaintenanceWindowReader is a Reader for the UpdateMaintenanceWindow structure.
type UpdateMaintenanceWindowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMaintenanceWindowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateMaintenanceWindowCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateMaintenanceWindowNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMaintenanceWindowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateMaintenanceWindowCreated creates a UpdateMaintenanceWindowCreated with default headers values
func NewUpdateMaintenanceWindowCreated() *UpdateMaintenanceWindowCreated {
	return &UpdateMaintenanceWindowCreated{}
}

/*UpdateMaintenanceWindowCreated handles this case with default header values.

Success. The new maintenance window has been created. The response body contains its ID.
*/
type UpdateMaintenanceWindowCreated struct {
	Payload *dynatrace.EntityShortRepresentation
}

func (o *UpdateMaintenanceWindowCreated) Error() string {
	return fmt.Sprintf("[PUT /maintenanceWindows/{id}][%d] updateMaintenanceWindowCreated  %+v", 201, o.Payload)
}

func (o *UpdateMaintenanceWindowCreated) GetPayload() *dynatrace.EntityShortRepresentation {
	return o.Payload
}

func (o *UpdateMaintenanceWindowCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.EntityShortRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaintenanceWindowNoContent creates a UpdateMaintenanceWindowNoContent with default headers values
func NewUpdateMaintenanceWindowNoContent() *UpdateMaintenanceWindowNoContent {
	return &UpdateMaintenanceWindowNoContent{}
}

/*UpdateMaintenanceWindowNoContent handles this case with default header values.

Success. The maintenance window has been updated. The response doesn't have a body.
*/
type UpdateMaintenanceWindowNoContent struct {
}

func (o *UpdateMaintenanceWindowNoContent) Error() string {
	return fmt.Sprintf("[PUT /maintenanceWindows/{id}][%d] updateMaintenanceWindowNoContent ", 204)
}

func (o *UpdateMaintenanceWindowNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMaintenanceWindowBadRequest creates a UpdateMaintenanceWindowBadRequest with default headers values
func NewUpdateMaintenanceWindowBadRequest() *UpdateMaintenanceWindowBadRequest {
	return &UpdateMaintenanceWindowBadRequest{}
}

/*UpdateMaintenanceWindowBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateMaintenanceWindowBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateMaintenanceWindowBadRequest) Error() string {
	return fmt.Sprintf("[PUT /maintenanceWindows/{id}][%d] updateMaintenanceWindowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMaintenanceWindowBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateMaintenanceWindowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
