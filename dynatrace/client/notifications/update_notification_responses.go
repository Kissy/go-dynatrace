// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Kissy/go-dynatrace/dynatrace"
)

// UpdateNotificationReader is a Reader for the UpdateNotification structure.
type UpdateNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateNotificationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateNotificationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateNotificationCreated creates a UpdateNotificationCreated with default headers values
func NewUpdateNotificationCreated() *UpdateNotificationCreated {
	return &UpdateNotificationCreated{}
}

/*UpdateNotificationCreated handles this case with default header values.

Success. The new notification configuration has been created. The response contains the ID of the new notification configuration.
*/
type UpdateNotificationCreated struct {
	Payload *dynatrace.NotificationConfigStub
}

func (o *UpdateNotificationCreated) Error() string {
	return fmt.Sprintf("[PUT /notifications/{id}][%d] updateNotificationCreated  %+v", 201, o.Payload)
}

func (o *UpdateNotificationCreated) GetPayload() *dynatrace.NotificationConfigStub {
	return o.Payload
}

func (o *UpdateNotificationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.NotificationConfigStub)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotificationNoContent creates a UpdateNotificationNoContent with default headers values
func NewUpdateNotificationNoContent() *UpdateNotificationNoContent {
	return &UpdateNotificationNoContent{}
}

/*UpdateNotificationNoContent handles this case with default header values.

Success. The notification configuration has been updated. The response doesn't have a body.
*/
type UpdateNotificationNoContent struct {
}

func (o *UpdateNotificationNoContent) Error() string {
	return fmt.Sprintf("[PUT /notifications/{id}][%d] updateNotificationNoContent ", 204)
}

func (o *UpdateNotificationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNotificationBadRequest creates a UpdateNotificationBadRequest with default headers values
func NewUpdateNotificationBadRequest() *UpdateNotificationBadRequest {
	return &UpdateNotificationBadRequest{}
}

/*UpdateNotificationBadRequest handles this case with default header values.

Failed. The input is invalid.
*/
type UpdateNotificationBadRequest struct {
	Payload *dynatrace.ErrorEnvelope
}

func (o *UpdateNotificationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /notifications/{id}][%d] updateNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateNotificationBadRequest) GetPayload() *dynatrace.ErrorEnvelope {
	return o.Payload
}

func (o *UpdateNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dynatrace.ErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
